/* automatically generated by rust-bindgen 0.59.2 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _STRING_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 0;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const __XEN_TOOLS__: u32 = 1;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: i32 = -1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const P_tmpdir: &[u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const __XEN_LATEST_INTERFACE_VERSION__: u32 = 265728;
pub const __XEN_INTERFACE_VERSION__: u32 = 265728;
pub const XEN_HYPERCALL_TAG: u32 = 3745;
pub const XEN_LEGACY_MAX_VCPUS: u32 = 1;
pub const _VGCF_online: u32 = 0;
pub const VGCF_online: u32 = 1;
pub const XEN_DOMCTL_CONFIG_GIC_NATIVE: u32 = 0;
pub const XEN_DOMCTL_CONFIG_GIC_V2: u32 = 1;
pub const XEN_DOMCTL_CONFIG_GIC_V3: u32 = 2;
pub const XEN_DOMCTL_CONFIG_TEE_NONE: u32 = 0;
pub const XEN_DOMCTL_CONFIG_TEE_OPTEE: u32 = 1;
pub const PSR_THUMB: u32 = 32;
pub const PSR_FIQ_MASK: u32 = 64;
pub const PSR_IRQ_MASK: u32 = 128;
pub const PSR_ABT_MASK: u32 = 256;
pub const PSR_BIG_ENDIAN: u32 = 512;
pub const PSR_DBG_MASK: u32 = 512;
pub const PSR_IT_MASK: u32 = 100727808;
pub const PSR_JAZELLE: u32 = 16777216;
pub const PSR_MODE_USR: u32 = 16;
pub const PSR_MODE_FIQ: u32 = 17;
pub const PSR_MODE_IRQ: u32 = 18;
pub const PSR_MODE_SVC: u32 = 19;
pub const PSR_MODE_MON: u32 = 22;
pub const PSR_MODE_ABT: u32 = 23;
pub const PSR_MODE_HYP: u32 = 26;
pub const PSR_MODE_UND: u32 = 27;
pub const PSR_MODE_SYS: u32 = 31;
pub const PSR_MODE_BIT: u32 = 16;
pub const PSR_MODE_EL3h: u32 = 13;
pub const PSR_MODE_EL3t: u32 = 12;
pub const PSR_MODE_EL2h: u32 = 9;
pub const PSR_MODE_EL2t: u32 = 8;
pub const PSR_MODE_EL1h: u32 = 5;
pub const PSR_MODE_EL1t: u32 = 4;
pub const PSR_MODE_EL0t: u32 = 0;
pub const PSR_GUEST32_INIT: u32 = 467;
pub const PSR_GUEST64_INIT: u32 = 453;
pub const GUEST_GICV3_RDIST_REGIONS: u32 = 1;
pub const GUEST_RAM_BANKS: u32 = 2;
pub const GUEST_MAX_VCPUS: u32 = 128;
pub const GUEST_TIMER_VIRT_PPI: u32 = 27;
pub const GUEST_TIMER_PHYS_S_PPI: u32 = 29;
pub const GUEST_TIMER_PHYS_NS_PPI: u32 = 30;
pub const GUEST_EVTCHN_PPI: u32 = 31;
pub const GUEST_VPL011_SPI: u32 = 32;
pub const GUEST_VIRTIO_MMIO_SPI_FIRST: u32 = 33;
pub const GUEST_VIRTIO_MMIO_SPI_LAST: u32 = 43;
pub const PSCI_cpu_suspend: u32 = 0;
pub const PSCI_cpu_off: u32 = 1;
pub const PSCI_cpu_on: u32 = 2;
pub const PSCI_migrate: u32 = 3;
pub const __HYPERVISOR_set_trap_table: u32 = 0;
pub const __HYPERVISOR_mmu_update: u32 = 1;
pub const __HYPERVISOR_set_gdt: u32 = 2;
pub const __HYPERVISOR_stack_switch: u32 = 3;
pub const __HYPERVISOR_set_callbacks: u32 = 4;
pub const __HYPERVISOR_fpu_taskswitch: u32 = 5;
pub const __HYPERVISOR_sched_op_compat: u32 = 6;
pub const __HYPERVISOR_platform_op: u32 = 7;
pub const __HYPERVISOR_set_debugreg: u32 = 8;
pub const __HYPERVISOR_get_debugreg: u32 = 9;
pub const __HYPERVISOR_update_descriptor: u32 = 10;
pub const __HYPERVISOR_memory_op: u32 = 12;
pub const __HYPERVISOR_multicall: u32 = 13;
pub const __HYPERVISOR_update_va_mapping: u32 = 14;
pub const __HYPERVISOR_set_timer_op: u32 = 15;
pub const __HYPERVISOR_event_channel_op_compat: u32 = 16;
pub const __HYPERVISOR_xen_version: u32 = 17;
pub const __HYPERVISOR_console_io: u32 = 18;
pub const __HYPERVISOR_physdev_op_compat: u32 = 19;
pub const __HYPERVISOR_grant_table_op: u32 = 20;
pub const __HYPERVISOR_vm_assist: u32 = 21;
pub const __HYPERVISOR_update_va_mapping_otherdomain: u32 = 22;
pub const __HYPERVISOR_iret: u32 = 23;
pub const __HYPERVISOR_vcpu_op: u32 = 24;
pub const __HYPERVISOR_set_segment_base: u32 = 25;
pub const __HYPERVISOR_mmuext_op: u32 = 26;
pub const __HYPERVISOR_xsm_op: u32 = 27;
pub const __HYPERVISOR_nmi_op: u32 = 28;
pub const __HYPERVISOR_sched_op: u32 = 29;
pub const __HYPERVISOR_callback_op: u32 = 30;
pub const __HYPERVISOR_xenoprof_op: u32 = 31;
pub const __HYPERVISOR_event_channel_op: u32 = 32;
pub const __HYPERVISOR_physdev_op: u32 = 33;
pub const __HYPERVISOR_hvm_op: u32 = 34;
pub const __HYPERVISOR_sysctl: u32 = 35;
pub const __HYPERVISOR_domctl: u32 = 36;
pub const __HYPERVISOR_kexec_op: u32 = 37;
pub const __HYPERVISOR_tmem_op: u32 = 38;
pub const __HYPERVISOR_argo_op: u32 = 39;
pub const __HYPERVISOR_xenpmu_op: u32 = 40;
pub const __HYPERVISOR_dm_op: u32 = 41;
pub const __HYPERVISOR_hypfs_op: u32 = 42;
pub const __HYPERVISOR_arch_0: u32 = 48;
pub const __HYPERVISOR_arch_1: u32 = 49;
pub const __HYPERVISOR_arch_2: u32 = 50;
pub const __HYPERVISOR_arch_3: u32 = 51;
pub const __HYPERVISOR_arch_4: u32 = 52;
pub const __HYPERVISOR_arch_5: u32 = 53;
pub const __HYPERVISOR_arch_6: u32 = 54;
pub const __HYPERVISOR_arch_7: u32 = 55;
pub const VIRQ_TIMER: u32 = 0;
pub const VIRQ_DEBUG: u32 = 1;
pub const VIRQ_CONSOLE: u32 = 2;
pub const VIRQ_DOM_EXC: u32 = 3;
pub const VIRQ_TBUF: u32 = 4;
pub const VIRQ_DEBUGGER: u32 = 6;
pub const VIRQ_XENOPROF: u32 = 7;
pub const VIRQ_CON_RING: u32 = 8;
pub const VIRQ_PCPU_STATE: u32 = 9;
pub const VIRQ_MEM_EVENT: u32 = 10;
pub const VIRQ_ARGO: u32 = 11;
pub const VIRQ_ENOMEM: u32 = 12;
pub const VIRQ_XENPMU: u32 = 13;
pub const VIRQ_ARCH_0: u32 = 16;
pub const VIRQ_ARCH_1: u32 = 17;
pub const VIRQ_ARCH_2: u32 = 18;
pub const VIRQ_ARCH_3: u32 = 19;
pub const VIRQ_ARCH_4: u32 = 20;
pub const VIRQ_ARCH_5: u32 = 21;
pub const VIRQ_ARCH_6: u32 = 22;
pub const VIRQ_ARCH_7: u32 = 23;
pub const NR_VIRQS: u32 = 24;
pub const MMU_NORMAL_PT_UPDATE: u32 = 0;
pub const MMU_MACHPHYS_UPDATE: u32 = 1;
pub const MMU_PT_UPDATE_PRESERVE_AD: u32 = 2;
pub const MMU_PT_UPDATE_NO_TRANSLATE: u32 = 3;
pub const MMUEXT_PIN_L1_TABLE: u32 = 0;
pub const MMUEXT_PIN_L2_TABLE: u32 = 1;
pub const MMUEXT_PIN_L3_TABLE: u32 = 2;
pub const MMUEXT_PIN_L4_TABLE: u32 = 3;
pub const MMUEXT_UNPIN_TABLE: u32 = 4;
pub const MMUEXT_NEW_BASEPTR: u32 = 5;
pub const MMUEXT_TLB_FLUSH_LOCAL: u32 = 6;
pub const MMUEXT_INVLPG_LOCAL: u32 = 7;
pub const MMUEXT_TLB_FLUSH_MULTI: u32 = 8;
pub const MMUEXT_INVLPG_MULTI: u32 = 9;
pub const MMUEXT_TLB_FLUSH_ALL: u32 = 10;
pub const MMUEXT_INVLPG_ALL: u32 = 11;
pub const MMUEXT_FLUSH_CACHE: u32 = 12;
pub const MMUEXT_SET_LDT: u32 = 13;
pub const MMUEXT_NEW_USER_BASEPTR: u32 = 15;
pub const MMUEXT_CLEAR_PAGE: u32 = 16;
pub const MMUEXT_COPY_PAGE: u32 = 17;
pub const MMUEXT_FLUSH_CACHE_GLOBAL: u32 = 18;
pub const MMUEXT_MARK_SUPER: u32 = 19;
pub const MMUEXT_UNMARK_SUPER: u32 = 20;
pub const CONSOLEIO_write: u32 = 0;
pub const CONSOLEIO_read: u32 = 1;
pub const VMASST_CMD_enable: u32 = 0;
pub const VMASST_CMD_disable: u32 = 1;
pub const VMASST_TYPE_4gb_segments: u32 = 0;
pub const VMASST_TYPE_4gb_segments_notify: u32 = 1;
pub const VMASST_TYPE_writable_pagetables: u32 = 2;
pub const VMASST_TYPE_pae_extended_cr3: u32 = 3;
pub const VMASST_TYPE_architectural_iopl: u32 = 4;
pub const VMASST_TYPE_runstate_update_flag: u32 = 5;
pub const VMASST_TYPE_m2p_strict: u32 = 32;
pub const XEN_PVCLOCK_TSC_STABLE_BIT: u32 = 1;
pub const XEN_PVCLOCK_GUEST_STOPPED: u32 = 2;
pub const SIF_PRIVILEGED: u32 = 1;
pub const SIF_INITDOMAIN: u32 = 2;
pub const SIF_MULTIBOOT_MOD: u32 = 4;
pub const SIF_MOD_START_PFN: u32 = 8;
pub const SIF_VIRT_P2M_4TOOLS: u32 = 16;
pub const SIF_PM_MASK: u32 = 65280;
pub const XEN_VGATYPE_TEXT_MODE_3: u32 = 3;
pub const XEN_VGATYPE_VESA_LFB: u32 = 35;
pub const XEN_VGATYPE_EFI_LFB: u32 = 112;
pub const EVTCHNOP_bind_interdomain: u32 = 0;
pub const EVTCHNOP_bind_virq: u32 = 1;
pub const EVTCHNOP_bind_pirq: u32 = 2;
pub const EVTCHNOP_close: u32 = 3;
pub const EVTCHNOP_send: u32 = 4;
pub const EVTCHNOP_status: u32 = 5;
pub const EVTCHNOP_alloc_unbound: u32 = 6;
pub const EVTCHNOP_bind_ipi: u32 = 7;
pub const EVTCHNOP_bind_vcpu: u32 = 8;
pub const EVTCHNOP_unmask: u32 = 9;
pub const EVTCHNOP_reset: u32 = 10;
pub const EVTCHNOP_init_control: u32 = 11;
pub const EVTCHNOP_expand_array: u32 = 12;
pub const EVTCHNOP_set_priority: u32 = 13;
pub const BIND_PIRQ__WILL_SHARE: u32 = 1;
pub const EVTCHNSTAT_closed: u32 = 0;
pub const EVTCHNSTAT_unbound: u32 = 1;
pub const EVTCHNSTAT_interdomain: u32 = 2;
pub const EVTCHNSTAT_pirq: u32 = 3;
pub const EVTCHNSTAT_virq: u32 = 4;
pub const EVTCHNSTAT_ipi: u32 = 5;
pub const EVTCHN_FIFO_PRIORITY_MAX: u32 = 0;
pub const EVTCHN_FIFO_PRIORITY_DEFAULT: u32 = 7;
pub const EVTCHN_FIFO_PRIORITY_MIN: u32 = 15;
pub const EVTCHN_FIFO_MAX_QUEUES: u32 = 16;
pub const EVTCHN_FIFO_PENDING: u32 = 31;
pub const EVTCHN_FIFO_MASKED: u32 = 30;
pub const EVTCHN_FIFO_LINKED: u32 = 29;
pub const EVTCHN_FIFO_BUSY: u32 = 28;
pub const EVTCHN_FIFO_LINK_BITS: u32 = 17;
pub const EVTCHN_FIFO_LINK_MASK: u32 = 131071;
pub const EVTCHN_FIFO_NR_CHANNELS: u32 = 131072;
pub const GNTTAB_NR_RESERVED_ENTRIES: u32 = 8;
pub const GNTTAB_RESERVED_CONSOLE: u32 = 0;
pub const GNTTAB_RESERVED_XENSTORE: u32 = 1;
pub const GTF_invalid: u32 = 0;
pub const GTF_permit_access: u32 = 1;
pub const GTF_accept_transfer: u32 = 2;
pub const GTF_transitive: u32 = 3;
pub const GTF_type_mask: u32 = 3;
pub const _GTF_readonly: u32 = 2;
pub const GTF_readonly: u32 = 4;
pub const _GTF_reading: u32 = 3;
pub const GTF_reading: u32 = 8;
pub const _GTF_writing: u32 = 4;
pub const GTF_writing: u32 = 16;
pub const _GTF_PWT: u32 = 5;
pub const GTF_PWT: u32 = 32;
pub const _GTF_PCD: u32 = 6;
pub const GTF_PCD: u32 = 64;
pub const _GTF_PAT: u32 = 7;
pub const GTF_PAT: u32 = 128;
pub const _GTF_sub_page: u32 = 8;
pub const GTF_sub_page: u32 = 256;
pub const _GTF_transfer_committed: u32 = 2;
pub const GTF_transfer_committed: u32 = 4;
pub const _GTF_transfer_completed: u32 = 3;
pub const GTF_transfer_completed: u32 = 8;
pub const GNTTABOP_map_grant_ref: u32 = 0;
pub const GNTTABOP_unmap_grant_ref: u32 = 1;
pub const GNTTABOP_setup_table: u32 = 2;
pub const GNTTABOP_dump_table: u32 = 3;
pub const GNTTABOP_transfer: u32 = 4;
pub const GNTTABOP_copy: u32 = 5;
pub const GNTTABOP_query_size: u32 = 6;
pub const GNTTABOP_unmap_and_replace: u32 = 7;
pub const GNTTABOP_set_version: u32 = 8;
pub const GNTTABOP_get_status_frames: u32 = 9;
pub const GNTTABOP_get_version: u32 = 10;
pub const GNTTABOP_swap_grant_ref: u32 = 11;
pub const GNTTABOP_cache_flush: u32 = 12;
pub const _GNTCOPY_source_gref: u32 = 0;
pub const GNTCOPY_source_gref: u32 = 1;
pub const _GNTCOPY_dest_gref: u32 = 1;
pub const GNTCOPY_dest_gref: u32 = 2;
pub const GNTTAB_CACHE_CLEAN: u32 = 1;
pub const GNTTAB_CACHE_INVAL: u32 = 2;
pub const GNTTAB_CACHE_SOURCE_GREF: u32 = 2147483648;
pub const _GNTMAP_device_map: u32 = 0;
pub const GNTMAP_device_map: u32 = 1;
pub const _GNTMAP_host_map: u32 = 1;
pub const GNTMAP_host_map: u32 = 2;
pub const _GNTMAP_readonly: u32 = 2;
pub const GNTMAP_readonly: u32 = 4;
pub const _GNTMAP_application_map: u32 = 3;
pub const GNTMAP_application_map: u32 = 8;
pub const _GNTMAP_contains_pte: u32 = 4;
pub const GNTMAP_contains_pte: u32 = 16;
pub const _GNTMAP_guest_avail0: u32 = 16;
pub const GNTST_okay: u32 = 0;
pub const GNTST_general_error: i32 = -1;
pub const GNTST_bad_domain: i32 = -2;
pub const GNTST_bad_gntref: i32 = -3;
pub const GNTST_bad_handle: i32 = -4;
pub const GNTST_bad_virt_addr: i32 = -5;
pub const GNTST_bad_dev_addr: i32 = -6;
pub const GNTST_no_device_space: i32 = -7;
pub const GNTST_permission_denied: i32 = -8;
pub const GNTST_bad_page: i32 = -9;
pub const GNTST_bad_copy_arg: i32 = -10;
pub const GNTST_address_too_big: i32 = -11;
pub const GNTST_eagain: i32 = -12;
pub const GNTST_no_space: i32 = -13;
pub const PHYSDEVOP_eoi: u32 = 12;
pub const PHYSDEVOP_pirq_eoi_gmfn_v1: u32 = 17;
pub const PHYSDEVOP_pirq_eoi_gmfn_v2: u32 = 28;
pub const PHYSDEVOP_irq_status_query: u32 = 5;
pub const _XENIRQSTAT_needs_eoi: u32 = 0;
pub const XENIRQSTAT_needs_eoi: u32 = 1;
pub const _XENIRQSTAT_shared: u32 = 1;
pub const XENIRQSTAT_shared: u32 = 2;
pub const PHYSDEVOP_set_iopl: u32 = 6;
pub const PHYSDEVOP_set_iobitmap: u32 = 7;
pub const PHYSDEVOP_apic_read: u32 = 8;
pub const PHYSDEVOP_apic_write: u32 = 9;
pub const PHYSDEVOP_alloc_irq_vector: u32 = 10;
pub const PHYSDEVOP_free_irq_vector: u32 = 11;
pub const MAP_PIRQ_TYPE_MSI: u32 = 0;
pub const MAP_PIRQ_TYPE_GSI: u32 = 1;
pub const MAP_PIRQ_TYPE_UNKNOWN: u32 = 2;
pub const MAP_PIRQ_TYPE_MSI_SEG: u32 = 3;
pub const MAP_PIRQ_TYPE_MULTI_MSI: u32 = 4;
pub const PHYSDEVOP_map_pirq: u32 = 13;
pub const PHYSDEVOP_unmap_pirq: u32 = 14;
pub const PHYSDEVOP_manage_pci_add: u32 = 15;
pub const PHYSDEVOP_manage_pci_remove: u32 = 16;
pub const PHYSDEVOP_restore_msi: u32 = 19;
pub const PHYSDEVOP_manage_pci_add_ext: u32 = 20;
pub const PHYSDEVOP_setup_gsi: u32 = 21;
pub const PHYSDEVOP_get_free_pirq: u32 = 23;
pub const XEN_PCI_MMCFG_RESERVED: u32 = 1;
pub const PHYSDEVOP_pci_mmcfg_reserved: u32 = 24;
pub const XEN_PCI_DEV_EXTFN: u32 = 1;
pub const XEN_PCI_DEV_VIRTFN: u32 = 2;
pub const XEN_PCI_DEV_PXM: u32 = 4;
pub const PHYSDEVOP_pci_device_add: u32 = 25;
pub const PHYSDEVOP_pci_device_remove: u32 = 26;
pub const PHYSDEVOP_restore_msi_ext: u32 = 27;
pub const PHYSDEVOP_prepare_msix: u32 = 30;
pub const PHYSDEVOP_release_msix: u32 = 31;
pub const PHYSDEVOP_DBGP_RESET_PREPARE: u32 = 1;
pub const PHYSDEVOP_DBGP_RESET_DONE: u32 = 2;
pub const PHYSDEVOP_DBGP_BUS_UNKNOWN: u32 = 0;
pub const PHYSDEVOP_DBGP_BUS_PCI: u32 = 1;
pub const PHYSDEVOP_dbgp_op: u32 = 29;
pub const PHYSDEVOP_IRQ_UNMASK_NOTIFY: u32 = 4;
pub const PHYSDEVOP_pirq_eoi_gmfn: u32 = 28;
pub const XENMEM_increase_reservation: u32 = 0;
pub const XENMEM_decrease_reservation: u32 = 1;
pub const XENMEM_populate_physmap: u32 = 6;
pub const XENMEMF_populate_on_demand: u32 = 65536;
pub const XENMEMF_exact_node_request: u32 = 131072;
pub const XENMEMF_vnode: u32 = 262144;
pub const XENMEM_exchange: u32 = 11;
pub const XENMEM_maximum_ram_page: u32 = 2;
pub const XENMEM_current_reservation: u32 = 3;
pub const XENMEM_maximum_reservation: u32 = 4;
pub const XENMEM_maximum_gpfn: u32 = 14;
pub const XENMEM_machphys_mfn_list: u32 = 5;
pub const XENMEM_machphys_compat_mfn_list: u32 = 25;
pub const XENMEM_machphys_mapping: u32 = 12;
pub const XENMAPSPACE_shared_info: u32 = 0;
pub const XENMAPSPACE_grant_table: u32 = 1;
pub const XENMAPSPACE_gmfn: u32 = 2;
pub const XENMAPSPACE_gmfn_range: u32 = 3;
pub const XENMAPSPACE_gmfn_foreign: u32 = 4;
pub const XENMAPSPACE_dev_mmio: u32 = 5;
pub const XENMEM_add_to_physmap: u32 = 7;
pub const XENMAPIDX_grant_table_status: u32 = 2147483648;
pub const XENMEM_add_to_physmap_batch: u32 = 23;
pub const XENMEM_remove_from_physmap: u32 = 15;
pub const XENMEM_memory_map: u32 = 9;
pub const XENMEM_machine_memory_map: u32 = 10;
pub const XENMEM_set_memory_map: u32 = 13;
pub const XENMEM_set_pod_target: u32 = 16;
pub const XENMEM_get_pod_target: u32 = 17;
pub const XENMEM_get_sharing_freed_pages: u32 = 18;
pub const XENMEM_get_sharing_shared_pages: u32 = 19;
pub const XENMEM_paging_op: u32 = 20;
pub const XENMEM_paging_op_nominate: u32 = 0;
pub const XENMEM_paging_op_evict: u32 = 1;
pub const XENMEM_paging_op_prep: u32 = 2;
pub const XENMEM_access_op: u32 = 21;
pub const XENMEM_access_op_set_access: u32 = 0;
pub const XENMEM_access_op_get_access: u32 = 1;
pub const XENMEM_access_op_set_access_multi: u32 = 4;
pub const XENMEM_sharing_op: u32 = 22;
pub const XENMEM_sharing_op_nominate_gfn: u32 = 0;
pub const XENMEM_sharing_op_nominate_gref: u32 = 1;
pub const XENMEM_sharing_op_share: u32 = 2;
pub const XENMEM_sharing_op_debug_gfn: u32 = 3;
pub const XENMEM_sharing_op_debug_mfn: u32 = 4;
pub const XENMEM_sharing_op_debug_gref: u32 = 5;
pub const XENMEM_sharing_op_add_physmap: u32 = 6;
pub const XENMEM_sharing_op_audit: u32 = 7;
pub const XENMEM_sharing_op_range_share: u32 = 8;
pub const XENMEM_sharing_op_fork: u32 = 9;
pub const XENMEM_sharing_op_fork_reset: u32 = 10;
pub const XENMEM_SHARING_OP_S_HANDLE_INVALID: i32 = -10;
pub const XENMEM_SHARING_OP_C_HANDLE_INVALID: i32 = -9;
pub const XENMEM_FORK_WITH_IOMMU_ALLOWED: u32 = 1;
pub const XENMEM_FORK_BLOCK_INTERRUPTS: u32 = 2;
pub const XENMEM_claim_pages: u32 = 24;
pub const XENMEM_reserved_device_memory_map: u32 = 27;
pub const XENMEM_RDM_ALL: u32 = 1;
pub const XENMEM_acquire_resource: u32 = 28;
pub const XENMEM_resource_ioreq_server: u32 = 0;
pub const XENMEM_resource_grant_table: u32 = 1;
pub const XENMEM_resource_vmtrace_buf: u32 = 2;
pub const XENMEM_resource_grant_table_id_shared: u32 = 0;
pub const XENMEM_resource_grant_table_id_status: u32 = 1;
pub const XENMEM_resource_ioreq_server_frame_bufioreq: u32 = 0;
pub const XENMEM_get_vnumainfo: u32 = 26;
pub const XEN_DOMCTL_INTERFACE_VERSION: u32 = 20;
pub const _XEN_DOMCTL_CDF_hvm: u32 = 0;
pub const XEN_DOMCTL_CDF_hvm: u32 = 1;
pub const _XEN_DOMCTL_CDF_hap: u32 = 1;
pub const XEN_DOMCTL_CDF_hap: u32 = 2;
pub const _XEN_DOMCTL_CDF_s3_integrity: u32 = 2;
pub const XEN_DOMCTL_CDF_s3_integrity: u32 = 4;
pub const _XEN_DOMCTL_CDF_oos_off: u32 = 3;
pub const XEN_DOMCTL_CDF_oos_off: u32 = 8;
pub const _XEN_DOMCTL_CDF_xs_domain: u32 = 4;
pub const XEN_DOMCTL_CDF_xs_domain: u32 = 16;
pub const _XEN_DOMCTL_CDF_iommu: u32 = 5;
pub const XEN_DOMCTL_CDF_iommu: u32 = 32;
pub const _XEN_DOMCTL_CDF_nested_virt: u32 = 6;
pub const XEN_DOMCTL_CDF_nested_virt: u32 = 64;
pub const XEN_DOMCTL_CDF_vpmu: u32 = 128;
pub const XEN_DOMCTL_CDF_MAX: u32 = 128;
pub const _XEN_DOMCTL_IOMMU_no_sharept: u32 = 0;
pub const XEN_DOMCTL_IOMMU_no_sharept: u32 = 1;
pub const XEN_DOMCTL_IOMMU_MAX: u32 = 1;
pub const XEN_DOMCTL_GRANT_version_mask: u32 = 15;
pub const _XEN_DOMINF_dying: u32 = 0;
pub const XEN_DOMINF_dying: u32 = 1;
pub const _XEN_DOMINF_hvm_guest: u32 = 1;
pub const XEN_DOMINF_hvm_guest: u32 = 2;
pub const _XEN_DOMINF_shutdown: u32 = 2;
pub const XEN_DOMINF_shutdown: u32 = 4;
pub const _XEN_DOMINF_paused: u32 = 3;
pub const XEN_DOMINF_paused: u32 = 8;
pub const _XEN_DOMINF_blocked: u32 = 4;
pub const XEN_DOMINF_blocked: u32 = 16;
pub const _XEN_DOMINF_running: u32 = 5;
pub const XEN_DOMINF_running: u32 = 32;
pub const _XEN_DOMINF_debugged: u32 = 6;
pub const XEN_DOMINF_debugged: u32 = 64;
pub const _XEN_DOMINF_xs_domain: u32 = 7;
pub const XEN_DOMINF_xs_domain: u32 = 128;
pub const _XEN_DOMINF_hap: u32 = 8;
pub const XEN_DOMINF_hap: u32 = 256;
pub const XEN_DOMINF_shutdownmask: u32 = 255;
pub const XEN_DOMINF_shutdownshift: u32 = 16;
pub const XEN_INVALID_MAX_VCPU_ID: i32 = -1;
pub const XEN_DOMCTL_PFINFO_LTAB_SHIFT: u32 = 28;
pub const XEN_DOMCTL_PFINFO_NOTAB: u32 = 0;
pub const XEN_DOMCTL_PFINFO_L1TAB: u32 = 268435456;
pub const XEN_DOMCTL_PFINFO_L2TAB: u32 = 536870912;
pub const XEN_DOMCTL_PFINFO_L3TAB: u32 = 805306368;
pub const XEN_DOMCTL_PFINFO_L4TAB: u32 = 1073741824;
pub const XEN_DOMCTL_PFINFO_LTABTYPE_MASK: u32 = 1879048192;
pub const XEN_DOMCTL_PFINFO_LPINTAB: u32 = 2147483648;
pub const XEN_DOMCTL_PFINFO_XTAB: u32 = 4026531840;
pub const XEN_DOMCTL_PFINFO_XALLOC: u32 = 3758096384;
pub const XEN_DOMCTL_PFINFO_BROKEN: u32 = 3489660928;
pub const XEN_DOMCTL_PFINFO_LTAB_MASK: u32 = 4026531840;
pub const XEN_DOMCTL_SHADOW_OP_OFF: u32 = 0;
pub const XEN_DOMCTL_SHADOW_OP_ENABLE: u32 = 32;
pub const XEN_DOMCTL_SHADOW_OP_CLEAN: u32 = 11;
pub const XEN_DOMCTL_SHADOW_OP_PEEK: u32 = 12;
pub const XEN_DOMCTL_SHADOW_OP_GET_ALLOCATION: u32 = 30;
pub const XEN_DOMCTL_SHADOW_OP_SET_ALLOCATION: u32 = 31;
pub const XEN_DOMCTL_SHADOW_OP_ENABLE_TEST: u32 = 1;
pub const XEN_DOMCTL_SHADOW_OP_ENABLE_LOGDIRTY: u32 = 2;
pub const XEN_DOMCTL_SHADOW_ENABLE_REFCOUNT: u32 = 2;
pub const XEN_DOMCTL_SHADOW_ENABLE_LOG_DIRTY: u32 = 4;
pub const XEN_DOMCTL_SHADOW_ENABLE_TRANSLATE: u32 = 8;
pub const XEN_DOMCTL_SHADOW_ENABLE_EXTERNAL: u32 = 16;
pub const XEN_DOMCTL_SHADOW_LOGDIRTY_FINAL: u32 = 1;
pub const _XEN_VCPUAFFINITY_HARD: u32 = 0;
pub const XEN_VCPUAFFINITY_HARD: u32 = 1;
pub const _XEN_VCPUAFFINITY_SOFT: u32 = 1;
pub const XEN_VCPUAFFINITY_SOFT: u32 = 2;
pub const _XEN_VCPUAFFINITY_FORCE: u32 = 2;
pub const XEN_VCPUAFFINITY_FORCE: u32 = 4;
pub const XEN_SCHEDULER_CREDIT: u32 = 5;
pub const XEN_SCHEDULER_CREDIT2: u32 = 6;
pub const XEN_SCHEDULER_ARINC653: u32 = 7;
pub const XEN_SCHEDULER_RTDS: u32 = 8;
pub const XEN_SCHEDULER_NULL: u32 = 9;
pub const _XEN_DOMCTL_SCHEDRT_extra: u32 = 0;
pub const XEN_DOMCTL_SCHEDRT_extra: u32 = 1;
pub const XEN_DOMCTL_SCHEDOP_putinfo: u32 = 0;
pub const XEN_DOMCTL_SCHEDOP_getinfo: u32 = 1;
pub const XEN_DOMCTL_SCHEDOP_putvcpuinfo: u32 = 2;
pub const XEN_DOMCTL_SCHEDOP_getvcpuinfo: u32 = 3;
pub const XEN_DOMCTL_SENDTRIGGER_NMI: u32 = 0;
pub const XEN_DOMCTL_SENDTRIGGER_RESET: u32 = 1;
pub const XEN_DOMCTL_SENDTRIGGER_INIT: u32 = 2;
pub const XEN_DOMCTL_SENDTRIGGER_POWER: u32 = 3;
pub const XEN_DOMCTL_SENDTRIGGER_SLEEP: u32 = 4;
pub const XEN_DOMCTL_DEV_PCI: u32 = 0;
pub const XEN_DOMCTL_DEV_DT: u32 = 1;
pub const XEN_DOMCTL_DEV_RDM_RELAXED: u32 = 1;
pub const XEN_DOMCTL_VMSI_X86_DEST_ID_MASK: u32 = 255;
pub const XEN_DOMCTL_VMSI_X86_RH_MASK: u32 = 256;
pub const XEN_DOMCTL_VMSI_X86_DM_MASK: u32 = 512;
pub const XEN_DOMCTL_VMSI_X86_DELIV_MASK: u32 = 28672;
pub const XEN_DOMCTL_VMSI_X86_TRIG_MASK: u32 = 32768;
pub const XEN_DOMCTL_VMSI_X86_UNMASKED: u32 = 65536;
pub const DPCI_ADD_MAPPING: u32 = 1;
pub const DPCI_REMOVE_MAPPING: u32 = 0;
pub const XEN_DOMCTL_MEM_CACHEATTR_UC: u32 = 0;
pub const XEN_DOMCTL_MEM_CACHEATTR_WC: u32 = 1;
pub const XEN_DOMCTL_MEM_CACHEATTR_WT: u32 = 4;
pub const XEN_DOMCTL_MEM_CACHEATTR_WP: u32 = 5;
pub const XEN_DOMCTL_MEM_CACHEATTR_WB: u32 = 6;
pub const XEN_DOMCTL_MEM_CACHEATTR_UCM: u32 = 7;
pub const XEN_DOMCTL_DEBUG_OP_SINGLE_STEP_OFF: u32 = 0;
pub const XEN_DOMCTL_DEBUG_OP_SINGLE_STEP_ON: u32 = 1;
pub const XEN_VM_EVENT_ENABLE: u32 = 0;
pub const XEN_VM_EVENT_DISABLE: u32 = 1;
pub const XEN_VM_EVENT_RESUME: u32 = 2;
pub const XEN_VM_EVENT_GET_VERSION: u32 = 3;
pub const XEN_DOMCTL_VM_EVENT_OP_PAGING: u32 = 1;
pub const XEN_DOMCTL_VM_EVENT_OP_MONITOR: u32 = 2;
pub const XEN_DOMCTL_VM_EVENT_OP_SHARING: u32 = 3;
pub const XEN_DOMCTL_MEM_SHARING_CONTROL: u32 = 0;
pub const XEN_DOMCTL_PSR_CMT_OP_DETACH: u32 = 0;
pub const XEN_DOMCTL_PSR_CMT_OP_ATTACH: u32 = 1;
pub const XEN_DOMCTL_PSR_CMT_OP_QUERY_RMID: u32 = 2;
pub const XEN_DOMCTL_MONITOR_OP_ENABLE: u32 = 0;
pub const XEN_DOMCTL_MONITOR_OP_DISABLE: u32 = 1;
pub const XEN_DOMCTL_MONITOR_OP_GET_CAPABILITIES: u32 = 2;
pub const XEN_DOMCTL_MONITOR_OP_EMULATE_EACH_REP: u32 = 3;
pub const XEN_DOMCTL_MONITOR_OP_CONTROL_REGISTERS: u32 = 4;
pub const XEN_DOMCTL_MONITOR_EVENT_WRITE_CTRLREG: u32 = 0;
pub const XEN_DOMCTL_MONITOR_EVENT_MOV_TO_MSR: u32 = 1;
pub const XEN_DOMCTL_MONITOR_EVENT_SINGLESTEP: u32 = 2;
pub const XEN_DOMCTL_MONITOR_EVENT_SOFTWARE_BREAKPOINT: u32 = 3;
pub const XEN_DOMCTL_MONITOR_EVENT_GUEST_REQUEST: u32 = 4;
pub const XEN_DOMCTL_MONITOR_EVENT_DEBUG_EXCEPTION: u32 = 5;
pub const XEN_DOMCTL_MONITOR_EVENT_CPUID: u32 = 6;
pub const XEN_DOMCTL_MONITOR_EVENT_PRIVILEGED_CALL: u32 = 7;
pub const XEN_DOMCTL_MONITOR_EVENT_INTERRUPT: u32 = 8;
pub const XEN_DOMCTL_MONITOR_EVENT_DESC_ACCESS: u32 = 9;
pub const XEN_DOMCTL_MONITOR_EVENT_EMUL_UNIMPLEMENTED: u32 = 10;
pub const XEN_DOMCTL_MONITOR_EVENT_INGUEST_PAGEFAULT: u32 = 11;
pub const XEN_DOMCTL_PSR_SET_L3_CBM: u32 = 0;
pub const XEN_DOMCTL_PSR_GET_L3_CBM: u32 = 1;
pub const XEN_DOMCTL_PSR_SET_L3_CODE: u32 = 2;
pub const XEN_DOMCTL_PSR_SET_L3_DATA: u32 = 3;
pub const XEN_DOMCTL_PSR_GET_L3_CODE: u32 = 4;
pub const XEN_DOMCTL_PSR_GET_L3_DATA: u32 = 5;
pub const XEN_DOMCTL_PSR_SET_L2_CBM: u32 = 6;
pub const XEN_DOMCTL_PSR_GET_L2_CBM: u32 = 7;
pub const XEN_DOMCTL_PSR_SET_MBA_THRTL: u32 = 8;
pub const XEN_DOMCTL_PSR_GET_MBA_THRTL: u32 = 9;
pub const XEN_DOMCTL_VUART_OP_INIT: u32 = 0;
pub const XEN_DOMCTL_VUART_TYPE_VPL011: u32 = 0;
pub const XEN_DOMCTL_vmtrace_enable: u32 = 1;
pub const XEN_DOMCTL_vmtrace_disable: u32 = 2;
pub const XEN_DOMCTL_vmtrace_reset_and_enable: u32 = 3;
pub const XEN_DOMCTL_vmtrace_output_position: u32 = 4;
pub const XEN_DOMCTL_vmtrace_get_option: u32 = 5;
pub const XEN_DOMCTL_vmtrace_set_option: u32 = 6;
pub const XEN_DOMCTL_createdomain: u32 = 1;
pub const XEN_DOMCTL_destroydomain: u32 = 2;
pub const XEN_DOMCTL_pausedomain: u32 = 3;
pub const XEN_DOMCTL_unpausedomain: u32 = 4;
pub const XEN_DOMCTL_getdomaininfo: u32 = 5;
pub const XEN_DOMCTL_setvcpuaffinity: u32 = 9;
pub const XEN_DOMCTL_shadow_op: u32 = 10;
pub const XEN_DOMCTL_max_mem: u32 = 11;
pub const XEN_DOMCTL_setvcpucontext: u32 = 12;
pub const XEN_DOMCTL_getvcpucontext: u32 = 13;
pub const XEN_DOMCTL_getvcpuinfo: u32 = 14;
pub const XEN_DOMCTL_max_vcpus: u32 = 15;
pub const XEN_DOMCTL_scheduler_op: u32 = 16;
pub const XEN_DOMCTL_setdomainhandle: u32 = 17;
pub const XEN_DOMCTL_setdebugging: u32 = 18;
pub const XEN_DOMCTL_irq_permission: u32 = 19;
pub const XEN_DOMCTL_iomem_permission: u32 = 20;
pub const XEN_DOMCTL_ioport_permission: u32 = 21;
pub const XEN_DOMCTL_hypercall_init: u32 = 22;
pub const XEN_DOMCTL_settimeoffset: u32 = 24;
pub const XEN_DOMCTL_getvcpuaffinity: u32 = 25;
pub const XEN_DOMCTL_real_mode_area: u32 = 26;
pub const XEN_DOMCTL_resumedomain: u32 = 27;
pub const XEN_DOMCTL_sendtrigger: u32 = 28;
pub const XEN_DOMCTL_subscribe: u32 = 29;
pub const XEN_DOMCTL_gethvmcontext: u32 = 33;
pub const XEN_DOMCTL_sethvmcontext: u32 = 34;
pub const XEN_DOMCTL_set_address_size: u32 = 35;
pub const XEN_DOMCTL_get_address_size: u32 = 36;
pub const XEN_DOMCTL_assign_device: u32 = 37;
pub const XEN_DOMCTL_bind_pt_irq: u32 = 38;
pub const XEN_DOMCTL_memory_mapping: u32 = 39;
pub const XEN_DOMCTL_ioport_mapping: u32 = 40;
pub const XEN_DOMCTL_set_ext_vcpucontext: u32 = 42;
pub const XEN_DOMCTL_get_ext_vcpucontext: u32 = 43;
pub const XEN_DOMCTL_set_opt_feature: u32 = 44;
pub const XEN_DOMCTL_test_assign_device: u32 = 45;
pub const XEN_DOMCTL_set_target: u32 = 46;
pub const XEN_DOMCTL_deassign_device: u32 = 47;
pub const XEN_DOMCTL_unbind_pt_irq: u32 = 48;
pub const XEN_DOMCTL_get_device_group: u32 = 50;
pub const XEN_DOMCTL_debug_op: u32 = 54;
pub const XEN_DOMCTL_gethvmcontext_partial: u32 = 55;
pub const XEN_DOMCTL_vm_event_op: u32 = 56;
pub const XEN_DOMCTL_mem_sharing_op: u32 = 57;
pub const XEN_DOMCTL_gettscinfo: u32 = 59;
pub const XEN_DOMCTL_settscinfo: u32 = 60;
pub const XEN_DOMCTL_getpageframeinfo3: u32 = 61;
pub const XEN_DOMCTL_setvcpuextstate: u32 = 62;
pub const XEN_DOMCTL_getvcpuextstate: u32 = 63;
pub const XEN_DOMCTL_set_access_required: u32 = 64;
pub const XEN_DOMCTL_audit_p2m: u32 = 65;
pub const XEN_DOMCTL_set_virq_handler: u32 = 66;
pub const XEN_DOMCTL_set_broken_page_p2m: u32 = 67;
pub const XEN_DOMCTL_setnodeaffinity: u32 = 68;
pub const XEN_DOMCTL_getnodeaffinity: u32 = 69;
pub const XEN_DOMCTL_cacheflush: u32 = 71;
pub const XEN_DOMCTL_get_vcpu_msrs: u32 = 72;
pub const XEN_DOMCTL_set_vcpu_msrs: u32 = 73;
pub const XEN_DOMCTL_setvnumainfo: u32 = 74;
pub const XEN_DOMCTL_psr_cmt_op: u32 = 75;
pub const XEN_DOMCTL_monitor_op: u32 = 77;
pub const XEN_DOMCTL_psr_alloc: u32 = 78;
pub const XEN_DOMCTL_soft_reset: u32 = 79;
pub const XEN_DOMCTL_vuart_op: u32 = 81;
pub const XEN_DOMCTL_get_cpu_policy: u32 = 82;
pub const XEN_DOMCTL_set_cpu_policy: u32 = 83;
pub const XEN_DOMCTL_vmtrace_op: u32 = 84;
pub const XEN_DOMCTL_gdbsx_guestmemio: u32 = 1000;
pub const XEN_DOMCTL_gdbsx_pausevcpu: u32 = 1001;
pub const XEN_DOMCTL_gdbsx_unpausevcpu: u32 = 1002;
pub const XEN_DOMCTL_gdbsx_domstatus: u32 = 1003;
pub const XEN_SYSCTL_INTERFACE_VERSION: u32 = 20;
pub const XEN_SYSCTL_TBUFOP_get_info: u32 = 0;
pub const XEN_SYSCTL_TBUFOP_set_cpu_mask: u32 = 1;
pub const XEN_SYSCTL_TBUFOP_set_evt_mask: u32 = 2;
pub const XEN_SYSCTL_TBUFOP_set_size: u32 = 3;
pub const XEN_SYSCTL_TBUFOP_enable: u32 = 4;
pub const XEN_SYSCTL_TBUFOP_disable: u32 = 5;
pub const _XEN_SYSCTL_PHYSCAP_hvm: u32 = 0;
pub const XEN_SYSCTL_PHYSCAP_hvm: u32 = 1;
pub const _XEN_SYSCTL_PHYSCAP_pv: u32 = 1;
pub const XEN_SYSCTL_PHYSCAP_pv: u32 = 2;
pub const _XEN_SYSCTL_PHYSCAP_directio: u32 = 2;
pub const XEN_SYSCTL_PHYSCAP_directio: u32 = 4;
pub const _XEN_SYSCTL_PHYSCAP_hap: u32 = 3;
pub const XEN_SYSCTL_PHYSCAP_hap: u32 = 8;
pub const _XEN_SYSCTL_PHYSCAP_shadow: u32 = 4;
pub const XEN_SYSCTL_PHYSCAP_shadow: u32 = 16;
pub const _XEN_SYSCTL_PHYSCAP_iommu_hap_pt_share: u32 = 5;
pub const XEN_SYSCTL_PHYSCAP_iommu_hap_pt_share: u32 = 32;
pub const XEN_SYSCTL_PHYSCAP_vmtrace: u32 = 64;
pub const XEN_SYSCTL_PHYSCAP_vpmu: u32 = 128;
pub const XEN_SYSCTL_PHYSCAP_gnttab_v1: u32 = 256;
pub const XEN_SYSCTL_PHYSCAP_gnttab_v2: u32 = 512;
pub const XEN_SYSCTL_PHYSCAP_MAX: u32 = 512;
pub const XEN_SYSCTL_PERFCOP_reset: u32 = 1;
pub const XEN_SYSCTL_PERFCOP_query: u32 = 2;
pub const PMSTAT_CATEGORY_MASK: u32 = 240;
pub const PMSTAT_PX: u32 = 16;
pub const PMSTAT_CX: u32 = 32;
pub const PMSTAT_get_max_px: u32 = 17;
pub const PMSTAT_get_pxstat: u32 = 18;
pub const PMSTAT_reset_pxstat: u32 = 19;
pub const PMSTAT_get_max_cx: u32 = 33;
pub const PMSTAT_get_cxstat: u32 = 34;
pub const PMSTAT_reset_cxstat: u32 = 35;
pub const XEN_SYSCTL_CPU_HOTPLUG_ONLINE: u32 = 0;
pub const XEN_SYSCTL_CPU_HOTPLUG_OFFLINE: u32 = 1;
pub const XEN_SYSCTL_CPU_HOTPLUG_SMT_ENABLE: u32 = 2;
pub const XEN_SYSCTL_CPU_HOTPLUG_SMT_DISABLE: u32 = 3;
pub const CPUFREQ_NAME_LEN: u32 = 16;
pub const SCALING_MAX_FREQ: u32 = 1;
pub const SCALING_MIN_FREQ: u32 = 2;
pub const SCALING_SETSPEED: u32 = 3;
pub const SAMPLING_RATE: u32 = 4;
pub const UP_THRESHOLD: u32 = 5;
pub const PM_PARA_CATEGORY_MASK: u32 = 240;
pub const CPUFREQ_PARA: u32 = 16;
pub const GET_CPUFREQ_PARA: u32 = 17;
pub const SET_CPUFREQ_GOV: u32 = 18;
pub const SET_CPUFREQ_PARA: u32 = 19;
pub const GET_CPUFREQ_AVGFREQ: u32 = 20;
pub const XEN_SYSCTL_pm_op_set_sched_opt_smt: u32 = 33;
pub const XEN_SYSCTL_pm_op_get_max_cstate: u32 = 34;
pub const XEN_SYSCTL_pm_op_set_max_cstate: u32 = 35;
pub const XEN_SYSCTL_pm_op_set_vcpu_migration_delay: u32 = 36;
pub const XEN_SYSCTL_pm_op_get_vcpu_migration_delay: u32 = 37;
pub const XEN_SYSCTL_pm_op_enable_turbo: u32 = 38;
pub const XEN_SYSCTL_pm_op_disable_turbo: u32 = 39;
pub const XEN_SYSCTL_CX_UNLIMITED: u32 = 4294967295;
pub const sysctl_page_offline: u32 = 1;
pub const sysctl_page_online: u32 = 2;
pub const sysctl_query_page_offline: u32 = 3;
pub const PG_OFFLINE_STATUS_MASK: u32 = 255;
pub const PG_OFFLINE_INVALID: u32 = 1;
pub const PG_OFFLINE_OFFLINED: u32 = 2;
pub const PG_OFFLINE_PENDING: u32 = 4;
pub const PG_OFFLINE_FAILED: u32 = 8;
pub const PG_OFFLINE_AGAIN: u32 = 16;
pub const PG_ONLINE_FAILED: u32 = 8;
pub const PG_ONLINE_ONLINED: u32 = 2;
pub const PG_OFFLINE_STATUS_OFFLINED: u32 = 2;
pub const PG_OFFLINE_STATUS_ONLINE: u32 = 4;
pub const PG_OFFLINE_STATUS_OFFLINE_PENDING: u32 = 8;
pub const PG_OFFLINE_STATUS_BROKEN: u32 = 16;
pub const PG_OFFLINE_MISC_MASK: u32 = 4080;
pub const PG_OFFLINE_XENPAGE: u32 = 256;
pub const PG_OFFLINE_DOM0PAGE: u32 = 512;
pub const PG_OFFLINE_ANONYMOUS: u32 = 1024;
pub const PG_OFFLINE_NOT_CONV_RAM: u32 = 2048;
pub const PG_OFFLINE_OWNED: u32 = 4096;
pub const PG_OFFLINE_BROKEN: u32 = 8192;
pub const PG_ONLINE_BROKEN: u32 = 8192;
pub const PG_OFFLINE_OWNER_SHIFT: u32 = 16;
pub const XEN_SYSCTL_LOCKPROF_reset: u32 = 1;
pub const XEN_SYSCTL_LOCKPROF_query: u32 = 2;
pub const LOCKPROF_TYPE_GLOBAL: u32 = 0;
pub const LOCKPROF_TYPE_PERDOM: u32 = 1;
pub const LOCKPROF_TYPE_N: u32 = 2;
pub const XEN_INVALID_CORE_ID: i32 = -1;
pub const XEN_INVALID_SOCKET_ID: i32 = -1;
pub const XEN_INVALID_NODE_ID: i32 = -1;
pub const XEN_INVALID_MEM_SZ: i32 = -1;
pub const XEN_INVALID_NODE_DIST: i32 = -1;
pub const XEN_SYSCTL_CPUPOOL_OP_CREATE: u32 = 1;
pub const XEN_SYSCTL_CPUPOOL_OP_DESTROY: u32 = 2;
pub const XEN_SYSCTL_CPUPOOL_OP_INFO: u32 = 3;
pub const XEN_SYSCTL_CPUPOOL_OP_ADDCPU: u32 = 4;
pub const XEN_SYSCTL_CPUPOOL_OP_RMCPU: u32 = 5;
pub const XEN_SYSCTL_CPUPOOL_OP_MOVEDOMAIN: u32 = 6;
pub const XEN_SYSCTL_CPUPOOL_OP_FREEINFO: u32 = 7;
pub const XEN_SYSCTL_CPUPOOL_PAR_ANY: u32 = 4294967295;
pub const ARINC653_MAX_DOMAINS_PER_SCHEDULE: u32 = 64;
pub const XEN_SYSCTL_SCHED_RATELIMIT_MAX: u32 = 500000;
pub const XEN_SYSCTL_SCHED_RATELIMIT_MIN: u32 = 100;
pub const XEN_SYSCTL_CSCHED_TSLICE_MAX: u32 = 1000;
pub const XEN_SYSCTL_CSCHED_TSLICE_MIN: u32 = 1;
pub const XEN_SYSCTL_CSCHED_MGR_DLY_MAX_US: u32 = 100000;
pub const XEN_SYSCTL_SCHEDOP_putinfo: u32 = 0;
pub const XEN_SYSCTL_SCHEDOP_getinfo: u32 = 1;
pub const XEN_GCOV_FORMAT_MAGIC: u32 = 1480806230;
pub const XEN_SYSCTL_COVERAGE_get_size: u32 = 0;
pub const XEN_SYSCTL_COVERAGE_read: u32 = 1;
pub const XEN_SYSCTL_COVERAGE_reset: u32 = 2;
pub const XEN_SYSCTL_PSR_CMT_get_total_rmid: u32 = 0;
pub const XEN_SYSCTL_PSR_CMT_get_l3_upscaling_factor: u32 = 1;
pub const XEN_SYSCTL_PSR_CMT_get_l3_cache_size: u32 = 2;
pub const XEN_SYSCTL_PSR_CMT_enabled: u32 = 3;
pub const XEN_SYSCTL_PSR_CMT_get_l3_event_mask: u32 = 4;
pub const XEN_INVALID_DEV: i32 = -2;
pub const XEN_SYSCTL_PSR_get_l3_info: u32 = 0;
pub const XEN_SYSCTL_PSR_get_l2_info: u32 = 1;
pub const XEN_SYSCTL_PSR_get_mba_info: u32 = 2;
pub const XEN_SYSCTL_PSR_CAT_L3_CDP: u32 = 1;
pub const XEN_SYSCTL_PSR_MBA_LINEAR: u32 = 1;
pub const XEN_SYSCTL_CPU_LEVELCAP_faulting: u32 = 1;
pub const XEN_SYSCTL_CPU_LEVELCAP_ecx: u32 = 2;
pub const XEN_SYSCTL_CPU_LEVELCAP_edx: u32 = 4;
pub const XEN_SYSCTL_CPU_LEVELCAP_extd_ecx: u32 = 8;
pub const XEN_SYSCTL_CPU_LEVELCAP_extd_edx: u32 = 16;
pub const XEN_SYSCTL_CPU_LEVELCAP_xsave_eax: u32 = 32;
pub const XEN_SYSCTL_CPU_LEVELCAP_thermal_ecx: u32 = 64;
pub const XEN_SYSCTL_CPU_LEVELCAP_l7s0_eax: u32 = 128;
pub const XEN_SYSCTL_CPU_LEVELCAP_l7s0_ebx: u32 = 256;
pub const XEN_SYSCTL_cpu_featureset_raw: u32 = 0;
pub const XEN_SYSCTL_cpu_featureset_host: u32 = 1;
pub const XEN_SYSCTL_cpu_featureset_pv: u32 = 2;
pub const XEN_SYSCTL_cpu_featureset_hvm: u32 = 3;
pub const LIVEPATCH_PAYLOAD_VERSION: u32 = 2;
pub const XEN_LIVEPATCH_NAME_SIZE: u32 = 128;
pub const XEN_SYSCTL_LIVEPATCH_UPLOAD: u32 = 0;
pub const XEN_SYSCTL_LIVEPATCH_GET: u32 = 1;
pub const LIVEPATCH_STATE_CHECKED: u32 = 1;
pub const LIVEPATCH_STATE_APPLIED: u32 = 2;
pub const XEN_SYSCTL_LIVEPATCH_LIST: u32 = 2;
pub const XEN_SYSCTL_LIVEPATCH_ACTION: u32 = 3;
pub const LIVEPATCH_ACTION_UNLOAD: u32 = 1;
pub const LIVEPATCH_ACTION_REVERT: u32 = 2;
pub const LIVEPATCH_ACTION_APPLY: u32 = 3;
pub const LIVEPATCH_ACTION_REPLACE: u32 = 4;
pub const LIVEPATCH_ACTION_APPLY_NODEPS: u32 = 1;
pub const XEN_SYSCTL_readconsole: u32 = 1;
pub const XEN_SYSCTL_tbuf_op: u32 = 2;
pub const XEN_SYSCTL_physinfo: u32 = 3;
pub const XEN_SYSCTL_sched_id: u32 = 4;
pub const XEN_SYSCTL_perfc_op: u32 = 5;
pub const XEN_SYSCTL_getdomaininfolist: u32 = 6;
pub const XEN_SYSCTL_debug_keys: u32 = 7;
pub const XEN_SYSCTL_getcpuinfo: u32 = 8;
pub const XEN_SYSCTL_availheap: u32 = 9;
pub const XEN_SYSCTL_get_pmstat: u32 = 10;
pub const XEN_SYSCTL_cpu_hotplug: u32 = 11;
pub const XEN_SYSCTL_pm_op: u32 = 12;
pub const XEN_SYSCTL_page_offline_op: u32 = 14;
pub const XEN_SYSCTL_lockprof_op: u32 = 15;
pub const XEN_SYSCTL_cputopoinfo: u32 = 16;
pub const XEN_SYSCTL_numainfo: u32 = 17;
pub const XEN_SYSCTL_cpupool_op: u32 = 18;
pub const XEN_SYSCTL_scheduler_op: u32 = 19;
pub const XEN_SYSCTL_coverage_op: u32 = 20;
pub const XEN_SYSCTL_psr_cmt_op: u32 = 21;
pub const XEN_SYSCTL_pcitopoinfo: u32 = 22;
pub const XEN_SYSCTL_psr_alloc: u32 = 23;
pub const XEN_SYSCTL_get_cpu_levelling_caps: u32 = 25;
pub const XEN_SYSCTL_get_cpu_featureset: u32 = 26;
pub const XEN_SYSCTL_livepatch_op: u32 = 27;
pub const XEN_SYSCTL_get_cpu_policy: u32 = 29;
pub const XENVER_version: u32 = 0;
pub const XENVER_extraversion: u32 = 1;
pub const XENVER_compile_info: u32 = 2;
pub const XENVER_capabilities: u32 = 3;
pub const XENVER_changeset: u32 = 4;
pub const XENVER_platform_parameters: u32 = 5;
pub const XENVER_get_features: u32 = 6;
pub const XENFEAT_writable_page_tables: u32 = 0;
pub const XENFEAT_writable_descriptor_tables: u32 = 1;
pub const XENFEAT_auto_translated_physmap: u32 = 2;
pub const XENFEAT_supervisor_mode_kernel: u32 = 3;
pub const XENFEAT_pae_pgdir_above_4gb: u32 = 4;
pub const XENFEAT_mmu_pt_update_preserve_ad: u32 = 5;
pub const XENFEAT_highmem_assist: u32 = 6;
pub const XENFEAT_gnttab_map_avail_bits: u32 = 7;
pub const XENFEAT_hvm_callback_vector: u32 = 8;
pub const XENFEAT_hvm_safe_pvclock: u32 = 9;
pub const XENFEAT_hvm_pirqs: u32 = 10;
pub const XENFEAT_dom0: u32 = 11;
pub const XENFEAT_memory_op_vnode_supported: u32 = 13;
pub const XENFEAT_ARM_SMCCC_supported: u32 = 14;
pub const XENFEAT_linux_rsdp_unrestricted: u32 = 15;
pub const XENFEAT_not_direct_mapped: u32 = 16;
pub const XENFEAT_direct_mapped: u32 = 17;
pub const XENFEAT_NR_SUBMAPS: u32 = 1;
pub const XENVER_pagesize: u32 = 7;
pub const XENVER_guest_handle: u32 = 8;
pub const XENVER_commandline: u32 = 9;
pub const XENVER_build_id: u32 = 10;
pub const SCHEDOP_yield: u32 = 0;
pub const SCHEDOP_block: u32 = 1;
pub const SCHEDOP_shutdown: u32 = 2;
pub const SCHEDOP_poll: u32 = 3;
pub const SCHEDOP_remote_shutdown: u32 = 4;
pub const SCHEDOP_shutdown_code: u32 = 5;
pub const SCHEDOP_watchdog: u32 = 6;
pub const SCHEDOP_pin_override: u32 = 7;
pub const SHUTDOWN_poweroff: u32 = 0;
pub const SHUTDOWN_reboot: u32 = 1;
pub const SHUTDOWN_suspend: u32 = 2;
pub const SHUTDOWN_crash: u32 = 3;
pub const SHUTDOWN_watchdog: u32 = 4;
pub const SHUTDOWN_soft_reset: u32 = 5;
pub const SHUTDOWN_MAX: u32 = 5;
pub const XEN_DMOP_create_ioreq_server: u32 = 1;
pub const XEN_DMOP_get_ioreq_server_info: u32 = 2;
pub const _XEN_DMOP_no_gfns: u32 = 0;
pub const XEN_DMOP_no_gfns: u32 = 1;
pub const XEN_DMOP_map_io_range_to_ioreq_server: u32 = 3;
pub const XEN_DMOP_unmap_io_range_from_ioreq_server: u32 = 4;
pub const XEN_DMOP_IO_RANGE_PORT: u32 = 0;
pub const XEN_DMOP_IO_RANGE_MEMORY: u32 = 1;
pub const XEN_DMOP_IO_RANGE_PCI: u32 = 2;
pub const XEN_DMOP_set_ioreq_server_state: u32 = 5;
pub const XEN_DMOP_destroy_ioreq_server: u32 = 6;
pub const XEN_DMOP_track_dirty_vram: u32 = 7;
pub const XEN_DMOP_set_pci_intx_level: u32 = 8;
pub const XEN_DMOP_set_isa_irq_level: u32 = 9;
pub const XEN_DMOP_set_pci_link_route: u32 = 10;
pub const XEN_DMOP_modified_memory: u32 = 11;
pub const XEN_DMOP_set_mem_type: u32 = 12;
pub const XEN_DMOP_inject_event: u32 = 13;
pub const XEN_DMOP_EVENT_ext_int: u32 = 0;
pub const XEN_DMOP_EVENT_nmi: u32 = 2;
pub const XEN_DMOP_EVENT_hw_exc: u32 = 3;
pub const XEN_DMOP_EVENT_sw_int: u32 = 4;
pub const XEN_DMOP_EVENT_pri_sw_exc: u32 = 5;
pub const XEN_DMOP_EVENT_sw_exc: u32 = 6;
pub const XEN_DMOP_inject_msi: u32 = 14;
pub const XEN_DMOP_map_mem_type_to_ioreq_server: u32 = 15;
pub const XEN_DMOP_IOREQ_MEM_ACCESS_READ: u32 = 1;
pub const XEN_DMOP_IOREQ_MEM_ACCESS_WRITE: u32 = 2;
pub const XEN_DMOP_remote_shutdown: u32 = 16;
pub const XEN_DMOP_relocate_memory: u32 = 17;
pub const XEN_DMOP_pin_memory_cacheattr: u32 = 18;
pub const XEN_DMOP_MEM_CACHEATTR_UC: u32 = 0;
pub const XEN_DMOP_MEM_CACHEATTR_WC: u32 = 1;
pub const XEN_DMOP_MEM_CACHEATTR_WT: u32 = 4;
pub const XEN_DMOP_MEM_CACHEATTR_WP: u32 = 5;
pub const XEN_DMOP_MEM_CACHEATTR_WB: u32 = 6;
pub const XEN_DMOP_MEM_CACHEATTR_UCM: u32 = 7;
pub const XEN_DMOP_set_irq_level: u32 = 19;
pub const XEN_DMOP_nr_vcpus: u32 = 20;
pub const TRACE_EXTRA_MAX: u32 = 7;
pub const TRACE_EXTRA_SHIFT: u32 = 28;
pub const TRC_CLS_SHIFT: u32 = 16;
pub const TRC_GEN: u32 = 126976;
pub const TRC_SCHED: u32 = 192512;
pub const TRC_DOM0OP: u32 = 323584;
pub const TRC_HVM: u32 = 585728;
pub const TRC_MEM: u32 = 1110016;
pub const TRC_PV: u32 = 2158592;
pub const TRC_SHADOW: u32 = 4255744;
pub const TRC_HW: u32 = 8450048;
pub const TRC_GUEST: u32 = 134279168;
pub const TRC_ALL: u32 = 268431360;
pub const TRC_HD_CYCLE_FLAG: u32 = 2147483648;
pub const TRC_SUBCLS_SHIFT: u32 = 12;
pub const TRC_HVM_ENTRYEXIT: u32 = 528384;
pub const TRC_HVM_HANDLER: u32 = 532480;
pub const TRC_HVM_EMUL: u32 = 540672;
pub const TRC_SCHED_MIN: u32 = 135168;
pub const TRC_SCHED_CLASS: u32 = 139264;
pub const TRC_SCHED_VERBOSE: u32 = 163840;
pub const TRC_SCHED_ID_BITS: u32 = 3;
pub const TRC_SCHED_ID_SHIFT: u32 = 9;
pub const TRC_SCHED_ID_MASK: u32 = 3584;
pub const TRC_SCHED_EVT_MASK: i32 = -3585;
pub const TRC_SCHED_CSCHED: u32 = 0;
pub const TRC_SCHED_CSCHED2: u32 = 1;
pub const TRC_SCHED_ARINC653: u32 = 3;
pub const TRC_SCHED_RTDS: u32 = 4;
pub const TRC_SCHED_SNULL: u32 = 5;
pub const TRC_DOM0_DOMOPS: u32 = 266240;
pub const TRC_HW_PM: u32 = 8392704;
pub const TRC_HW_IRQ: u32 = 8396800;
pub const TRC_LOST_RECORDS: u32 = 126977;
pub const TRC_TRACE_WRAP_BUFFER: u32 = 126978;
pub const TRC_TRACE_CPU_CHANGE: u32 = 126979;
pub const TRC_SCHED_RUNSTATE_CHANGE: u32 = 135169;
pub const TRC_SCHED_CONTINUE_RUNNING: u32 = 135170;
pub const TRC_SCHED_DOM_ADD: u32 = 163841;
pub const TRC_SCHED_DOM_REM: u32 = 163842;
pub const TRC_SCHED_SLEEP: u32 = 163843;
pub const TRC_SCHED_WAKE: u32 = 163844;
pub const TRC_SCHED_YIELD: u32 = 163845;
pub const TRC_SCHED_BLOCK: u32 = 163846;
pub const TRC_SCHED_SHUTDOWN: u32 = 163847;
pub const TRC_SCHED_CTL: u32 = 163848;
pub const TRC_SCHED_ADJDOM: u32 = 163849;
pub const TRC_SCHED_SWITCH: u32 = 163850;
pub const TRC_SCHED_S_TIMER_FN: u32 = 163851;
pub const TRC_SCHED_T_TIMER_FN: u32 = 163852;
pub const TRC_SCHED_DOM_TIMER_FN: u32 = 163853;
pub const TRC_SCHED_SWITCH_INFPREV: u32 = 163854;
pub const TRC_SCHED_SWITCH_INFNEXT: u32 = 163855;
pub const TRC_SCHED_SHUTDOWN_CODE: u32 = 163856;
pub const TRC_SCHED_SWITCH_INFCONT: u32 = 163857;
pub const TRC_DOM0_DOM_ADD: u32 = 266241;
pub const TRC_DOM0_DOM_REM: u32 = 266242;
pub const TRC_MEM_PAGE_GRANT_MAP: u32 = 1110017;
pub const TRC_MEM_PAGE_GRANT_UNMAP: u32 = 1110018;
pub const TRC_MEM_PAGE_GRANT_TRANSFER: u32 = 1110019;
pub const TRC_MEM_SET_P2M_ENTRY: u32 = 1110020;
pub const TRC_MEM_DECREASE_RESERVATION: u32 = 1110021;
pub const TRC_MEM_POD_POPULATE: u32 = 1110032;
pub const TRC_MEM_POD_ZERO_RECLAIM: u32 = 1110033;
pub const TRC_MEM_POD_SUPERPAGE_SPLINTER: u32 = 1110034;
pub const TRC_PV_ENTRY: u32 = 2101248;
pub const TRC_PV_SUBCALL: u32 = 2105344;
pub const TRC_PV_HYPERCALL: u32 = 2101249;
pub const TRC_PV_TRAP: u32 = 2101251;
pub const TRC_PV_PAGE_FAULT: u32 = 2101252;
pub const TRC_PV_FORCED_INVALID_OP: u32 = 2101253;
pub const TRC_PV_EMULATE_PRIVOP: u32 = 2101254;
pub const TRC_PV_EMULATE_4GB: u32 = 2101255;
pub const TRC_PV_MATH_STATE_RESTORE: u32 = 2101256;
pub const TRC_PV_PAGING_FIXUP: u32 = 2101257;
pub const TRC_PV_GDT_LDT_MAPPING_FAULT: u32 = 2101258;
pub const TRC_PV_PTWR_EMULATION: u32 = 2101259;
pub const TRC_PV_PTWR_EMULATION_PAE: u32 = 2101260;
pub const TRC_PV_HYPERCALL_V2: u32 = 2101261;
pub const TRC_PV_HYPERCALL_SUBCALL: u32 = 2105358;
pub const TRC_PV_HYPERCALL_V2_ARG_MASK: u32 = 4293918720;
pub const TRC_SHADOW_NOT_SHADOW: u32 = 4255745;
pub const TRC_SHADOW_FAST_PROPAGATE: u32 = 4255746;
pub const TRC_SHADOW_FAST_MMIO: u32 = 4255747;
pub const TRC_SHADOW_FALSE_FAST_PATH: u32 = 4255748;
pub const TRC_SHADOW_MMIO: u32 = 4255749;
pub const TRC_SHADOW_FIXUP: u32 = 4255750;
pub const TRC_SHADOW_DOMF_DYING: u32 = 4255751;
pub const TRC_SHADOW_EMULATE: u32 = 4255752;
pub const TRC_SHADOW_EMULATE_UNSHADOW_USER: u32 = 4255753;
pub const TRC_SHADOW_EMULATE_UNSHADOW_EVTINJ: u32 = 4255754;
pub const TRC_SHADOW_EMULATE_UNSHADOW_UNHANDLED: u32 = 4255755;
pub const TRC_SHADOW_WRMAP_BF: u32 = 4255756;
pub const TRC_SHADOW_PREALLOC_UNPIN: u32 = 4255757;
pub const TRC_SHADOW_RESYNC_FULL: u32 = 4255758;
pub const TRC_SHADOW_RESYNC_ONLY: u32 = 4255759;
pub const TRC_HVM_NESTEDFLAG: u32 = 1024;
pub const TRC_HVM_VMENTRY: u32 = 528385;
pub const TRC_HVM_VMEXIT: u32 = 528386;
pub const TRC_HVM_PF_XEN: u32 = 532481;
pub const TRC_HVM_PF_INJECT: u32 = 532482;
pub const TRC_HVM_INJ_EXC: u32 = 532483;
pub const TRC_HVM_INJ_VIRQ: u32 = 532484;
pub const TRC_HVM_REINJ_VIRQ: u32 = 532485;
pub const TRC_HVM_IO_READ: u32 = 532486;
pub const TRC_HVM_IO_WRITE: u32 = 532487;
pub const TRC_HVM_CR_READ: u32 = 532488;
pub const TRC_HVM_CR_WRITE: u32 = 532489;
pub const TRC_HVM_DR_READ: u32 = 532490;
pub const TRC_HVM_DR_WRITE: u32 = 532491;
pub const TRC_HVM_MSR_READ: u32 = 532492;
pub const TRC_HVM_MSR_WRITE: u32 = 532493;
pub const TRC_HVM_CPUID: u32 = 532494;
pub const TRC_HVM_INTR: u32 = 532495;
pub const TRC_HVM_NMI: u32 = 532496;
pub const TRC_HVM_SMI: u32 = 532497;
pub const TRC_HVM_VMMCALL: u32 = 532498;
pub const TRC_HVM_HLT: u32 = 532499;
pub const TRC_HVM_INVLPG: u32 = 532500;
pub const TRC_HVM_MCE: u32 = 532501;
pub const TRC_HVM_IOPORT_READ: u32 = 532502;
pub const TRC_HVM_IOMEM_READ: u32 = 532503;
pub const TRC_HVM_CLTS: u32 = 532504;
pub const TRC_HVM_LMSW: u32 = 532505;
pub const TRC_HVM_RDTSC: u32 = 532506;
pub const TRC_HVM_INTR_WINDOW: u32 = 532512;
pub const TRC_HVM_NPF: u32 = 532513;
pub const TRC_HVM_REALMODE_EMULATE: u32 = 532514;
pub const TRC_HVM_TRAP: u32 = 532515;
pub const TRC_HVM_TRAP_DEBUG: u32 = 532516;
pub const TRC_HVM_VLAPIC: u32 = 532517;
pub const TRC_HVM_IOPORT_WRITE: u32 = 533014;
pub const TRC_HVM_IOMEM_WRITE: u32 = 533015;
pub const TRC_HVM_EMUL_HPET_START_TIMER: u32 = 540673;
pub const TRC_HVM_EMUL_PIT_START_TIMER: u32 = 540674;
pub const TRC_HVM_EMUL_RTC_START_TIMER: u32 = 540675;
pub const TRC_HVM_EMUL_LAPIC_START_TIMER: u32 = 540676;
pub const TRC_HVM_EMUL_HPET_STOP_TIMER: u32 = 540677;
pub const TRC_HVM_EMUL_PIT_STOP_TIMER: u32 = 540678;
pub const TRC_HVM_EMUL_RTC_STOP_TIMER: u32 = 540679;
pub const TRC_HVM_EMUL_LAPIC_STOP_TIMER: u32 = 540680;
pub const TRC_HVM_EMUL_PIT_TIMER_CB: u32 = 540681;
pub const TRC_HVM_EMUL_LAPIC_TIMER_CB: u32 = 540682;
pub const TRC_HVM_EMUL_PIC_INT_OUTPUT: u32 = 540683;
pub const TRC_HVM_EMUL_PIC_KICK: u32 = 540684;
pub const TRC_HVM_EMUL_PIC_INTACK: u32 = 540685;
pub const TRC_HVM_EMUL_PIC_POSEDGE: u32 = 540686;
pub const TRC_HVM_EMUL_PIC_NEGEDGE: u32 = 540687;
pub const TRC_HVM_EMUL_PIC_PEND_IRQ_CALL: u32 = 540688;
pub const TRC_HVM_EMUL_LAPIC_PIC_INTR: u32 = 540689;
pub const TRC_PM_FREQ_CHANGE: u32 = 8392705;
pub const TRC_PM_IDLE_ENTRY: u32 = 8392706;
pub const TRC_PM_IDLE_EXIT: u32 = 8392707;
pub const TRC_HW_IRQ_MOVE_CLEANUP_DELAY: u32 = 8396801;
pub const TRC_HW_IRQ_MOVE_CLEANUP: u32 = 8396802;
pub const TRC_HW_IRQ_BIND_VECTOR: u32 = 8396803;
pub const TRC_HW_IRQ_CLEAR_VECTOR: u32 = 8396804;
pub const TRC_HW_IRQ_MOVE_FINISH: u32 = 8396805;
pub const TRC_HW_IRQ_ASSIGN_VECTOR: u32 = 8396806;
pub const TRC_HW_IRQ_UNMAPPED_VECTOR: u32 = 8396807;
pub const TRC_HW_IRQ_HANDLED: u32 = 8396808;
pub const TRC_64_FLAG: u32 = 256;
pub const HVMOP_set_param: u32 = 0;
pub const HVMOP_get_param: u32 = 1;
pub const HVMOP_flush_tlbs: u32 = 5;
pub const HVMOP_pagetable_dying: u32 = 9;
pub const HVMOP_get_time: u32 = 10;
pub const HVMOP_xentrace: u32 = 11;
pub const HVMOP_set_mem_access: u32 = 12;
pub const HVMOP_get_mem_access: u32 = 13;
pub const HVMOP_get_mem_type: u32 = 15;
pub const HVM_IOREQSRV_BUFIOREQ_OFF: u32 = 0;
pub const HVM_IOREQSRV_BUFIOREQ_LEGACY: u32 = 1;
pub const HVM_IOREQSRV_BUFIOREQ_ATOMIC: u32 = 2;
pub const HVMOP_guest_request_vm_event: u32 = 24;
pub const HVMOP_altp2m: u32 = 25;
pub const HVMOP_ALTP2M_INTERFACE_VERSION: u32 = 1;
pub const HVMOP_altp2m_get_domain_state: u32 = 1;
pub const HVMOP_altp2m_set_domain_state: u32 = 2;
pub const HVMOP_altp2m_vcpu_enable_notify: u32 = 3;
pub const HVMOP_altp2m_create_p2m: u32 = 4;
pub const HVMOP_altp2m_destroy_p2m: u32 = 5;
pub const HVMOP_altp2m_switch_p2m: u32 = 6;
pub const HVMOP_altp2m_set_mem_access: u32 = 7;
pub const HVMOP_altp2m_change_gfn: u32 = 8;
pub const HVMOP_altp2m_set_mem_access_multi: u32 = 9;
pub const HVMOP_altp2m_set_suppress_ve: u32 = 10;
pub const HVMOP_altp2m_get_suppress_ve: u32 = 11;
pub const HVMOP_altp2m_get_mem_access: u32 = 12;
pub const HVMOP_altp2m_vcpu_disable_notify: u32 = 13;
pub const HVMOP_altp2m_get_p2m_idx: u32 = 14;
pub const HVMOP_altp2m_set_suppress_ve_multi: u32 = 15;
pub const HVMOP_altp2m_set_visibility: u32 = 16;
pub const HVM_PARAM_PAE_ENABLED: u32 = 4;
pub const HVM_PARAM_DM_DOMAIN: u32 = 13;
pub const HVM_PARAM_MEMORY_EVENT_CR0: u32 = 20;
pub const HVM_PARAM_MEMORY_EVENT_CR3: u32 = 21;
pub const HVM_PARAM_MEMORY_EVENT_CR4: u32 = 22;
pub const HVM_PARAM_MEMORY_EVENT_INT3: u32 = 23;
pub const HVM_PARAM_NESTEDHVM: u32 = 24;
pub const HVM_PARAM_MEMORY_EVENT_SINGLE_STEP: u32 = 25;
pub const HVM_PARAM_BUFIOREQ_EVTCHN: u32 = 26;
pub const HVM_PARAM_MEMORY_EVENT_MSR: u32 = 30;
pub const HVM_PARAM_CALLBACK_IRQ: u32 = 0;
pub const HVM_PARAM_CALLBACK_TYPE_GSI: u32 = 0;
pub const HVM_PARAM_CALLBACK_TYPE_PCI_INTX: u32 = 1;
pub const HVM_PARAM_CALLBACK_TYPE_PPI: u32 = 2;
pub const HVM_PARAM_CALLBACK_TYPE_PPI_FLAG_MASK: u32 = 65280;
pub const HVM_PARAM_CALLBACK_TYPE_PPI_FLAG_LOW_LEVEL: u32 = 2;
pub const HVM_PARAM_STORE_PFN: u32 = 1;
pub const HVM_PARAM_STORE_EVTCHN: u32 = 2;
pub const HVM_PARAM_IOREQ_PFN: u32 = 5;
pub const HVM_PARAM_BUFIOREQ_PFN: u32 = 6;
pub const HVM_PARAM_TIMER_MODE: u32 = 10;
pub const HVMPTM_delay_for_missed_ticks: u32 = 0;
pub const HVMPTM_no_delay_for_missed_ticks: u32 = 1;
pub const HVMPTM_no_missed_ticks_pending: u32 = 2;
pub const HVMPTM_one_missed_tick_pending: u32 = 3;
pub const HVM_PARAM_HPET_ENABLED: u32 = 11;
pub const HVM_PARAM_IDENT_PT: u32 = 12;
pub const HVM_PARAM_ACPI_S_STATE: u32 = 14;
pub const HVM_PARAM_VM86_TSS: u32 = 15;
pub const HVM_PARAM_VPT_ALIGN: u32 = 16;
pub const HVM_PARAM_CONSOLE_PFN: u32 = 17;
pub const HVM_PARAM_CONSOLE_EVTCHN: u32 = 18;
pub const HVM_PARAM_ACPI_IOPORTS_LOCATION: u32 = 19;
pub const HVM_PARAM_PAGING_RING_PFN: u32 = 27;
pub const HVM_PARAM_MONITOR_RING_PFN: u32 = 28;
pub const HVM_PARAM_SHARING_RING_PFN: u32 = 29;
pub const HVM_PARAM_TRIPLE_FAULT_REASON: u32 = 31;
pub const HVM_PARAM_IOREQ_SERVER_PFN: u32 = 32;
pub const HVM_PARAM_NR_IOREQ_SERVER_PAGES: u32 = 33;
pub const HVM_PARAM_VM_GENERATION_ID_ADDR: u32 = 34;
pub const HVM_PARAM_ALTP2M: u32 = 35;
pub const XEN_ALTP2M_disabled: u32 = 0;
pub const XEN_ALTP2M_mixed: u32 = 1;
pub const XEN_ALTP2M_external: u32 = 2;
pub const XEN_ALTP2M_limited: u32 = 3;
pub const HVM_PARAM_X87_FIP_WIDTH: u32 = 36;
pub const HVM_PARAM_VM86_TSS_SIZED: u32 = 37;
pub const HVM_PARAM_MCA_CAP: u32 = 38;
pub const HVM_NR_PARAMS: u32 = 39;
pub const XEN_FLASK_INTERFACE_VERSION: u32 = 1;
pub const FLASK_LOAD: u32 = 1;
pub const FLASK_GETENFORCE: u32 = 2;
pub const FLASK_SETENFORCE: u32 = 3;
pub const FLASK_CONTEXT_TO_SID: u32 = 4;
pub const FLASK_SID_TO_CONTEXT: u32 = 5;
pub const FLASK_ACCESS: u32 = 6;
pub const FLASK_CREATE: u32 = 7;
pub const FLASK_RELABEL: u32 = 8;
pub const FLASK_USER: u32 = 9;
pub const FLASK_POLICYVERS: u32 = 10;
pub const FLASK_GETBOOL: u32 = 11;
pub const FLASK_SETBOOL: u32 = 12;
pub const FLASK_COMMITBOOLS: u32 = 13;
pub const FLASK_MLS: u32 = 14;
pub const FLASK_DISABLE: u32 = 15;
pub const FLASK_GETAVC_THRESHOLD: u32 = 16;
pub const FLASK_SETAVC_THRESHOLD: u32 = 17;
pub const FLASK_AVC_HASHSTATS: u32 = 18;
pub const FLASK_AVC_CACHESTATS: u32 = 19;
pub const FLASK_MEMBER: u32 = 20;
pub const FLASK_ADD_OCONTEXT: u32 = 21;
pub const FLASK_DEL_OCONTEXT: u32 = 22;
pub const FLASK_GET_PEER_SID: u32 = 23;
pub const FLASK_RELABEL_DOMAIN: u32 = 24;
pub const FLASK_DEVICETREE_LABEL: u32 = 25;
pub const KEXEC_TYPE_DEFAULT: u32 = 0;
pub const KEXEC_TYPE_CRASH: u32 = 1;
pub const KEXEC_CMD_kexec: u32 = 0;
pub const KEXEC_CMD_kexec_load_v1: u32 = 1;
pub const KEXEC_CMD_kexec_unload_v1: u32 = 2;
pub const KEXEC_RANGE_MA_CRASH: u32 = 0;
pub const KEXEC_RANGE_MA_XEN: u32 = 1;
pub const KEXEC_RANGE_MA_CPU: u32 = 2;
pub const KEXEC_RANGE_MA_XENHEAP: u32 = 3;
pub const KEXEC_RANGE_MA_BOOT_PARAM: u32 = 4;
pub const KEXEC_RANGE_MA_EFI_MEMMAP: u32 = 5;
pub const KEXEC_RANGE_MA_VMCOREINFO: u32 = 6;
pub const KEXEC_CMD_kexec_get_range: u32 = 3;
pub const KEXEC_CMD_kexec_load: u32 = 4;
pub const KEXEC_CMD_kexec_unload: u32 = 5;
pub const KEXEC_CMD_kexec_status: u32 = 6;
pub const XENPF_INTERFACE_VERSION: u32 = 50331649;
pub const XENPF_settime32: u32 = 17;
pub const XENPF_settime64: u32 = 62;
pub const XENPF_settime: u32 = 62;
pub const XENPF_add_memtype: u32 = 31;
pub const XENPF_del_memtype: u32 = 32;
pub const XENPF_read_memtype: u32 = 33;
pub const XENPF_microcode_update: u32 = 35;
pub const XENPF_platform_quirk: u32 = 39;
pub const QUIRK_NOIRQBALANCING: u32 = 1;
pub const QUIRK_IOAPIC_BAD_REGSEL: u32 = 2;
pub const QUIRK_IOAPIC_GOOD_REGSEL: u32 = 3;
pub const XENPF_efi_runtime_call: u32 = 49;
pub const XEN_EFI_get_time: u32 = 1;
pub const XEN_EFI_set_time: u32 = 2;
pub const XEN_EFI_get_wakeup_time: u32 = 3;
pub const XEN_EFI_set_wakeup_time: u32 = 4;
pub const XEN_EFI_get_next_high_monotonic_count: u32 = 5;
pub const XEN_EFI_get_variable: u32 = 6;
pub const XEN_EFI_set_variable: u32 = 7;
pub const XEN_EFI_get_next_variable_name: u32 = 8;
pub const XEN_EFI_query_variable_info: u32 = 9;
pub const XEN_EFI_query_capsule_capabilities: u32 = 10;
pub const XEN_EFI_update_capsule: u32 = 11;
pub const XEN_EFI_GET_TIME_SET_CLEARS_NS: u32 = 1;
pub const XEN_EFI_GET_WAKEUP_TIME_ENABLED: u32 = 1;
pub const XEN_EFI_GET_WAKEUP_TIME_PENDING: u32 = 2;
pub const XEN_EFI_SET_WAKEUP_TIME_ENABLE: u32 = 1;
pub const XEN_EFI_SET_WAKEUP_TIME_ENABLE_ONLY: u32 = 2;
pub const XEN_EFI_VARIABLE_NON_VOLATILE: u32 = 1;
pub const XEN_EFI_VARIABLE_BOOTSERVICE_ACCESS: u32 = 2;
pub const XEN_EFI_VARIABLE_RUNTIME_ACCESS: u32 = 4;
pub const XEN_EFI_VARINFO_BOOT_SNAPSHOT: u32 = 1;
pub const XENPF_firmware_info: u32 = 50;
pub const XEN_FW_DISK_INFO: u32 = 1;
pub const XEN_FW_DISK_MBR_SIGNATURE: u32 = 2;
pub const XEN_FW_VBEDDC_INFO: u32 = 3;
pub const XEN_FW_EFI_INFO: u32 = 4;
pub const XEN_FW_EFI_VERSION: u32 = 0;
pub const XEN_FW_EFI_CONFIG_TABLE: u32 = 1;
pub const XEN_FW_EFI_VENDOR: u32 = 2;
pub const XEN_FW_EFI_MEM_INFO: u32 = 3;
pub const XEN_FW_EFI_RT_VERSION: u32 = 4;
pub const XEN_FW_EFI_PCI_ROM: u32 = 5;
pub const XEN_FW_EFI_APPLE_PROPERTIES: u32 = 6;
pub const XEN_FW_KBD_SHIFT_FLAGS: u32 = 5;
pub const XENPF_enter_acpi_sleep: u32 = 51;
pub const XENPF_ACPI_SLEEP_EXTENDED: u32 = 1;
pub const XENPF_change_freq: u32 = 52;
pub const XENPF_getidletime: u32 = 53;
pub const XENPF_set_processor_pminfo: u32 = 54;
pub const XEN_PROCESSOR_PM_CX: u32 = 1;
pub const XEN_PROCESSOR_PM_PX: u32 = 2;
pub const XEN_PROCESSOR_PM_TX: u32 = 4;
pub const XEN_PM_CX: u32 = 0;
pub const XEN_PM_PX: u32 = 1;
pub const XEN_PM_TX: u32 = 2;
pub const XEN_PM_PDC: u32 = 3;
pub const XEN_PX_PCT: u32 = 1;
pub const XEN_PX_PSS: u32 = 2;
pub const XEN_PX_PPC: u32 = 4;
pub const XEN_PX_PSD: u32 = 8;
pub const XENPF_get_cpuinfo: u32 = 55;
pub const XEN_PCPU_FLAGS_ONLINE: u32 = 1;
pub const XEN_PCPU_FLAGS_INVALID: u32 = 2;
pub const XENPF_get_cpu_version: u32 = 48;
pub const XENPF_cpu_online: u32 = 56;
pub const XENPF_cpu_offline: u32 = 57;
pub const XENPF_cpu_hotadd: u32 = 58;
pub const XENPF_mem_hotadd: u32 = 59;
pub const XENPF_core_parking: u32 = 60;
pub const XEN_CORE_PARKING_SET: u32 = 1;
pub const XEN_CORE_PARKING_GET: u32 = 2;
pub const XENPF_resource_op: u32 = 61;
pub const XEN_RESOURCE_OP_MSR_READ: u32 = 0;
pub const XEN_RESOURCE_OP_MSR_WRITE: u32 = 1;
pub const XENPF_get_symbol: u32 = 63;
pub const XTL_STDIOSTREAM_SHOW_PID: u32 = 1;
pub const XTL_STDIOSTREAM_SHOW_DATE: u32 = 2;
pub const XTL_STDIOSTREAM_HIDE_PROGRESS: u32 = 4;
pub const XTL_STDIOSTREAM_PROGRESS_USE_CR: u32 = 8;
pub const XTL_STDIOSTREAM_PROGRESS_NO_CR: u32 = 16;
pub const XC_PAGE_SHIFT: u32 = 12;
pub const XC_PAGE_SIZE: u32 = 4096;
pub const XC_PAGE_MASK: i32 = -4096;
pub const INVALID_MFN: i32 = -1;
pub const XENCTRL_HAS_XC_INTERFACE: u32 = 1;
pub const XC_CORE_MAGIC: u32 = 4027575277;
pub const XC_CORE_MAGIC_HVM: u32 = 4027575278;
pub const XC_CPUPOOL_POOLID_ANY: u32 = 4294967295;
pub const XC_MAX_ERROR_MSG_LEN: u32 = 1024;
pub const XENEVTCHN_NO_CLOEXEC: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 131072;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const CHAR_MIN: u32 = 0;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const XS_WRITE_NONE: &[u8; 5usize] = b"NONE\0";
pub const XS_WRITE_CREATE: &[u8; 7usize] = b"CREATE\0";
pub const XS_WRITE_CREATE_EXCL: &[u8; 12usize] = b"CREATE|EXCL\0";
pub const XENSTORE_RING_SIZE: u32 = 1024;
pub const XENSTORE_PAYLOAD_MAX: u32 = 4096;
pub const XENSTORE_ABS_PATH_MAX: u32 = 3072;
pub const XENSTORE_REL_PATH_MAX: u32 = 2048;
pub const XENSTORE_SERVER_FEATURE_RECONNECTION: u32 = 1;
pub const XENSTORE_CONNECTED: u32 = 0;
pub const XENSTORE_RECONNECT: u32 = 1;
pub const XS_PERM_NONE: u32 = 0;
pub const XS_PERM_READ: u32 = 1;
pub const XS_PERM_WRITE: u32 = 2;
pub const XS_PERM_ENOENT_OK: u32 = 4;
pub const XS_PERM_OWNER: u32 = 8;
pub const XS_PERM_IGNORE: u32 = 16;
pub const XBT_NULL: u32 = 0;
pub const XS_OPEN_READONLY: u32 = 1;
pub const XS_OPEN_SOCKETONLY: u32 = 2;
pub const XS_UNWATCH_FILTER: u32 = 4;
pub const IOREQ_READ: u32 = 1;
pub const IOREQ_WRITE: u32 = 0;
pub const STATE_IOREQ_NONE: u32 = 0;
pub const STATE_IOREQ_READY: u32 = 1;
pub const STATE_IOREQ_INPROCESS: u32 = 2;
pub const STATE_IORESP_READY: u32 = 3;
pub const IOREQ_TYPE_PIO: u32 = 0;
pub const IOREQ_TYPE_COPY: u32 = 1;
pub const IOREQ_TYPE_PCI_CONFIG: u32 = 2;
pub const IOREQ_TYPE_TIMEOFFSET: u32 = 7;
pub const IOREQ_TYPE_INVALIDATE: u32 = 8;
pub const IOREQ_BUFFER_SLOT_NUM: u32 = 511;
pub const ACPI_PM1A_EVT_BLK_ADDRESS_V0: u32 = 8000;
pub const ACPI_PM1A_CNT_BLK_ADDRESS_V0: u32 = 8004;
pub const ACPI_PM_TMR_BLK_ADDRESS_V0: u32 = 8008;
pub const ACPI_GPE0_BLK_ADDRESS_V0: u32 = 8040;
pub const ACPI_GPE0_BLK_LEN_V0: u32 = 8;
pub const ACPI_PM1A_EVT_BLK_ADDRESS_V1: u32 = 45056;
pub const ACPI_PM1A_CNT_BLK_ADDRESS_V1: u32 = 45060;
pub const ACPI_PM_TMR_BLK_ADDRESS_V1: u32 = 45064;
pub const ACPI_GPE0_BLK_ADDRESS_V1: u32 = 45024;
pub const ACPI_GPE0_BLK_LEN_V1: u32 = 4;
pub const ACPI_PM1A_EVT_BLK_ADDRESS: u32 = 8000;
pub const ACPI_PM1A_CNT_BLK_ADDRESS: u32 = 8004;
pub const ACPI_PM_TMR_BLK_ADDRESS: u32 = 8008;
pub const ACPI_GPE0_BLK_ADDRESS: u32 = 8040;
pub const ACPI_GPE0_BLK_LEN: u32 = 8;
pub const VIRTIO_MMIO_MAGIC_VALUE: u32 = 0;
pub const VIRTIO_MMIO_VERSION: u32 = 4;
pub const VIRTIO_MMIO_DEVICE_ID: u32 = 8;
pub const VIRTIO_MMIO_VENDOR_ID: u32 = 12;
pub const VIRTIO_MMIO_DEVICE_FEATURES: u32 = 16;
pub const VIRTIO_MMIO_DEVICE_FEATURES_SEL: u32 = 20;
pub const VIRTIO_MMIO_DRIVER_FEATURES: u32 = 32;
pub const VIRTIO_MMIO_DRIVER_FEATURES_SEL: u32 = 36;
pub const VIRTIO_MMIO_GUEST_PAGE_SIZE: u32 = 40;
pub const VIRTIO_MMIO_QUEUE_SEL: u32 = 48;
pub const VIRTIO_MMIO_QUEUE_NUM_MAX: u32 = 52;
pub const VIRTIO_MMIO_QUEUE_NUM: u32 = 56;
pub const VIRTIO_MMIO_QUEUE_ALIGN: u32 = 60;
pub const VIRTIO_MMIO_QUEUE_PFN: u32 = 64;
pub const VIRTIO_MMIO_QUEUE_READY: u32 = 68;
pub const VIRTIO_MMIO_QUEUE_NOTIFY: u32 = 80;
pub const VIRTIO_MMIO_INTERRUPT_STATUS: u32 = 96;
pub const VIRTIO_MMIO_INTERRUPT_ACK: u32 = 100;
pub const VIRTIO_MMIO_STATUS: u32 = 112;
pub const VIRTIO_MMIO_QUEUE_DESC_LOW: u32 = 128;
pub const VIRTIO_MMIO_QUEUE_DESC_HIGH: u32 = 132;
pub const VIRTIO_MMIO_QUEUE_AVAIL_LOW: u32 = 144;
pub const VIRTIO_MMIO_QUEUE_AVAIL_HIGH: u32 = 148;
pub const VIRTIO_MMIO_QUEUE_USED_LOW: u32 = 160;
pub const VIRTIO_MMIO_QUEUE_USED_HIGH: u32 = 164;
pub const VIRTIO_MMIO_SHM_SEL: u32 = 172;
pub const VIRTIO_MMIO_SHM_LEN_LOW: u32 = 176;
pub const VIRTIO_MMIO_SHM_LEN_HIGH: u32 = 180;
pub const VIRTIO_MMIO_SHM_BASE_LOW: u32 = 184;
pub const VIRTIO_MMIO_SHM_BASE_HIGH: u32 = 188;
pub const VIRTIO_MMIO_CONFIG_GENERATION: u32 = 252;
pub const VIRTIO_MMIO_CONFIG: u32 = 256;
pub const VIRTIO_MMIO_INT_VRING: u32 = 1;
pub const VIRTIO_MMIO_INT_CONFIG: u32 = 2;
pub type size_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: size_t,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_int;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type ssize_t = __ssize_t;
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type useconds_t = __useconds_t;
pub type pid_t = __pid_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(
        __buf: *mut ::std::os::raw::c_char,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int);
}
pub const _PC_LINK_MAX: ::std::os::raw::c_uint = 0;
pub const _PC_MAX_CANON: ::std::os::raw::c_uint = 1;
pub const _PC_MAX_INPUT: ::std::os::raw::c_uint = 2;
pub const _PC_NAME_MAX: ::std::os::raw::c_uint = 3;
pub const _PC_PATH_MAX: ::std::os::raw::c_uint = 4;
pub const _PC_PIPE_BUF: ::std::os::raw::c_uint = 5;
pub const _PC_CHOWN_RESTRICTED: ::std::os::raw::c_uint = 6;
pub const _PC_NO_TRUNC: ::std::os::raw::c_uint = 7;
pub const _PC_VDISABLE: ::std::os::raw::c_uint = 8;
pub const _PC_SYNC_IO: ::std::os::raw::c_uint = 9;
pub const _PC_ASYNC_IO: ::std::os::raw::c_uint = 10;
pub const _PC_PRIO_IO: ::std::os::raw::c_uint = 11;
pub const _PC_SOCK_MAXBUF: ::std::os::raw::c_uint = 12;
pub const _PC_FILESIZEBITS: ::std::os::raw::c_uint = 13;
pub const _PC_REC_INCR_XFER_SIZE: ::std::os::raw::c_uint = 14;
pub const _PC_REC_MAX_XFER_SIZE: ::std::os::raw::c_uint = 15;
pub const _PC_REC_MIN_XFER_SIZE: ::std::os::raw::c_uint = 16;
pub const _PC_REC_XFER_ALIGN: ::std::os::raw::c_uint = 17;
pub const _PC_ALLOC_SIZE_MIN: ::std::os::raw::c_uint = 18;
pub const _PC_SYMLINK_MAX: ::std::os::raw::c_uint = 19;
pub const _PC_2_SYMLINKS: ::std::os::raw::c_uint = 20;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: ::std::os::raw::c_uint = 0;
pub const _SC_CHILD_MAX: ::std::os::raw::c_uint = 1;
pub const _SC_CLK_TCK: ::std::os::raw::c_uint = 2;
pub const _SC_NGROUPS_MAX: ::std::os::raw::c_uint = 3;
pub const _SC_OPEN_MAX: ::std::os::raw::c_uint = 4;
pub const _SC_STREAM_MAX: ::std::os::raw::c_uint = 5;
pub const _SC_TZNAME_MAX: ::std::os::raw::c_uint = 6;
pub const _SC_JOB_CONTROL: ::std::os::raw::c_uint = 7;
pub const _SC_SAVED_IDS: ::std::os::raw::c_uint = 8;
pub const _SC_REALTIME_SIGNALS: ::std::os::raw::c_uint = 9;
pub const _SC_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 10;
pub const _SC_TIMERS: ::std::os::raw::c_uint = 11;
pub const _SC_ASYNCHRONOUS_IO: ::std::os::raw::c_uint = 12;
pub const _SC_PRIORITIZED_IO: ::std::os::raw::c_uint = 13;
pub const _SC_SYNCHRONIZED_IO: ::std::os::raw::c_uint = 14;
pub const _SC_FSYNC: ::std::os::raw::c_uint = 15;
pub const _SC_MAPPED_FILES: ::std::os::raw::c_uint = 16;
pub const _SC_MEMLOCK: ::std::os::raw::c_uint = 17;
pub const _SC_MEMLOCK_RANGE: ::std::os::raw::c_uint = 18;
pub const _SC_MEMORY_PROTECTION: ::std::os::raw::c_uint = 19;
pub const _SC_MESSAGE_PASSING: ::std::os::raw::c_uint = 20;
pub const _SC_SEMAPHORES: ::std::os::raw::c_uint = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 22;
pub const _SC_AIO_LISTIO_MAX: ::std::os::raw::c_uint = 23;
pub const _SC_AIO_MAX: ::std::os::raw::c_uint = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: ::std::os::raw::c_uint = 25;
pub const _SC_DELAYTIMER_MAX: ::std::os::raw::c_uint = 26;
pub const _SC_MQ_OPEN_MAX: ::std::os::raw::c_uint = 27;
pub const _SC_MQ_PRIO_MAX: ::std::os::raw::c_uint = 28;
pub const _SC_VERSION: ::std::os::raw::c_uint = 29;
pub const _SC_PAGESIZE: ::std::os::raw::c_uint = 30;
pub const _SC_RTSIG_MAX: ::std::os::raw::c_uint = 31;
pub const _SC_SEM_NSEMS_MAX: ::std::os::raw::c_uint = 32;
pub const _SC_SEM_VALUE_MAX: ::std::os::raw::c_uint = 33;
pub const _SC_SIGQUEUE_MAX: ::std::os::raw::c_uint = 34;
pub const _SC_TIMER_MAX: ::std::os::raw::c_uint = 35;
pub const _SC_BC_BASE_MAX: ::std::os::raw::c_uint = 36;
pub const _SC_BC_DIM_MAX: ::std::os::raw::c_uint = 37;
pub const _SC_BC_SCALE_MAX: ::std::os::raw::c_uint = 38;
pub const _SC_BC_STRING_MAX: ::std::os::raw::c_uint = 39;
pub const _SC_COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 40;
pub const _SC_EQUIV_CLASS_MAX: ::std::os::raw::c_uint = 41;
pub const _SC_EXPR_NEST_MAX: ::std::os::raw::c_uint = 42;
pub const _SC_LINE_MAX: ::std::os::raw::c_uint = 43;
pub const _SC_RE_DUP_MAX: ::std::os::raw::c_uint = 44;
pub const _SC_CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 45;
pub const _SC_2_VERSION: ::std::os::raw::c_uint = 46;
pub const _SC_2_C_BIND: ::std::os::raw::c_uint = 47;
pub const _SC_2_C_DEV: ::std::os::raw::c_uint = 48;
pub const _SC_2_FORT_DEV: ::std::os::raw::c_uint = 49;
pub const _SC_2_FORT_RUN: ::std::os::raw::c_uint = 50;
pub const _SC_2_SW_DEV: ::std::os::raw::c_uint = 51;
pub const _SC_2_LOCALEDEF: ::std::os::raw::c_uint = 52;
pub const _SC_PII: ::std::os::raw::c_uint = 53;
pub const _SC_PII_XTI: ::std::os::raw::c_uint = 54;
pub const _SC_PII_SOCKET: ::std::os::raw::c_uint = 55;
pub const _SC_PII_INTERNET: ::std::os::raw::c_uint = 56;
pub const _SC_PII_OSI: ::std::os::raw::c_uint = 57;
pub const _SC_POLL: ::std::os::raw::c_uint = 58;
pub const _SC_SELECT: ::std::os::raw::c_uint = 59;
pub const _SC_UIO_MAXIOV: ::std::os::raw::c_uint = 60;
pub const _SC_IOV_MAX: ::std::os::raw::c_uint = 60;
pub const _SC_PII_INTERNET_STREAM: ::std::os::raw::c_uint = 61;
pub const _SC_PII_INTERNET_DGRAM: ::std::os::raw::c_uint = 62;
pub const _SC_PII_OSI_COTS: ::std::os::raw::c_uint = 63;
pub const _SC_PII_OSI_CLTS: ::std::os::raw::c_uint = 64;
pub const _SC_PII_OSI_M: ::std::os::raw::c_uint = 65;
pub const _SC_T_IOV_MAX: ::std::os::raw::c_uint = 66;
pub const _SC_THREADS: ::std::os::raw::c_uint = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: ::std::os::raw::c_uint = 68;
pub const _SC_GETGR_R_SIZE_MAX: ::std::os::raw::c_uint = 69;
pub const _SC_GETPW_R_SIZE_MAX: ::std::os::raw::c_uint = 70;
pub const _SC_LOGIN_NAME_MAX: ::std::os::raw::c_uint = 71;
pub const _SC_TTY_NAME_MAX: ::std::os::raw::c_uint = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 73;
pub const _SC_THREAD_KEYS_MAX: ::std::os::raw::c_uint = 74;
pub const _SC_THREAD_STACK_MIN: ::std::os::raw::c_uint = 75;
pub const _SC_THREAD_THREADS_MAX: ::std::os::raw::c_uint = 76;
pub const _SC_THREAD_ATTR_STACKADDR: ::std::os::raw::c_uint = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: ::std::os::raw::c_uint = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: ::std::os::raw::c_uint = 79;
pub const _SC_THREAD_PRIO_INHERIT: ::std::os::raw::c_uint = 80;
pub const _SC_THREAD_PRIO_PROTECT: ::std::os::raw::c_uint = 81;
pub const _SC_THREAD_PROCESS_SHARED: ::std::os::raw::c_uint = 82;
pub const _SC_NPROCESSORS_CONF: ::std::os::raw::c_uint = 83;
pub const _SC_NPROCESSORS_ONLN: ::std::os::raw::c_uint = 84;
pub const _SC_PHYS_PAGES: ::std::os::raw::c_uint = 85;
pub const _SC_AVPHYS_PAGES: ::std::os::raw::c_uint = 86;
pub const _SC_ATEXIT_MAX: ::std::os::raw::c_uint = 87;
pub const _SC_PASS_MAX: ::std::os::raw::c_uint = 88;
pub const _SC_XOPEN_VERSION: ::std::os::raw::c_uint = 89;
pub const _SC_XOPEN_XCU_VERSION: ::std::os::raw::c_uint = 90;
pub const _SC_XOPEN_UNIX: ::std::os::raw::c_uint = 91;
pub const _SC_XOPEN_CRYPT: ::std::os::raw::c_uint = 92;
pub const _SC_XOPEN_ENH_I18N: ::std::os::raw::c_uint = 93;
pub const _SC_XOPEN_SHM: ::std::os::raw::c_uint = 94;
pub const _SC_2_CHAR_TERM: ::std::os::raw::c_uint = 95;
pub const _SC_2_C_VERSION: ::std::os::raw::c_uint = 96;
pub const _SC_2_UPE: ::std::os::raw::c_uint = 97;
pub const _SC_XOPEN_XPG2: ::std::os::raw::c_uint = 98;
pub const _SC_XOPEN_XPG3: ::std::os::raw::c_uint = 99;
pub const _SC_XOPEN_XPG4: ::std::os::raw::c_uint = 100;
pub const _SC_CHAR_BIT: ::std::os::raw::c_uint = 101;
pub const _SC_CHAR_MAX: ::std::os::raw::c_uint = 102;
pub const _SC_CHAR_MIN: ::std::os::raw::c_uint = 103;
pub const _SC_INT_MAX: ::std::os::raw::c_uint = 104;
pub const _SC_INT_MIN: ::std::os::raw::c_uint = 105;
pub const _SC_LONG_BIT: ::std::os::raw::c_uint = 106;
pub const _SC_WORD_BIT: ::std::os::raw::c_uint = 107;
pub const _SC_MB_LEN_MAX: ::std::os::raw::c_uint = 108;
pub const _SC_NZERO: ::std::os::raw::c_uint = 109;
pub const _SC_SSIZE_MAX: ::std::os::raw::c_uint = 110;
pub const _SC_SCHAR_MAX: ::std::os::raw::c_uint = 111;
pub const _SC_SCHAR_MIN: ::std::os::raw::c_uint = 112;
pub const _SC_SHRT_MAX: ::std::os::raw::c_uint = 113;
pub const _SC_SHRT_MIN: ::std::os::raw::c_uint = 114;
pub const _SC_UCHAR_MAX: ::std::os::raw::c_uint = 115;
pub const _SC_UINT_MAX: ::std::os::raw::c_uint = 116;
pub const _SC_ULONG_MAX: ::std::os::raw::c_uint = 117;
pub const _SC_USHRT_MAX: ::std::os::raw::c_uint = 118;
pub const _SC_NL_ARGMAX: ::std::os::raw::c_uint = 119;
pub const _SC_NL_LANGMAX: ::std::os::raw::c_uint = 120;
pub const _SC_NL_MSGMAX: ::std::os::raw::c_uint = 121;
pub const _SC_NL_NMAX: ::std::os::raw::c_uint = 122;
pub const _SC_NL_SETMAX: ::std::os::raw::c_uint = 123;
pub const _SC_NL_TEXTMAX: ::std::os::raw::c_uint = 124;
pub const _SC_XBS5_ILP32_OFF32: ::std::os::raw::c_uint = 125;
pub const _SC_XBS5_ILP32_OFFBIG: ::std::os::raw::c_uint = 126;
pub const _SC_XBS5_LP64_OFF64: ::std::os::raw::c_uint = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: ::std::os::raw::c_uint = 128;
pub const _SC_XOPEN_LEGACY: ::std::os::raw::c_uint = 129;
pub const _SC_XOPEN_REALTIME: ::std::os::raw::c_uint = 130;
pub const _SC_XOPEN_REALTIME_THREADS: ::std::os::raw::c_uint = 131;
pub const _SC_ADVISORY_INFO: ::std::os::raw::c_uint = 132;
pub const _SC_BARRIERS: ::std::os::raw::c_uint = 133;
pub const _SC_BASE: ::std::os::raw::c_uint = 134;
pub const _SC_C_LANG_SUPPORT: ::std::os::raw::c_uint = 135;
pub const _SC_C_LANG_SUPPORT_R: ::std::os::raw::c_uint = 136;
pub const _SC_CLOCK_SELECTION: ::std::os::raw::c_uint = 137;
pub const _SC_CPUTIME: ::std::os::raw::c_uint = 138;
pub const _SC_THREAD_CPUTIME: ::std::os::raw::c_uint = 139;
pub const _SC_DEVICE_IO: ::std::os::raw::c_uint = 140;
pub const _SC_DEVICE_SPECIFIC: ::std::os::raw::c_uint = 141;
pub const _SC_DEVICE_SPECIFIC_R: ::std::os::raw::c_uint = 142;
pub const _SC_FD_MGMT: ::std::os::raw::c_uint = 143;
pub const _SC_FIFO: ::std::os::raw::c_uint = 144;
pub const _SC_PIPE: ::std::os::raw::c_uint = 145;
pub const _SC_FILE_ATTRIBUTES: ::std::os::raw::c_uint = 146;
pub const _SC_FILE_LOCKING: ::std::os::raw::c_uint = 147;
pub const _SC_FILE_SYSTEM: ::std::os::raw::c_uint = 148;
pub const _SC_MONOTONIC_CLOCK: ::std::os::raw::c_uint = 149;
pub const _SC_MULTI_PROCESS: ::std::os::raw::c_uint = 150;
pub const _SC_SINGLE_PROCESS: ::std::os::raw::c_uint = 151;
pub const _SC_NETWORKING: ::std::os::raw::c_uint = 152;
pub const _SC_READER_WRITER_LOCKS: ::std::os::raw::c_uint = 153;
pub const _SC_SPIN_LOCKS: ::std::os::raw::c_uint = 154;
pub const _SC_REGEXP: ::std::os::raw::c_uint = 155;
pub const _SC_REGEX_VERSION: ::std::os::raw::c_uint = 156;
pub const _SC_SHELL: ::std::os::raw::c_uint = 157;
pub const _SC_SIGNALS: ::std::os::raw::c_uint = 158;
pub const _SC_SPAWN: ::std::os::raw::c_uint = 159;
pub const _SC_SPORADIC_SERVER: ::std::os::raw::c_uint = 160;
pub const _SC_THREAD_SPORADIC_SERVER: ::std::os::raw::c_uint = 161;
pub const _SC_SYSTEM_DATABASE: ::std::os::raw::c_uint = 162;
pub const _SC_SYSTEM_DATABASE_R: ::std::os::raw::c_uint = 163;
pub const _SC_TIMEOUTS: ::std::os::raw::c_uint = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: ::std::os::raw::c_uint = 165;
pub const _SC_USER_GROUPS: ::std::os::raw::c_uint = 166;
pub const _SC_USER_GROUPS_R: ::std::os::raw::c_uint = 167;
pub const _SC_2_PBS: ::std::os::raw::c_uint = 168;
pub const _SC_2_PBS_ACCOUNTING: ::std::os::raw::c_uint = 169;
pub const _SC_2_PBS_LOCATE: ::std::os::raw::c_uint = 170;
pub const _SC_2_PBS_MESSAGE: ::std::os::raw::c_uint = 171;
pub const _SC_2_PBS_TRACK: ::std::os::raw::c_uint = 172;
pub const _SC_SYMLOOP_MAX: ::std::os::raw::c_uint = 173;
pub const _SC_STREAMS: ::std::os::raw::c_uint = 174;
pub const _SC_2_PBS_CHECKPOINT: ::std::os::raw::c_uint = 175;
pub const _SC_V6_ILP32_OFF32: ::std::os::raw::c_uint = 176;
pub const _SC_V6_ILP32_OFFBIG: ::std::os::raw::c_uint = 177;
pub const _SC_V6_LP64_OFF64: ::std::os::raw::c_uint = 178;
pub const _SC_V6_LPBIG_OFFBIG: ::std::os::raw::c_uint = 179;
pub const _SC_HOST_NAME_MAX: ::std::os::raw::c_uint = 180;
pub const _SC_TRACE: ::std::os::raw::c_uint = 181;
pub const _SC_TRACE_EVENT_FILTER: ::std::os::raw::c_uint = 182;
pub const _SC_TRACE_INHERIT: ::std::os::raw::c_uint = 183;
pub const _SC_TRACE_LOG: ::std::os::raw::c_uint = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: ::std::os::raw::c_uint = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: ::std::os::raw::c_uint = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: ::std::os::raw::c_uint = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: ::std::os::raw::c_uint = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: ::std::os::raw::c_uint = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: ::std::os::raw::c_uint = 190;
pub const _SC_LEVEL2_CACHE_SIZE: ::std::os::raw::c_uint = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: ::std::os::raw::c_uint = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: ::std::os::raw::c_uint = 193;
pub const _SC_LEVEL3_CACHE_SIZE: ::std::os::raw::c_uint = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: ::std::os::raw::c_uint = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: ::std::os::raw::c_uint = 196;
pub const _SC_LEVEL4_CACHE_SIZE: ::std::os::raw::c_uint = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: ::std::os::raw::c_uint = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: ::std::os::raw::c_uint = 199;
pub const _SC_IPV6: ::std::os::raw::c_uint = 235;
pub const _SC_RAW_SOCKETS: ::std::os::raw::c_uint = 236;
pub const _SC_V7_ILP32_OFF32: ::std::os::raw::c_uint = 237;
pub const _SC_V7_ILP32_OFFBIG: ::std::os::raw::c_uint = 238;
pub const _SC_V7_LP64_OFF64: ::std::os::raw::c_uint = 239;
pub const _SC_V7_LPBIG_OFFBIG: ::std::os::raw::c_uint = 240;
pub const _SC_SS_REPL_MAX: ::std::os::raw::c_uint = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: ::std::os::raw::c_uint = 242;
pub const _SC_TRACE_NAME_MAX: ::std::os::raw::c_uint = 243;
pub const _SC_TRACE_SYS_MAX: ::std::os::raw::c_uint = 244;
pub const _SC_TRACE_USER_EVENT_MAX: ::std::os::raw::c_uint = 245;
pub const _SC_XOPEN_STREAMS: ::std::os::raw::c_uint = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: ::std::os::raw::c_uint = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: ::std::os::raw::c_uint = 248;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const _CS_PATH: ::std::os::raw::c_uint = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 1;
pub const _CS_GNU_LIBC_VERSION: ::std::os::raw::c_uint = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: ::std::os::raw::c_uint = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: ::std::os::raw::c_uint = 5;
pub const _CS_LFS_CFLAGS: ::std::os::raw::c_uint = 1000;
pub const _CS_LFS_LDFLAGS: ::std::os::raw::c_uint = 1001;
pub const _CS_LFS_LIBS: ::std::os::raw::c_uint = 1002;
pub const _CS_LFS_LINTFLAGS: ::std::os::raw::c_uint = 1003;
pub const _CS_LFS64_CFLAGS: ::std::os::raw::c_uint = 1004;
pub const _CS_LFS64_LDFLAGS: ::std::os::raw::c_uint = 1005;
pub const _CS_LFS64_LIBS: ::std::os::raw::c_uint = 1006;
pub const _CS_LFS64_LINTFLAGS: ::std::os::raw::c_uint = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: ::std::os::raw::c_uint = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: ::std::os::raw::c_uint = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: ::std::os::raw::c_uint = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: ::std::os::raw::c_uint = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: ::std::os::raw::c_uint = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: ::std::os::raw::c_uint = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: ::std::os::raw::c_uint = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: ::std::os::raw::c_uint = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: ::std::os::raw::c_uint = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: ::std::os::raw::c_uint = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: ::std::os::raw::c_uint = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: ::std::os::raw::c_uint = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: ::std::os::raw::c_uint = 1147;
pub const _CS_V6_ENV: ::std::os::raw::c_uint = 1148;
pub const _CS_V7_ENV: ::std::os::raw::c_uint = 1149;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: size_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: size_t,
        __offset: size_t,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: size_t,
    ) -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type va_list = [u64; 4usize];
pub type __gnuc_va_list = [u64; 4usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: __gnuc_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: [u64; 4usize],
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type xen_pfn_t = u64;
pub type xen_ulong_t = u64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vcpu_guest_core_regs {
    pub __bindgen_anon_1: vcpu_guest_core_regs__bindgen_ty_1,
    pub __bindgen_anon_2: vcpu_guest_core_regs__bindgen_ty_2,
    pub __bindgen_anon_3: vcpu_guest_core_regs__bindgen_ty_3,
    pub __bindgen_anon_4: vcpu_guest_core_regs__bindgen_ty_4,
    pub __bindgen_anon_5: vcpu_guest_core_regs__bindgen_ty_5,
    pub __bindgen_anon_6: vcpu_guest_core_regs__bindgen_ty_6,
    pub __bindgen_anon_7: vcpu_guest_core_regs__bindgen_ty_7,
    pub __bindgen_anon_8: vcpu_guest_core_regs__bindgen_ty_8,
    pub __bindgen_anon_9: vcpu_guest_core_regs__bindgen_ty_9,
    pub __bindgen_anon_10: vcpu_guest_core_regs__bindgen_ty_10,
    pub __bindgen_anon_11: vcpu_guest_core_regs__bindgen_ty_11,
    pub __bindgen_anon_12: vcpu_guest_core_regs__bindgen_ty_12,
    pub __bindgen_anon_13: vcpu_guest_core_regs__bindgen_ty_13,
    pub __bindgen_anon_14: vcpu_guest_core_regs__bindgen_ty_14,
    pub __bindgen_anon_15: vcpu_guest_core_regs__bindgen_ty_15,
    pub __bindgen_anon_16: vcpu_guest_core_regs__bindgen_ty_16,
    pub __bindgen_anon_17: vcpu_guest_core_regs__bindgen_ty_17,
    pub __bindgen_anon_18: vcpu_guest_core_regs__bindgen_ty_18,
    pub __bindgen_anon_19: vcpu_guest_core_regs__bindgen_ty_19,
    pub __bindgen_anon_20: vcpu_guest_core_regs__bindgen_ty_20,
    pub __bindgen_anon_21: vcpu_guest_core_regs__bindgen_ty_21,
    pub __bindgen_anon_22: vcpu_guest_core_regs__bindgen_ty_22,
    pub __bindgen_anon_23: vcpu_guest_core_regs__bindgen_ty_23,
    pub __bindgen_anon_24: vcpu_guest_core_regs__bindgen_ty_24,
    pub __bindgen_anon_25: vcpu_guest_core_regs__bindgen_ty_25,
    pub __bindgen_anon_26: vcpu_guest_core_regs__bindgen_ty_26,
    pub __bindgen_anon_27: vcpu_guest_core_regs__bindgen_ty_27,
    pub __bindgen_anon_28: vcpu_guest_core_regs__bindgen_ty_28,
    pub __bindgen_anon_29: vcpu_guest_core_regs__bindgen_ty_29,
    pub __bindgen_anon_30: vcpu_guest_core_regs__bindgen_ty_30,
    pub __bindgen_anon_31: vcpu_guest_core_regs__bindgen_ty_31,
    pub __bindgen_anon_32: vcpu_guest_core_regs__bindgen_ty_32,
    pub cpsr: u64,
    pub __bindgen_anon_33: vcpu_guest_core_regs__bindgen_ty_33,
    pub spsr_fiq: u32,
    pub spsr_irq: u32,
    pub spsr_und: u32,
    pub spsr_abt: u32,
    pub sp_el0: u64,
    pub sp_el1: u64,
    pub elr_el1: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_1 {
    pub x0: u64,
    pub r0_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_1>())).x0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_1),
            "::",
            stringify!(x0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_1>())).r0_usr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_1),
            "::",
            stringify!(r0_usr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_2 {
    pub x1: u64,
    pub r1_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_2>())).x1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_2),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_2>())).r1_usr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_2),
            "::",
            stringify!(r1_usr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_3 {
    pub x2: u64,
    pub r2_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_3>())).x2 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_3),
            "::",
            stringify!(x2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_3>())).r2_usr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_3),
            "::",
            stringify!(r2_usr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_4 {
    pub x3: u64,
    pub r3_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_4>())).x3 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_4),
            "::",
            stringify!(x3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_4>())).r3_usr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_4),
            "::",
            stringify!(r3_usr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_5 {
    pub x4: u64,
    pub r4_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_5>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_5>())).x4 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_5),
            "::",
            stringify!(x4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_5>())).r4_usr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_5),
            "::",
            stringify!(r4_usr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_6 {
    pub x5: u64,
    pub r5_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_6>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_6))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_6>())).x5 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_6),
            "::",
            stringify!(x5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_6>())).r5_usr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_6),
            "::",
            stringify!(r5_usr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_7 {
    pub x6: u64,
    pub r6_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_7>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_7))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_7>())).x6 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_7),
            "::",
            stringify!(x6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_7>())).r6_usr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_7),
            "::",
            stringify!(r6_usr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_8 {
    pub x7: u64,
    pub r7_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_8() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_8>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_8))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_8>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_8>())).x7 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_8),
            "::",
            stringify!(x7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_8>())).r7_usr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_8),
            "::",
            stringify!(r7_usr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_9 {
    pub x8: u64,
    pub r8_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_9() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_9>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_9))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_9>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_9>())).x8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_9),
            "::",
            stringify!(x8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_9>())).r8_usr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_9),
            "::",
            stringify!(r8_usr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_10 {
    pub x9: u64,
    pub r9_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_10() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_10>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_10))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_10>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_10>())).x9 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_10),
            "::",
            stringify!(x9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_10>())).r9_usr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_10),
            "::",
            stringify!(r9_usr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_11 {
    pub x10: u64,
    pub r10_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_11() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_11>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_11))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_11>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_11>())).x10 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_11),
            "::",
            stringify!(x10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_11>())).r10_usr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_11),
            "::",
            stringify!(r10_usr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_12 {
    pub x11: u64,
    pub r11_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_12() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_12>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_12))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_12>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_12>())).x11 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_12),
            "::",
            stringify!(x11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_12>())).r11_usr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_12),
            "::",
            stringify!(r11_usr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_13 {
    pub x12: u64,
    pub r12_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_13() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_13>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_13))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_13>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_13>())).x12 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_13),
            "::",
            stringify!(x12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_13>())).r12_usr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_13),
            "::",
            stringify!(r12_usr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_14 {
    pub x13: u64,
    pub sp_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_14() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_14>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_14))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_14>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_14>())).x13 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_14),
            "::",
            stringify!(x13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_14>())).sp_usr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_14),
            "::",
            stringify!(sp_usr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_15 {
    pub x14: u64,
    pub lr_usr: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_15() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_15>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_15))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_15>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_15>())).x14 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_15),
            "::",
            stringify!(x14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_15>())).lr_usr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_15),
            "::",
            stringify!(lr_usr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_16 {
    pub x15: u64,
    pub __unused_sp_hyp: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_16() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_16>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_16))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_16>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_16>())).x15 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_16),
            "::",
            stringify!(x15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_16>())).__unused_sp_hyp
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_16),
            "::",
            stringify!(__unused_sp_hyp)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_17 {
    pub x16: u64,
    pub lr_irq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_17() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_17>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_17))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_17>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_17)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_17>())).x16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_17),
            "::",
            stringify!(x16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_17>())).lr_irq as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_17),
            "::",
            stringify!(lr_irq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_18 {
    pub x17: u64,
    pub sp_irq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_18() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_18>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_18))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_18>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_18)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_18>())).x17 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_18),
            "::",
            stringify!(x17)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_18>())).sp_irq as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_18),
            "::",
            stringify!(sp_irq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_19 {
    pub x18: u64,
    pub lr_svc: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_19() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_19>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_19))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_19>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_19)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_19>())).x18 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_19),
            "::",
            stringify!(x18)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_19>())).lr_svc as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_19),
            "::",
            stringify!(lr_svc)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_20 {
    pub x19: u64,
    pub sp_svc: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_20() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_20>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_20))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_20>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_20)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_20>())).x19 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_20),
            "::",
            stringify!(x19)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_20>())).sp_svc as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_20),
            "::",
            stringify!(sp_svc)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_21 {
    pub x20: u64,
    pub lr_abt: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_21() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_21>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_21))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_21>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_21)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_21>())).x20 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_21),
            "::",
            stringify!(x20)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_21>())).lr_abt as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_21),
            "::",
            stringify!(lr_abt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_22 {
    pub x21: u64,
    pub sp_abt: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_22() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_22>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_22))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_22>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_22)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_22>())).x21 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_22),
            "::",
            stringify!(x21)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_22>())).sp_abt as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_22),
            "::",
            stringify!(sp_abt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_23 {
    pub x22: u64,
    pub lr_und: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_23() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_23>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_23))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_23>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_23)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_23>())).x22 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_23),
            "::",
            stringify!(x22)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_23>())).lr_und as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_23),
            "::",
            stringify!(lr_und)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_24 {
    pub x23: u64,
    pub sp_und: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_24() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_24>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_24))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_24>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_24)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_24>())).x23 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_24),
            "::",
            stringify!(x23)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_24>())).sp_und as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_24),
            "::",
            stringify!(sp_und)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_25 {
    pub x24: u64,
    pub r8_fiq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_25() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_25>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_25))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_25>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_25)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_25>())).x24 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_25),
            "::",
            stringify!(x24)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_25>())).r8_fiq as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_25),
            "::",
            stringify!(r8_fiq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_26 {
    pub x25: u64,
    pub r9_fiq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_26() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_26>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_26))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_26>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_26)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_26>())).x25 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_26),
            "::",
            stringify!(x25)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_26>())).r9_fiq as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_26),
            "::",
            stringify!(r9_fiq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_27 {
    pub x26: u64,
    pub r10_fiq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_27() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_27>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_27))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_27>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_27)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_27>())).x26 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_27),
            "::",
            stringify!(x26)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_27>())).r10_fiq as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_27),
            "::",
            stringify!(r10_fiq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_28 {
    pub x27: u64,
    pub r11_fiq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_28() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_28>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_28))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_28>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_28)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_28>())).x27 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_28),
            "::",
            stringify!(x27)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_28>())).r11_fiq as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_28),
            "::",
            stringify!(r11_fiq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_29 {
    pub x28: u64,
    pub r12_fiq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_29() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_29>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_29))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_29>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_29)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_29>())).x28 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_29),
            "::",
            stringify!(x28)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_29>())).r12_fiq as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_29),
            "::",
            stringify!(r12_fiq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_30 {
    pub x29: u64,
    pub sp_fiq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_30() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_30>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_30))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_30>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_30)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_30>())).x29 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_30),
            "::",
            stringify!(x29)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_30>())).sp_fiq as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_30),
            "::",
            stringify!(sp_fiq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_31 {
    pub x30: u64,
    pub lr_fiq: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_31() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_31>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_31))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_31>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_31)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_31>())).x30 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_31),
            "::",
            stringify!(x30)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_31>())).lr_fiq as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_31),
            "::",
            stringify!(lr_fiq)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_32 {
    pub pc64: u64,
    pub pc32: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_32() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_32>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_32))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_32>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_32>())).pc64 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_32),
            "::",
            stringify!(pc64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_32>())).pc32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_32),
            "::",
            stringify!(pc32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_core_regs__bindgen_ty_33 {
    pub spsr_el1: u64,
    pub spsr_svc: u32,
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs__bindgen_ty_33() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs__bindgen_ty_33>(),
        8usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs__bindgen_ty_33))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs__bindgen_ty_33>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_33)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_33>())).spsr_el1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_33),
            "::",
            stringify!(spsr_el1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_guest_core_regs__bindgen_ty_33>())).spsr_svc as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs__bindgen_ty_33),
            "::",
            stringify!(spsr_svc)
        )
    );
}
#[test]
fn bindgen_test_layout_vcpu_guest_core_regs() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_core_regs>(),
        312usize,
        concat!("Size of: ", stringify!(vcpu_guest_core_regs))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_core_regs>(),
        8usize,
        concat!("Alignment of ", stringify!(vcpu_guest_core_regs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_guest_core_regs>())).cpsr as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs),
            "::",
            stringify!(cpsr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_guest_core_regs>())).spsr_fiq as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs),
            "::",
            stringify!(spsr_fiq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_guest_core_regs>())).spsr_irq as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs),
            "::",
            stringify!(spsr_irq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_guest_core_regs>())).spsr_und as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs),
            "::",
            stringify!(spsr_und)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_guest_core_regs>())).spsr_abt as *const _ as usize },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs),
            "::",
            stringify!(spsr_abt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_guest_core_regs>())).sp_el0 as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs),
            "::",
            stringify!(sp_el0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_guest_core_regs>())).sp_el1 as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs),
            "::",
            stringify!(sp_el1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_guest_core_regs>())).elr_el1 as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_core_regs),
            "::",
            stringify!(elr_el1)
        )
    );
}
pub type vcpu_guest_core_regs_t = vcpu_guest_core_regs;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_vcpu_guest_core_regs_t {
    pub p: *mut vcpu_guest_core_regs_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_vcpu_guest_core_regs_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_vcpu_guest_core_regs_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_vcpu_guest_core_regs_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_vcpu_guest_core_regs_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_vcpu_guest_core_regs_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_vcpu_guest_core_regs_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_vcpu_guest_core_regs_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_vcpu_guest_core_regs_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_vcpu_guest_core_regs_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_vcpu_guest_core_regs_t {
    pub p: *mut vcpu_guest_core_regs_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_vcpu_guest_core_regs_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_vcpu_guest_core_regs_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_vcpu_guest_core_regs_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_vcpu_guest_core_regs_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_vcpu_guest_core_regs_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_vcpu_guest_core_regs_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_vcpu_guest_core_regs_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_vcpu_guest_core_regs_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_vcpu_guest_core_regs_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_vcpu_guest_core_regs_t {
    pub p: *const vcpu_guest_core_regs_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_vcpu_guest_core_regs_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_vcpu_guest_core_regs_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_vcpu_guest_core_regs_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_vcpu_guest_core_regs_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_vcpu_guest_core_regs_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_vcpu_guest_core_regs_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_vcpu_guest_core_regs_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_vcpu_guest_core_regs_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_vcpu_guest_core_regs_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_vcpu_guest_core_regs_t {
    pub p: *const vcpu_guest_core_regs_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_vcpu_guest_core_regs_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_vcpu_guest_core_regs_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_vcpu_guest_core_regs_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_vcpu_guest_core_regs_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_vcpu_guest_core_regs_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_vcpu_guest_core_regs_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_vcpu_guest_core_regs_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_vcpu_guest_core_regs_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_vcpu_guest_core_regs_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vcpu_guest_context {
    pub flags: u32,
    pub user_regs: vcpu_guest_core_regs,
    pub sctlr: u64,
    pub ttbcr: u64,
    pub ttbr0: u64,
    pub ttbr1: u64,
}
#[test]
fn bindgen_test_layout_vcpu_guest_context() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_context>(),
        352usize,
        concat!("Size of: ", stringify!(vcpu_guest_context))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_context>(),
        8usize,
        concat!("Alignment of ", stringify!(vcpu_guest_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_guest_context>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_context),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_guest_context>())).user_regs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_context),
            "::",
            stringify!(user_regs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_guest_context>())).sctlr as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_context),
            "::",
            stringify!(sctlr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_guest_context>())).ttbcr as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_context),
            "::",
            stringify!(ttbcr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_guest_context>())).ttbr0 as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_context),
            "::",
            stringify!(ttbr0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_guest_context>())).ttbr1 as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_context),
            "::",
            stringify!(ttbr1)
        )
    );
}
pub type vcpu_guest_context_t = vcpu_guest_context;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_vcpu_guest_context_t {
    pub p: *mut vcpu_guest_context_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_vcpu_guest_context_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_vcpu_guest_context_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_vcpu_guest_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_vcpu_guest_context_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_vcpu_guest_context_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_vcpu_guest_context_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_vcpu_guest_context_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_vcpu_guest_context_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_vcpu_guest_context_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_vcpu_guest_context_t {
    pub p: *mut vcpu_guest_context_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_vcpu_guest_context_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_vcpu_guest_context_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_vcpu_guest_context_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_vcpu_guest_context_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_vcpu_guest_context_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_vcpu_guest_context_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_vcpu_guest_context_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_vcpu_guest_context_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_vcpu_guest_context_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_vcpu_guest_context_t {
    pub p: *const vcpu_guest_context_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_vcpu_guest_context_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_vcpu_guest_context_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_vcpu_guest_context_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_vcpu_guest_context_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_vcpu_guest_context_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_vcpu_guest_context_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_vcpu_guest_context_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_vcpu_guest_context_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_vcpu_guest_context_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_vcpu_guest_context_t {
    pub p: *const vcpu_guest_context_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_vcpu_guest_context_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_vcpu_guest_context_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_vcpu_guest_context_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_vcpu_guest_context_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_vcpu_guest_context_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_vcpu_guest_context_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_vcpu_guest_context_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_vcpu_guest_context_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_vcpu_guest_context_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_arch_domainconfig {
    pub gic_version: u8,
    pub tee_type: u16,
    pub nr_spis: u32,
    pub clock_frequency: u32,
}
#[test]
fn bindgen_test_layout_xen_arch_domainconfig() {
    assert_eq!(
        ::std::mem::size_of::<xen_arch_domainconfig>(),
        12usize,
        concat!("Size of: ", stringify!(xen_arch_domainconfig))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_arch_domainconfig>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_arch_domainconfig))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_arch_domainconfig>())).gic_version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_arch_domainconfig),
            "::",
            stringify!(gic_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_arch_domainconfig>())).tee_type as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_arch_domainconfig),
            "::",
            stringify!(tee_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_arch_domainconfig>())).nr_spis as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_arch_domainconfig),
            "::",
            stringify!(nr_spis)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_arch_domainconfig>())).clock_frequency as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_arch_domainconfig),
            "::",
            stringify!(clock_frequency)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arch_vcpu_info {}
#[test]
fn bindgen_test_layout_arch_vcpu_info() {
    assert_eq!(
        ::std::mem::size_of::<arch_vcpu_info>(),
        0usize,
        concat!("Size of: ", stringify!(arch_vcpu_info))
    );
    assert_eq!(
        ::std::mem::align_of::<arch_vcpu_info>(),
        1usize,
        concat!("Alignment of ", stringify!(arch_vcpu_info))
    );
}
pub type arch_vcpu_info_t = arch_vcpu_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arch_shared_info {}
#[test]
fn bindgen_test_layout_arch_shared_info() {
    assert_eq!(
        ::std::mem::size_of::<arch_shared_info>(),
        0usize,
        concat!("Size of: ", stringify!(arch_shared_info))
    );
    assert_eq!(
        ::std::mem::align_of::<arch_shared_info>(),
        1usize,
        concat!("Alignment of ", stringify!(arch_shared_info))
    );
}
pub type arch_shared_info_t = arch_shared_info;
pub type xen_callback_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_pmu_arch {
    pub dummy: u8,
}
#[test]
fn bindgen_test_layout_xen_pmu_arch() {
    assert_eq!(
        ::std::mem::size_of::<xen_pmu_arch>(),
        1usize,
        concat!("Size of: ", stringify!(xen_pmu_arch))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_pmu_arch>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_pmu_arch))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_pmu_arch>())).dummy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_pmu_arch),
            "::",
            stringify!(dummy)
        )
    );
}
pub type xen_pmu_arch_t = xen_pmu_arch;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_char {
    pub p: *mut ::std::os::raw::c_char,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_char() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_char>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_char))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_char>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_char))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_char>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_char),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_char>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_char),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_char {
    pub p: *mut ::std::os::raw::c_char,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_char() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_char>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_char))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_char>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_char))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_char>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_char),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_char>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_char),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_char {
    pub p: *const ::std::os::raw::c_char,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_char() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_char>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_char))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_char>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_char))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_char>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_char),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_char>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_char),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_char {
    pub p: *const ::std::os::raw::c_char,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_char() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_char>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_char))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_char>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_char))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_const_char>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_char),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_const_char>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_char),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_uchar {
    pub p: *mut ::std::os::raw::c_uchar,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_uchar() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_uchar>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_uchar))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_uchar>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_uchar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_uchar>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_uchar),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_uchar>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_uchar),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_uchar {
    pub p: *mut ::std::os::raw::c_uchar,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_uchar() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_uchar>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_uchar))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_uchar>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_uchar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_uchar>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_uchar),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_uchar>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_uchar),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_uchar {
    pub p: *const ::std::os::raw::c_uchar,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_uchar() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_uchar>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_uchar))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_uchar>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_uchar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_uchar>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_uchar),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_uchar>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_uchar),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_uchar {
    pub p: *const ::std::os::raw::c_uchar,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_uchar() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_uchar>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_uchar))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_uchar>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_uchar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_const_uchar>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_uchar),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_const_uchar>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_uchar),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_int {
    pub p: *mut ::std::os::raw::c_int,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_int() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_int>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_int))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_int>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_int))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_int>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_int),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_int>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_int),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_int {
    pub p: *mut ::std::os::raw::c_int,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_int() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_int>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_int))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_int>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_int))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_int>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_int),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_int>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_int),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_int {
    pub p: *const ::std::os::raw::c_int,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_int() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_int>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_int))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_int>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_int))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_int>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_int),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_int>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_int),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_int {
    pub p: *const ::std::os::raw::c_int,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_int() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_int>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_int))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_int>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_int))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_const_int>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_int),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_const_int>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_int),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_uint {
    pub p: *mut ::std::os::raw::c_uint,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_uint() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_uint>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_uint))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_uint>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_uint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_uint>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_uint),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_uint>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_uint),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_uint {
    pub p: *mut ::std::os::raw::c_uint,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_uint() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_uint>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_uint))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_uint>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_uint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_uint>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_uint),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_uint>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_uint),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_uint {
    pub p: *const ::std::os::raw::c_uint,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_uint() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_uint>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_uint))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_uint>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_uint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_uint>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_uint),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_uint>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_uint),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_uint {
    pub p: *const ::std::os::raw::c_uint,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_uint() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_uint>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_uint))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_uint>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_uint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_const_uint>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_uint),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_const_uint>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_uint),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_void {
    pub p: *mut ::std::os::raw::c_void,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_void() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_void>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_void))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_void>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_void))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_void>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_void),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_void>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_void),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_void {
    pub p: *mut ::std::os::raw::c_void,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_void() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_void>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_void))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_void>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_void))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_void>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_void),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_void>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_void),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_void {
    pub p: *const ::std::os::raw::c_void,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_void() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_void>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_void))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_void>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_void))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_void>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_void),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_void>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_void),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_void {
    pub p: *const ::std::os::raw::c_void,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_void() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_void>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_void))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_void>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_void))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_const_void>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_void),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_const_void>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_void),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_uint64_t {
    pub p: *mut u64,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_uint64_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_uint64_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_uint64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_uint64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_uint64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_uint64_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_uint64_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_uint64_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_uint64_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_uint64_t {
    pub p: *mut u64,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_uint64_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_uint64_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_uint64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_uint64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_uint64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_uint64_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_uint64_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_uint64_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_uint64_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_uint64_t {
    pub p: *const u64,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_uint64_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_uint64_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_uint64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_uint64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_uint64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_uint64_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_uint64_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_uint64_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_uint64_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_uint64_t {
    pub p: *const u64,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_uint64_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_uint64_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_uint64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_uint64_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_uint64_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_uint64_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_uint64_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_uint64_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_uint64_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_pfn_t {
    pub p: *mut xen_pfn_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_pfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_pfn_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_pfn_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_pfn_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_pfn_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_xen_pfn_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_pfn_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_xen_pfn_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_pfn_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_pfn_t {
    pub p: *mut xen_pfn_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_pfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_pfn_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_pfn_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_pfn_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_xen_pfn_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_xen_pfn_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_pfn_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_xen_pfn_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_pfn_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_pfn_t {
    pub p: *const xen_pfn_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_pfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_pfn_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_xen_pfn_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_pfn_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_xen_pfn_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_pfn_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_pfn_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_pfn_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_pfn_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_pfn_t {
    pub p: *const xen_pfn_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_pfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_pfn_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_xen_pfn_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_pfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_pfn_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_pfn_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_pfn_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_pfn_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_pfn_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_ulong_t {
    pub p: *mut xen_ulong_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_ulong_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_ulong_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_ulong_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_ulong_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_ulong_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_xen_ulong_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_ulong_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_xen_ulong_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_ulong_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_ulong_t {
    pub p: *mut xen_ulong_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_ulong_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_ulong_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_ulong_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_ulong_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_xen_ulong_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_xen_ulong_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_ulong_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_xen_ulong_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_ulong_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_ulong_t {
    pub p: *const xen_ulong_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_ulong_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_ulong_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_xen_ulong_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_ulong_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_ulong_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_ulong_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_ulong_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_ulong_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_ulong_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_ulong_t {
    pub p: *const xen_ulong_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_ulong_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_ulong_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_xen_ulong_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_ulong_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_ulong_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_ulong_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_ulong_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_ulong_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_ulong_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mmuext_op {
    pub cmd: ::std::os::raw::c_uint,
    pub arg1: mmuext_op__bindgen_ty_1,
    pub arg2: mmuext_op__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmuext_op__bindgen_ty_1 {
    pub mfn: xen_pfn_t,
    pub linear_addr: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_mmuext_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mmuext_op__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(mmuext_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mmuext_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mmuext_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mmuext_op__bindgen_ty_1>())).mfn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmuext_op__bindgen_ty_1),
            "::",
            stringify!(mfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mmuext_op__bindgen_ty_1>())).linear_addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmuext_op__bindgen_ty_1),
            "::",
            stringify!(linear_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mmuext_op__bindgen_ty_2 {
    pub nr_ents: ::std::os::raw::c_uint,
    pub vcpumask: __guest_handle_64_const_void,
    pub src_mfn: xen_pfn_t,
}
#[test]
fn bindgen_test_layout_mmuext_op__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<mmuext_op__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(mmuext_op__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<mmuext_op__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(mmuext_op__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mmuext_op__bindgen_ty_2>())).nr_ents as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmuext_op__bindgen_ty_2),
            "::",
            stringify!(nr_ents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mmuext_op__bindgen_ty_2>())).vcpumask as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmuext_op__bindgen_ty_2),
            "::",
            stringify!(vcpumask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mmuext_op__bindgen_ty_2>())).src_mfn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmuext_op__bindgen_ty_2),
            "::",
            stringify!(src_mfn)
        )
    );
}
#[test]
fn bindgen_test_layout_mmuext_op() {
    assert_eq!(
        ::std::mem::size_of::<mmuext_op>(),
        24usize,
        concat!("Size of: ", stringify!(mmuext_op))
    );
    assert_eq!(
        ::std::mem::align_of::<mmuext_op>(),
        8usize,
        concat!("Alignment of ", stringify!(mmuext_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mmuext_op>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmuext_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mmuext_op>())).arg1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmuext_op),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mmuext_op>())).arg2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mmuext_op),
            "::",
            stringify!(arg2)
        )
    );
}
pub type mmuext_op_t = mmuext_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_mmuext_op_t {
    pub p: *mut mmuext_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_mmuext_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_mmuext_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_mmuext_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_mmuext_op_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_mmuext_op_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_mmuext_op_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_mmuext_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_mmuext_op_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_mmuext_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_mmuext_op_t {
    pub p: *mut mmuext_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_mmuext_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_mmuext_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_mmuext_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_mmuext_op_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_mmuext_op_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_mmuext_op_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_mmuext_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_mmuext_op_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_mmuext_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_mmuext_op_t {
    pub p: *const mmuext_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_mmuext_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_mmuext_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_mmuext_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_mmuext_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_mmuext_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_mmuext_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_mmuext_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_mmuext_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_mmuext_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_mmuext_op_t {
    pub p: *const mmuext_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_mmuext_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_mmuext_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_mmuext_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_mmuext_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_mmuext_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_mmuext_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_mmuext_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_mmuext_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_mmuext_op_t),
            "::",
            stringify!(q)
        )
    );
}
pub type domid_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mmu_update {
    pub ptr: u64,
    pub val: u64,
}
#[test]
fn bindgen_test_layout_mmu_update() {
    assert_eq!(
        ::std::mem::size_of::<mmu_update>(),
        16usize,
        concat!("Size of: ", stringify!(mmu_update))
    );
    assert_eq!(
        ::std::mem::align_of::<mmu_update>(),
        8usize,
        concat!("Alignment of ", stringify!(mmu_update))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mmu_update>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mmu_update),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mmu_update>())).val as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mmu_update),
            "::",
            stringify!(val)
        )
    );
}
pub type mmu_update_t = mmu_update;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_mmu_update_t {
    pub p: *mut mmu_update_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_mmu_update_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_mmu_update_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_mmu_update_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_mmu_update_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_mmu_update_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_mmu_update_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_mmu_update_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_mmu_update_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_mmu_update_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_mmu_update_t {
    pub p: *mut mmu_update_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_mmu_update_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_mmu_update_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_mmu_update_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_mmu_update_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_mmu_update_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_mmu_update_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_mmu_update_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_mmu_update_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_mmu_update_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_mmu_update_t {
    pub p: *const mmu_update_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_mmu_update_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_mmu_update_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_mmu_update_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_mmu_update_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_mmu_update_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_mmu_update_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_mmu_update_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_mmu_update_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_mmu_update_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_mmu_update_t {
    pub p: *const mmu_update_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_mmu_update_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_mmu_update_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_mmu_update_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_mmu_update_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_mmu_update_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_mmu_update_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_mmu_update_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_mmu_update_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_mmu_update_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multicall_entry {
    pub op: xen_ulong_t,
    pub result: xen_ulong_t,
    pub args: [xen_ulong_t; 6usize],
}
#[test]
fn bindgen_test_layout_multicall_entry() {
    assert_eq!(
        ::std::mem::size_of::<multicall_entry>(),
        64usize,
        concat!("Size of: ", stringify!(multicall_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<multicall_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(multicall_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multicall_entry>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multicall_entry),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multicall_entry>())).result as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multicall_entry),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multicall_entry>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(multicall_entry),
            "::",
            stringify!(args)
        )
    );
}
pub type multicall_entry_t = multicall_entry;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_multicall_entry_t {
    pub p: *mut multicall_entry_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_multicall_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_multicall_entry_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_multicall_entry_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_multicall_entry_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_multicall_entry_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_multicall_entry_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_multicall_entry_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_multicall_entry_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_multicall_entry_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_multicall_entry_t {
    pub p: *mut multicall_entry_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_multicall_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_multicall_entry_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_multicall_entry_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_multicall_entry_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_multicall_entry_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_multicall_entry_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_multicall_entry_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_multicall_entry_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_multicall_entry_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_multicall_entry_t {
    pub p: *const multicall_entry_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_multicall_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_multicall_entry_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_multicall_entry_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_multicall_entry_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_multicall_entry_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_multicall_entry_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_multicall_entry_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_multicall_entry_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_multicall_entry_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_multicall_entry_t {
    pub p: *const multicall_entry_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_multicall_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_multicall_entry_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_multicall_entry_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_multicall_entry_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_multicall_entry_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_multicall_entry_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_multicall_entry_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_multicall_entry_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_multicall_entry_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_time_info {
    pub version: u32,
    pub pad0: u32,
    pub tsc_timestamp: u64,
    pub system_time: u64,
    pub tsc_to_system_mul: u32,
    pub tsc_shift: i8,
    pub flags: u8,
    pub pad1: [u8; 2usize],
}
#[test]
fn bindgen_test_layout_vcpu_time_info() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_time_info>(),
        32usize,
        concat!("Size of: ", stringify!(vcpu_time_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_time_info>(),
        8usize,
        concat!("Alignment of ", stringify!(vcpu_time_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_time_info>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_time_info),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_time_info>())).pad0 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_time_info),
            "::",
            stringify!(pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_time_info>())).tsc_timestamp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_time_info),
            "::",
            stringify!(tsc_timestamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_time_info>())).system_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_time_info),
            "::",
            stringify!(system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<vcpu_time_info>())).tsc_to_system_mul as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_time_info),
            "::",
            stringify!(tsc_to_system_mul)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_time_info>())).tsc_shift as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_time_info),
            "::",
            stringify!(tsc_shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_time_info>())).flags as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_time_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_time_info>())).pad1 as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_time_info),
            "::",
            stringify!(pad1)
        )
    );
}
pub type vcpu_time_info_t = vcpu_time_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vcpu_info {
    pub evtchn_upcall_pending: u8,
    pub pad0: u8,
    pub evtchn_pending_sel: xen_ulong_t,
    pub arch: arch_vcpu_info,
    pub time: vcpu_time_info_t,
}
#[test]
fn bindgen_test_layout_vcpu_info() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_info>(),
        48usize,
        concat!("Size of: ", stringify!(vcpu_info))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_info>(),
        8usize,
        concat!("Alignment of ", stringify!(vcpu_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_info>())).evtchn_upcall_pending as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_info),
            "::",
            stringify!(evtchn_upcall_pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_info>())).pad0 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_info),
            "::",
            stringify!(pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_info>())).evtchn_pending_sel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_info),
            "::",
            stringify!(evtchn_pending_sel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_info>())).arch as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_info),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_info>())).time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_info),
            "::",
            stringify!(time)
        )
    );
}
pub type vcpu_info_t = vcpu_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_info {
    pub vcpu_info: [vcpu_info; 1usize],
    pub evtchn_pending: [xen_ulong_t; 64usize],
    pub evtchn_mask: [xen_ulong_t; 64usize],
    pub wc_version: u32,
    pub wc_sec: u32,
    pub wc_nsec: u32,
    pub wc_sec_hi: u32,
    pub arch: arch_shared_info,
}
#[test]
fn bindgen_test_layout_shared_info() {
    assert_eq!(
        ::std::mem::size_of::<shared_info>(),
        1088usize,
        concat!("Size of: ", stringify!(shared_info))
    );
    assert_eq!(
        ::std::mem::align_of::<shared_info>(),
        8usize,
        concat!("Alignment of ", stringify!(shared_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shared_info>())).vcpu_info as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(shared_info),
            "::",
            stringify!(vcpu_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shared_info>())).evtchn_pending as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(shared_info),
            "::",
            stringify!(evtchn_pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shared_info>())).evtchn_mask as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(shared_info),
            "::",
            stringify!(evtchn_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shared_info>())).wc_version as *const _ as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(shared_info),
            "::",
            stringify!(wc_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shared_info>())).wc_sec as *const _ as usize },
        1076usize,
        concat!(
            "Offset of field: ",
            stringify!(shared_info),
            "::",
            stringify!(wc_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shared_info>())).wc_nsec as *const _ as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(shared_info),
            "::",
            stringify!(wc_nsec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shared_info>())).wc_sec_hi as *const _ as usize },
        1084usize,
        concat!(
            "Offset of field: ",
            stringify!(shared_info),
            "::",
            stringify!(wc_sec_hi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shared_info>())).arch as *const _ as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(shared_info),
            "::",
            stringify!(arch)
        )
    );
}
pub type shared_info_t = shared_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_multiboot_mod_list {
    pub mod_start: u32,
    pub mod_end: u32,
    pub cmdline: u32,
    pub pad: u32,
}
#[test]
fn bindgen_test_layout_xen_multiboot_mod_list() {
    assert_eq!(
        ::std::mem::size_of::<xen_multiboot_mod_list>(),
        16usize,
        concat!("Size of: ", stringify!(xen_multiboot_mod_list))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_multiboot_mod_list>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_multiboot_mod_list))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_multiboot_mod_list>())).mod_start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_multiboot_mod_list),
            "::",
            stringify!(mod_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_multiboot_mod_list>())).mod_end as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_multiboot_mod_list),
            "::",
            stringify!(mod_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_multiboot_mod_list>())).cmdline as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_multiboot_mod_list),
            "::",
            stringify!(cmdline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_multiboot_mod_list>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_multiboot_mod_list),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dom0_vga_console_info {
    pub video_type: u8,
    pub u: dom0_vga_console_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union dom0_vga_console_info__bindgen_ty_1 {
    pub text_mode_3: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1,
    pub vesa_lfb: dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1 {
    pub font_height: u16,
    pub cursor_x: u16,
    pub cursor_y: u16,
    pub rows: u16,
    pub columns: u16,
}
#[test]
fn bindgen_test_layout_dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1>(),
        10usize,
        concat!(
            "Size of: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1>()))
                .font_height as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(font_height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1>())).cursor_x
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(cursor_x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1>())).cursor_y
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(cursor_y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1>())).rows
                as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(rows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1>())).columns
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(columns)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2 {
    pub width: u16,
    pub height: u16,
    pub bytes_per_line: u16,
    pub bits_per_pixel: u16,
    pub lfb_base: u32,
    pub lfb_size: u32,
    pub red_pos: u8,
    pub red_size: u8,
    pub green_pos: u8,
    pub green_size: u8,
    pub blue_pos: u8,
    pub blue_size: u8,
    pub rsvd_pos: u8,
    pub rsvd_size: u8,
    pub gbl_caps: u32,
    pub mode_attrs: u16,
    pub pad: u16,
    pub ext_lfb_base: u32,
}
#[test]
fn bindgen_test_layout_dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>(),
        36usize,
        concat!(
            "Size of: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>())).width
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>())).height
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>()))
                .bytes_per_line as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(bytes_per_line)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>()))
                .bits_per_pixel as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(bits_per_pixel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>())).lfb_base
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(lfb_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>())).lfb_size
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(lfb_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>())).red_pos
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(red_pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>())).red_size
                as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(red_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>())).green_pos
                as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(green_pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>())).green_size
                as *const _ as usize
        },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(green_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>())).blue_pos
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(blue_pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>())).blue_size
                as *const _ as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(blue_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>())).rsvd_pos
                as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(rsvd_pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>())).rsvd_size
                as *const _ as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(rsvd_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>())).gbl_caps
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(gbl_caps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>())).mode_attrs
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(mode_attrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>())).pad
                as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2>()))
                .ext_lfb_base as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(ext_lfb_base)
        )
    );
}
#[test]
fn bindgen_test_layout_dom0_vga_console_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<dom0_vga_console_info__bindgen_ty_1>(),
        36usize,
        concat!("Size of: ", stringify!(dom0_vga_console_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<dom0_vga_console_info__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(dom0_vga_console_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1>())).text_mode_3 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1),
            "::",
            stringify!(text_mode_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info__bindgen_ty_1>())).vesa_lfb as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info__bindgen_ty_1),
            "::",
            stringify!(vesa_lfb)
        )
    );
}
#[test]
fn bindgen_test_layout_dom0_vga_console_info() {
    assert_eq!(
        ::std::mem::size_of::<dom0_vga_console_info>(),
        40usize,
        concat!("Size of: ", stringify!(dom0_vga_console_info))
    );
    assert_eq!(
        ::std::mem::align_of::<dom0_vga_console_info>(),
        4usize,
        concat!("Alignment of ", stringify!(dom0_vga_console_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<dom0_vga_console_info>())).video_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info),
            "::",
            stringify!(video_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dom0_vga_console_info>())).u as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dom0_vga_console_info),
            "::",
            stringify!(u)
        )
    );
}
pub type dom0_vga_console_info_t = dom0_vga_console_info;
pub type xen_domain_handle_t = [u8; 16usize];
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_uint8 {
    pub p: *mut u8,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_uint8() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_uint8>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_uint8))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_uint8>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_uint8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_uint8>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_uint8),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_uint8>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_uint8),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_uint8 {
    pub p: *mut u8,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_uint8() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_uint8>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_uint8))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_uint8>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_uint8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_uint8>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_uint8),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_uint8>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_uint8),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_uint8 {
    pub p: *const u8,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_uint8() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_uint8>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_uint8))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_uint8>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_uint8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_uint8>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_uint8),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_uint8>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_uint8),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_uint8 {
    pub p: *const u8,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_uint8() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_uint8>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_uint8))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_uint8>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_uint8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_const_uint8>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_uint8),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_const_uint8>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_uint8),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_uint16 {
    pub p: *mut u16,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_uint16() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_uint16>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_uint16))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_uint16>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_uint16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_uint16>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_uint16),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_uint16>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_uint16),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_uint16 {
    pub p: *mut u16,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_uint16() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_uint16>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_uint16))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_uint16>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_uint16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_uint16>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_uint16),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_uint16>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_uint16),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_uint16 {
    pub p: *const u16,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_uint16() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_uint16>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_uint16))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_uint16>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_uint16))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_uint16>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_uint16),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_uint16>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_uint16),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_uint16 {
    pub p: *const u16,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_uint16() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_uint16>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_uint16))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_uint16>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_uint16))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_uint16>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_uint16),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_uint16>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_uint16),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_uint32 {
    pub p: *mut u32,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_uint32() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_uint32>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_uint32))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_uint32>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_uint32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_uint32>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_uint32),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_uint32>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_uint32),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_uint32 {
    pub p: *mut u32,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_uint32() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_uint32>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_uint32))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_uint32>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_uint32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_uint32>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_uint32),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_uint32>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_uint32),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_uint32 {
    pub p: *const u32,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_uint32() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_uint32>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_uint32))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_uint32>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_uint32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_uint32>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_uint32),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_uint32>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_uint32),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_uint32 {
    pub p: *const u32,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_uint32() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_uint32>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_uint32))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_uint32>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_uint32))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_uint32>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_uint32),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_uint32>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_uint32),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_uint64 {
    pub p: *mut u64,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_uint64() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_uint64>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_uint64))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_uint64>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_uint64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_uint64>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_uint64),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_uint64>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_uint64),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_uint64 {
    pub p: *mut u64,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_uint64() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_uint64>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_uint64))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_uint64>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_uint64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_uint64>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_uint64),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_uint64>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_uint64),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_uint64 {
    pub p: *const u64,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_uint64() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_uint64>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_uint64))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_uint64>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_const_uint64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_uint64>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_uint64),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_const_uint64>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_uint64),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_uint64 {
    pub p: *const u64,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_uint64() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_uint64>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_uint64))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_uint64>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_const_uint64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_uint64>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_uint64),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_uint64>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_uint64),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_uuid_t {
    pub a: [u8; 16usize],
}
#[test]
fn bindgen_test_layout_xen_uuid_t() {
    assert_eq!(
        ::std::mem::size_of::<xen_uuid_t>(),
        16usize,
        concat!("Size of: ", stringify!(xen_uuid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_uuid_t>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_uuid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_uuid_t>())).a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_uuid_t),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenctl_bitmap {
    pub bitmap: __guest_handle_64_uint8,
    pub nr_bits: u32,
}
#[test]
fn bindgen_test_layout_xenctl_bitmap() {
    assert_eq!(
        ::std::mem::size_of::<xenctl_bitmap>(),
        16usize,
        concat!("Size of: ", stringify!(xenctl_bitmap))
    );
    assert_eq!(
        ::std::mem::align_of::<xenctl_bitmap>(),
        8usize,
        concat!("Alignment of ", stringify!(xenctl_bitmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenctl_bitmap>())).bitmap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenctl_bitmap),
            "::",
            stringify!(bitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenctl_bitmap>())).nr_bits as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenctl_bitmap),
            "::",
            stringify!(nr_bits)
        )
    );
}
pub type xenctl_bitmap_t = xenctl_bitmap;
pub type evtchn_port_t = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_evtchn_port_t {
    pub p: *mut evtchn_port_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_evtchn_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_evtchn_port_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_evtchn_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_evtchn_port_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_evtchn_port_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_evtchn_port_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_evtchn_port_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_evtchn_port_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_evtchn_port_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_evtchn_port_t {
    pub p: *mut evtchn_port_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_evtchn_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_evtchn_port_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_evtchn_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_evtchn_port_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_evtchn_port_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_evtchn_port_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_evtchn_port_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_evtchn_port_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_evtchn_port_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_evtchn_port_t {
    pub p: *const evtchn_port_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_evtchn_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_evtchn_port_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_evtchn_port_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_evtchn_port_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_evtchn_port_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_evtchn_port_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_evtchn_port_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_evtchn_port_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_evtchn_port_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_evtchn_port_t {
    pub p: *const evtchn_port_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_evtchn_port_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_evtchn_port_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_evtchn_port_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_evtchn_port_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_evtchn_port_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_evtchn_port_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_evtchn_port_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_evtchn_port_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_evtchn_port_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_alloc_unbound {
    pub dom: domid_t,
    pub remote_dom: domid_t,
    pub port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_alloc_unbound() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_alloc_unbound>(),
        8usize,
        concat!("Size of: ", stringify!(evtchn_alloc_unbound))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_alloc_unbound>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_alloc_unbound))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_alloc_unbound>())).dom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_alloc_unbound),
            "::",
            stringify!(dom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_alloc_unbound>())).remote_dom as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_alloc_unbound),
            "::",
            stringify!(remote_dom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_alloc_unbound>())).port as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_alloc_unbound),
            "::",
            stringify!(port)
        )
    );
}
pub type evtchn_alloc_unbound_t = evtchn_alloc_unbound;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_bind_interdomain {
    pub remote_dom: domid_t,
    pub remote_port: evtchn_port_t,
    pub local_port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_bind_interdomain() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_bind_interdomain>(),
        12usize,
        concat!("Size of: ", stringify!(evtchn_bind_interdomain))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_bind_interdomain>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_bind_interdomain))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evtchn_bind_interdomain>())).remote_dom as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_bind_interdomain),
            "::",
            stringify!(remote_dom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evtchn_bind_interdomain>())).remote_port as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_bind_interdomain),
            "::",
            stringify!(remote_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evtchn_bind_interdomain>())).local_port as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_bind_interdomain),
            "::",
            stringify!(local_port)
        )
    );
}
pub type evtchn_bind_interdomain_t = evtchn_bind_interdomain;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_bind_virq {
    pub virq: u32,
    pub vcpu: u32,
    pub port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_bind_virq() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_bind_virq>(),
        12usize,
        concat!("Size of: ", stringify!(evtchn_bind_virq))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_bind_virq>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_bind_virq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_bind_virq>())).virq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_bind_virq),
            "::",
            stringify!(virq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_bind_virq>())).vcpu as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_bind_virq),
            "::",
            stringify!(vcpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_bind_virq>())).port as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_bind_virq),
            "::",
            stringify!(port)
        )
    );
}
pub type evtchn_bind_virq_t = evtchn_bind_virq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_bind_pirq {
    pub pirq: u32,
    pub flags: u32,
    pub port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_bind_pirq() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_bind_pirq>(),
        12usize,
        concat!("Size of: ", stringify!(evtchn_bind_pirq))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_bind_pirq>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_bind_pirq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_bind_pirq>())).pirq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_bind_pirq),
            "::",
            stringify!(pirq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_bind_pirq>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_bind_pirq),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_bind_pirq>())).port as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_bind_pirq),
            "::",
            stringify!(port)
        )
    );
}
pub type evtchn_bind_pirq_t = evtchn_bind_pirq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_bind_ipi {
    pub vcpu: u32,
    pub port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_bind_ipi() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_bind_ipi>(),
        8usize,
        concat!("Size of: ", stringify!(evtchn_bind_ipi))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_bind_ipi>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_bind_ipi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_bind_ipi>())).vcpu as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_bind_ipi),
            "::",
            stringify!(vcpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_bind_ipi>())).port as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_bind_ipi),
            "::",
            stringify!(port)
        )
    );
}
pub type evtchn_bind_ipi_t = evtchn_bind_ipi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_close {
    pub port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_close() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_close>(),
        4usize,
        concat!("Size of: ", stringify!(evtchn_close))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_close>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_close))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_close>())).port as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_close),
            "::",
            stringify!(port)
        )
    );
}
pub type evtchn_close_t = evtchn_close;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_send {
    pub port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_send() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_send>(),
        4usize,
        concat!("Size of: ", stringify!(evtchn_send))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_send>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_send))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_send>())).port as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_send),
            "::",
            stringify!(port)
        )
    );
}
pub type evtchn_send_t = evtchn_send;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct evtchn_status {
    pub dom: domid_t,
    pub port: evtchn_port_t,
    pub status: u32,
    pub vcpu: u32,
    pub u: evtchn_status__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union evtchn_status__bindgen_ty_1 {
    pub unbound: evtchn_status__bindgen_ty_1__bindgen_ty_1,
    pub interdomain: evtchn_status__bindgen_ty_1__bindgen_ty_2,
    pub pirq: u32,
    pub virq: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_status__bindgen_ty_1__bindgen_ty_1 {
    pub dom: domid_t,
}
#[test]
fn bindgen_test_layout_evtchn_status__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_status__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(evtchn_status__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_status__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(evtchn_status__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evtchn_status__bindgen_ty_1__bindgen_ty_1>())).dom as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_status__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(dom)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_status__bindgen_ty_1__bindgen_ty_2 {
    pub dom: domid_t,
    pub port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_status__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_status__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(evtchn_status__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_status__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(evtchn_status__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evtchn_status__bindgen_ty_1__bindgen_ty_2>())).dom as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_status__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(dom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evtchn_status__bindgen_ty_1__bindgen_ty_2>())).port as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_status__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(port)
        )
    );
}
#[test]
fn bindgen_test_layout_evtchn_status__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_status__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(evtchn_status__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_status__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_status__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evtchn_status__bindgen_ty_1>())).unbound as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_status__bindgen_ty_1),
            "::",
            stringify!(unbound)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evtchn_status__bindgen_ty_1>())).interdomain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_status__bindgen_ty_1),
            "::",
            stringify!(interdomain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evtchn_status__bindgen_ty_1>())).pirq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_status__bindgen_ty_1),
            "::",
            stringify!(pirq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evtchn_status__bindgen_ty_1>())).virq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_status__bindgen_ty_1),
            "::",
            stringify!(virq)
        )
    );
}
#[test]
fn bindgen_test_layout_evtchn_status() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_status>(),
        24usize,
        concat!("Size of: ", stringify!(evtchn_status))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_status>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_status))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_status>())).dom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_status),
            "::",
            stringify!(dom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_status>())).port as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_status),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_status>())).status as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_status),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_status>())).vcpu as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_status),
            "::",
            stringify!(vcpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_status>())).u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_status),
            "::",
            stringify!(u)
        )
    );
}
pub type evtchn_status_t = evtchn_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_bind_vcpu {
    pub port: evtchn_port_t,
    pub vcpu: u32,
}
#[test]
fn bindgen_test_layout_evtchn_bind_vcpu() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_bind_vcpu>(),
        8usize,
        concat!("Size of: ", stringify!(evtchn_bind_vcpu))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_bind_vcpu>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_bind_vcpu))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_bind_vcpu>())).port as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_bind_vcpu),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_bind_vcpu>())).vcpu as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_bind_vcpu),
            "::",
            stringify!(vcpu)
        )
    );
}
pub type evtchn_bind_vcpu_t = evtchn_bind_vcpu;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_unmask {
    pub port: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_evtchn_unmask() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_unmask>(),
        4usize,
        concat!("Size of: ", stringify!(evtchn_unmask))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_unmask>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_unmask))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_unmask>())).port as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_unmask),
            "::",
            stringify!(port)
        )
    );
}
pub type evtchn_unmask_t = evtchn_unmask;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_reset {
    pub dom: domid_t,
}
#[test]
fn bindgen_test_layout_evtchn_reset() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_reset>(),
        2usize,
        concat!("Size of: ", stringify!(evtchn_reset))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_reset>(),
        2usize,
        concat!("Alignment of ", stringify!(evtchn_reset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_reset>())).dom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_reset),
            "::",
            stringify!(dom)
        )
    );
}
pub type evtchn_reset_t = evtchn_reset;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_init_control {
    pub control_gfn: u64,
    pub offset: u32,
    pub vcpu: u32,
    pub link_bits: u8,
    pub _pad: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_evtchn_init_control() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_init_control>(),
        24usize,
        concat!("Size of: ", stringify!(evtchn_init_control))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_init_control>(),
        8usize,
        concat!("Alignment of ", stringify!(evtchn_init_control))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_init_control>())).control_gfn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_init_control),
            "::",
            stringify!(control_gfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_init_control>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_init_control),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_init_control>())).vcpu as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_init_control),
            "::",
            stringify!(vcpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_init_control>())).link_bits as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_init_control),
            "::",
            stringify!(link_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_init_control>()))._pad as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_init_control),
            "::",
            stringify!(_pad)
        )
    );
}
pub type evtchn_init_control_t = evtchn_init_control;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_expand_array {
    pub array_gfn: u64,
}
#[test]
fn bindgen_test_layout_evtchn_expand_array() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_expand_array>(),
        8usize,
        concat!("Size of: ", stringify!(evtchn_expand_array))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_expand_array>(),
        8usize,
        concat!("Alignment of ", stringify!(evtchn_expand_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_expand_array>())).array_gfn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_expand_array),
            "::",
            stringify!(array_gfn)
        )
    );
}
pub type evtchn_expand_array_t = evtchn_expand_array;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_set_priority {
    pub port: evtchn_port_t,
    pub priority: u32,
}
#[test]
fn bindgen_test_layout_evtchn_set_priority() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_set_priority>(),
        8usize,
        concat!("Size of: ", stringify!(evtchn_set_priority))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_set_priority>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_set_priority))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_set_priority>())).port as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_set_priority),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_set_priority>())).priority as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_set_priority),
            "::",
            stringify!(priority)
        )
    );
}
pub type evtchn_set_priority_t = evtchn_set_priority;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct evtchn_op {
    pub cmd: u32,
    pub u: evtchn_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union evtchn_op__bindgen_ty_1 {
    pub alloc_unbound: evtchn_alloc_unbound_t,
    pub bind_interdomain: evtchn_bind_interdomain_t,
    pub bind_virq: evtchn_bind_virq_t,
    pub bind_pirq: evtchn_bind_pirq_t,
    pub bind_ipi: evtchn_bind_ipi_t,
    pub close: evtchn_close_t,
    pub send: evtchn_send_t,
    pub status: evtchn_status_t,
    pub bind_vcpu: evtchn_bind_vcpu_t,
    pub unmask: evtchn_unmask_t,
}
#[test]
fn bindgen_test_layout_evtchn_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_op__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(evtchn_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_op__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evtchn_op__bindgen_ty_1>())).alloc_unbound as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_op__bindgen_ty_1),
            "::",
            stringify!(alloc_unbound)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evtchn_op__bindgen_ty_1>())).bind_interdomain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_op__bindgen_ty_1),
            "::",
            stringify!(bind_interdomain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evtchn_op__bindgen_ty_1>())).bind_virq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_op__bindgen_ty_1),
            "::",
            stringify!(bind_virq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evtchn_op__bindgen_ty_1>())).bind_pirq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_op__bindgen_ty_1),
            "::",
            stringify!(bind_pirq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evtchn_op__bindgen_ty_1>())).bind_ipi as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_op__bindgen_ty_1),
            "::",
            stringify!(bind_ipi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_op__bindgen_ty_1>())).close as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_op__bindgen_ty_1),
            "::",
            stringify!(close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_op__bindgen_ty_1>())).send as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_op__bindgen_ty_1),
            "::",
            stringify!(send)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_op__bindgen_ty_1>())).status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_op__bindgen_ty_1),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evtchn_op__bindgen_ty_1>())).bind_vcpu as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_op__bindgen_ty_1),
            "::",
            stringify!(bind_vcpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_op__bindgen_ty_1>())).unmask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_op__bindgen_ty_1),
            "::",
            stringify!(unmask)
        )
    );
}
#[test]
fn bindgen_test_layout_evtchn_op() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_op>(),
        28usize,
        concat!("Size of: ", stringify!(evtchn_op))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_op>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_op>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_op>())).u as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_op),
            "::",
            stringify!(u)
        )
    );
}
pub type evtchn_op_t = evtchn_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_evtchn_op_t {
    pub p: *mut evtchn_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_evtchn_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_evtchn_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_evtchn_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_evtchn_op_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_evtchn_op_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_evtchn_op_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_evtchn_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_evtchn_op_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_evtchn_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_evtchn_op_t {
    pub p: *mut evtchn_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_evtchn_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_evtchn_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_evtchn_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_evtchn_op_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_evtchn_op_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_evtchn_op_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_evtchn_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_evtchn_op_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_evtchn_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_evtchn_op_t {
    pub p: *const evtchn_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_evtchn_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_evtchn_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_evtchn_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_evtchn_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_evtchn_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_evtchn_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_evtchn_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_evtchn_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_evtchn_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_evtchn_op_t {
    pub p: *const evtchn_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_evtchn_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_evtchn_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_evtchn_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_evtchn_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_evtchn_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_evtchn_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_evtchn_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_evtchn_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_evtchn_op_t),
            "::",
            stringify!(q)
        )
    );
}
pub type event_word_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evtchn_fifo_control_block {
    pub ready: u32,
    pub _rsvd: u32,
    pub head: [u32; 16usize],
}
#[test]
fn bindgen_test_layout_evtchn_fifo_control_block() {
    assert_eq!(
        ::std::mem::size_of::<evtchn_fifo_control_block>(),
        72usize,
        concat!("Size of: ", stringify!(evtchn_fifo_control_block))
    );
    assert_eq!(
        ::std::mem::align_of::<evtchn_fifo_control_block>(),
        4usize,
        concat!("Alignment of ", stringify!(evtchn_fifo_control_block))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_fifo_control_block>())).ready as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_fifo_control_block),
            "::",
            stringify!(ready)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_fifo_control_block>()))._rsvd as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_fifo_control_block),
            "::",
            stringify!(_rsvd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evtchn_fifo_control_block>())).head as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(evtchn_fifo_control_block),
            "::",
            stringify!(head)
        )
    );
}
pub type evtchn_fifo_control_block_t = evtchn_fifo_control_block;
pub type grant_ref_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grant_entry_v1 {
    pub flags: u16,
    pub domid: domid_t,
    pub frame: u32,
}
#[test]
fn bindgen_test_layout_grant_entry_v1() {
    assert_eq!(
        ::std::mem::size_of::<grant_entry_v1>(),
        8usize,
        concat!("Size of: ", stringify!(grant_entry_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<grant_entry_v1>(),
        4usize,
        concat!("Alignment of ", stringify!(grant_entry_v1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grant_entry_v1>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v1),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grant_entry_v1>())).domid as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v1),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grant_entry_v1>())).frame as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v1),
            "::",
            stringify!(frame)
        )
    );
}
pub type grant_entry_v1_t = grant_entry_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grant_entry_header {
    pub flags: u16,
    pub domid: domid_t,
}
#[test]
fn bindgen_test_layout_grant_entry_header() {
    assert_eq!(
        ::std::mem::size_of::<grant_entry_header>(),
        4usize,
        concat!("Size of: ", stringify!(grant_entry_header))
    );
    assert_eq!(
        ::std::mem::align_of::<grant_entry_header>(),
        2usize,
        concat!("Alignment of ", stringify!(grant_entry_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grant_entry_header>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_header),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grant_entry_header>())).domid as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_header),
            "::",
            stringify!(domid)
        )
    );
}
pub type grant_entry_header_t = grant_entry_header;
#[repr(C)]
#[derive(Copy, Clone)]
pub union grant_entry_v2 {
    pub hdr: grant_entry_header_t,
    pub full_page: grant_entry_v2__bindgen_ty_1,
    pub sub_page: grant_entry_v2__bindgen_ty_2,
    pub transitive: grant_entry_v2__bindgen_ty_3,
    pub __spacer: [u32; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grant_entry_v2__bindgen_ty_1 {
    pub hdr: grant_entry_header_t,
    pub pad0: u32,
    pub frame: u64,
}
#[test]
fn bindgen_test_layout_grant_entry_v2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<grant_entry_v2__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(grant_entry_v2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<grant_entry_v2__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(grant_entry_v2__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<grant_entry_v2__bindgen_ty_1>())).hdr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v2__bindgen_ty_1),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<grant_entry_v2__bindgen_ty_1>())).pad0 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v2__bindgen_ty_1),
            "::",
            stringify!(pad0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<grant_entry_v2__bindgen_ty_1>())).frame as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v2__bindgen_ty_1),
            "::",
            stringify!(frame)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grant_entry_v2__bindgen_ty_2 {
    pub hdr: grant_entry_header_t,
    pub page_off: u16,
    pub length: u16,
    pub frame: u64,
}
#[test]
fn bindgen_test_layout_grant_entry_v2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<grant_entry_v2__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(grant_entry_v2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<grant_entry_v2__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(grant_entry_v2__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<grant_entry_v2__bindgen_ty_2>())).hdr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v2__bindgen_ty_2),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<grant_entry_v2__bindgen_ty_2>())).page_off as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v2__bindgen_ty_2),
            "::",
            stringify!(page_off)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<grant_entry_v2__bindgen_ty_2>())).length as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v2__bindgen_ty_2),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<grant_entry_v2__bindgen_ty_2>())).frame as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v2__bindgen_ty_2),
            "::",
            stringify!(frame)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grant_entry_v2__bindgen_ty_3 {
    pub hdr: grant_entry_header_t,
    pub trans_domid: domid_t,
    pub pad0: u16,
    pub gref: grant_ref_t,
}
#[test]
fn bindgen_test_layout_grant_entry_v2__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<grant_entry_v2__bindgen_ty_3>(),
        12usize,
        concat!("Size of: ", stringify!(grant_entry_v2__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<grant_entry_v2__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(grant_entry_v2__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<grant_entry_v2__bindgen_ty_3>())).hdr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v2__bindgen_ty_3),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<grant_entry_v2__bindgen_ty_3>())).trans_domid as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v2__bindgen_ty_3),
            "::",
            stringify!(trans_domid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<grant_entry_v2__bindgen_ty_3>())).pad0 as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v2__bindgen_ty_3),
            "::",
            stringify!(pad0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<grant_entry_v2__bindgen_ty_3>())).gref as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v2__bindgen_ty_3),
            "::",
            stringify!(gref)
        )
    );
}
#[test]
fn bindgen_test_layout_grant_entry_v2() {
    assert_eq!(
        ::std::mem::size_of::<grant_entry_v2>(),
        16usize,
        concat!("Size of: ", stringify!(grant_entry_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<grant_entry_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(grant_entry_v2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grant_entry_v2>())).hdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v2),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grant_entry_v2>())).full_page as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v2),
            "::",
            stringify!(full_page)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grant_entry_v2>())).sub_page as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v2),
            "::",
            stringify!(sub_page)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grant_entry_v2>())).transitive as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v2),
            "::",
            stringify!(transitive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grant_entry_v2>())).__spacer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grant_entry_v2),
            "::",
            stringify!(__spacer)
        )
    );
}
pub type grant_entry_v2_t = grant_entry_v2;
pub type grant_status_t = u16;
pub type grant_handle_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_map_grant_ref {
    pub host_addr: u64,
    pub flags: u32,
    pub ref_: grant_ref_t,
    pub dom: domid_t,
    pub status: i16,
    pub handle: grant_handle_t,
    pub dev_bus_addr: u64,
}
#[test]
fn bindgen_test_layout_gnttab_map_grant_ref() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_map_grant_ref>(),
        32usize,
        concat!("Size of: ", stringify!(gnttab_map_grant_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_map_grant_ref>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_map_grant_ref))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_map_grant_ref>())).host_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_map_grant_ref),
            "::",
            stringify!(host_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_map_grant_ref>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_map_grant_ref),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_map_grant_ref>())).ref_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_map_grant_ref),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_map_grant_ref>())).dom as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_map_grant_ref),
            "::",
            stringify!(dom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_map_grant_ref>())).status as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_map_grant_ref),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_map_grant_ref>())).handle as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_map_grant_ref),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gnttab_map_grant_ref>())).dev_bus_addr as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_map_grant_ref),
            "::",
            stringify!(dev_bus_addr)
        )
    );
}
pub type gnttab_map_grant_ref_t = gnttab_map_grant_ref;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_map_grant_ref_t {
    pub p: *mut gnttab_map_grant_ref_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_map_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_map_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_gnttab_map_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_map_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_map_grant_ref_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_map_grant_ref_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_map_grant_ref_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_map_grant_ref_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_map_grant_ref_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_map_grant_ref_t {
    pub p: *mut gnttab_map_grant_ref_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_map_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_map_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_map_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_map_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_map_grant_ref_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_map_grant_ref_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_map_grant_ref_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_map_grant_ref_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_map_grant_ref_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_map_grant_ref_t {
    pub p: *const gnttab_map_grant_ref_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_map_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_map_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_map_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_map_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_map_grant_ref_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_map_grant_ref_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_map_grant_ref_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_map_grant_ref_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_map_grant_ref_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_map_grant_ref_t {
    pub p: *const gnttab_map_grant_ref_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_map_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_map_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_map_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_map_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_map_grant_ref_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_map_grant_ref_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_map_grant_ref_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_map_grant_ref_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_map_grant_ref_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_unmap_grant_ref {
    pub host_addr: u64,
    pub dev_bus_addr: u64,
    pub handle: grant_handle_t,
    pub status: i16,
}
#[test]
fn bindgen_test_layout_gnttab_unmap_grant_ref() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_unmap_grant_ref>(),
        24usize,
        concat!("Size of: ", stringify!(gnttab_unmap_grant_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_unmap_grant_ref>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_unmap_grant_ref))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gnttab_unmap_grant_ref>())).host_addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_unmap_grant_ref),
            "::",
            stringify!(host_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gnttab_unmap_grant_ref>())).dev_bus_addr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_unmap_grant_ref),
            "::",
            stringify!(dev_bus_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_unmap_grant_ref>())).handle as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_unmap_grant_ref),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_unmap_grant_ref>())).status as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_unmap_grant_ref),
            "::",
            stringify!(status)
        )
    );
}
pub type gnttab_unmap_grant_ref_t = gnttab_unmap_grant_ref;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_unmap_grant_ref_t {
    pub p: *mut gnttab_unmap_grant_ref_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_unmap_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_unmap_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_gnttab_unmap_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_unmap_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_unmap_grant_ref_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_unmap_grant_ref_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_unmap_grant_ref_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_unmap_grant_ref_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_unmap_grant_ref_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_unmap_grant_ref_t {
    pub p: *mut gnttab_unmap_grant_ref_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_unmap_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_unmap_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_unmap_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_unmap_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_unmap_grant_ref_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_unmap_grant_ref_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_unmap_grant_ref_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_unmap_grant_ref_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_unmap_grant_ref_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_unmap_grant_ref_t {
    pub p: *const gnttab_unmap_grant_ref_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_unmap_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_unmap_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_unmap_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_unmap_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_unmap_grant_ref_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_unmap_grant_ref_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_unmap_grant_ref_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_unmap_grant_ref_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_unmap_grant_ref_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_unmap_grant_ref_t {
    pub p: *const gnttab_unmap_grant_ref_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_unmap_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_unmap_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_unmap_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_unmap_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_unmap_grant_ref_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_unmap_grant_ref_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_unmap_grant_ref_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_unmap_grant_ref_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_unmap_grant_ref_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gnttab_setup_table {
    pub dom: domid_t,
    pub nr_frames: u32,
    pub status: i16,
    pub frame_list: __guest_handle_64_xen_pfn_t,
}
#[test]
fn bindgen_test_layout_gnttab_setup_table() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_setup_table>(),
        24usize,
        concat!("Size of: ", stringify!(gnttab_setup_table))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_setup_table>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_setup_table))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_setup_table>())).dom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_setup_table),
            "::",
            stringify!(dom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_setup_table>())).nr_frames as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_setup_table),
            "::",
            stringify!(nr_frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_setup_table>())).status as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_setup_table),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_setup_table>())).frame_list as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_setup_table),
            "::",
            stringify!(frame_list)
        )
    );
}
pub type gnttab_setup_table_t = gnttab_setup_table;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_setup_table_t {
    pub p: *mut gnttab_setup_table_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_setup_table_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_setup_table_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_gnttab_setup_table_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_setup_table_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_setup_table_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_setup_table_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_setup_table_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_setup_table_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_setup_table_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_setup_table_t {
    pub p: *mut gnttab_setup_table_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_setup_table_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_setup_table_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_setup_table_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_setup_table_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_setup_table_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_setup_table_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_setup_table_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_setup_table_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_setup_table_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_setup_table_t {
    pub p: *const gnttab_setup_table_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_setup_table_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_setup_table_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_setup_table_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_setup_table_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_setup_table_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_setup_table_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_setup_table_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_setup_table_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_setup_table_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_setup_table_t {
    pub p: *const gnttab_setup_table_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_setup_table_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_setup_table_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_setup_table_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_setup_table_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_setup_table_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_setup_table_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_setup_table_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_setup_table_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_setup_table_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_dump_table {
    pub dom: domid_t,
    pub status: i16,
}
#[test]
fn bindgen_test_layout_gnttab_dump_table() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_dump_table>(),
        4usize,
        concat!("Size of: ", stringify!(gnttab_dump_table))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_dump_table>(),
        2usize,
        concat!("Alignment of ", stringify!(gnttab_dump_table))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_dump_table>())).dom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_dump_table),
            "::",
            stringify!(dom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_dump_table>())).status as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_dump_table),
            "::",
            stringify!(status)
        )
    );
}
pub type gnttab_dump_table_t = gnttab_dump_table;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_dump_table_t {
    pub p: *mut gnttab_dump_table_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_dump_table_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_dump_table_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_gnttab_dump_table_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_dump_table_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_dump_table_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_dump_table_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_dump_table_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_dump_table_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_dump_table_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_dump_table_t {
    pub p: *mut gnttab_dump_table_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_dump_table_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_dump_table_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_dump_table_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_dump_table_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_dump_table_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_dump_table_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_dump_table_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_dump_table_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_dump_table_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_dump_table_t {
    pub p: *const gnttab_dump_table_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_dump_table_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_dump_table_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_dump_table_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_dump_table_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_dump_table_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_dump_table_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_dump_table_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_dump_table_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_dump_table_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_dump_table_t {
    pub p: *const gnttab_dump_table_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_dump_table_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_dump_table_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_dump_table_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_dump_table_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_dump_table_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_dump_table_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_dump_table_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_dump_table_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_dump_table_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_transfer {
    pub mfn: xen_pfn_t,
    pub domid: domid_t,
    pub ref_: grant_ref_t,
    pub status: i16,
}
#[test]
fn bindgen_test_layout_gnttab_transfer() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_transfer>(),
        24usize,
        concat!("Size of: ", stringify!(gnttab_transfer))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_transfer>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_transfer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_transfer>())).mfn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_transfer),
            "::",
            stringify!(mfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_transfer>())).domid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_transfer),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_transfer>())).ref_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_transfer),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_transfer>())).status as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_transfer),
            "::",
            stringify!(status)
        )
    );
}
pub type gnttab_transfer_t = gnttab_transfer;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_transfer_t {
    pub p: *mut gnttab_transfer_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_transfer_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_transfer_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_gnttab_transfer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_transfer_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_transfer_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_transfer_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_transfer_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_transfer_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_transfer_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_transfer_t {
    pub p: *mut gnttab_transfer_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_transfer_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_transfer_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_gnttab_transfer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_transfer_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_transfer_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_transfer_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_transfer_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_transfer_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_transfer_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_transfer_t {
    pub p: *const gnttab_transfer_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_transfer_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_transfer_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_transfer_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_transfer_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_transfer_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_transfer_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_transfer_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_transfer_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_transfer_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_transfer_t {
    pub p: *const gnttab_transfer_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_transfer_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_transfer_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_transfer_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_transfer_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_transfer_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_transfer_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_transfer_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_transfer_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_transfer_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gnttab_copy {
    pub source: gnttab_copy_gnttab_copy_ptr,
    pub dest: gnttab_copy_gnttab_copy_ptr,
    pub len: u16,
    pub flags: u16,
    pub status: i16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gnttab_copy_gnttab_copy_ptr {
    pub u: gnttab_copy_gnttab_copy_ptr__bindgen_ty_1,
    pub domid: domid_t,
    pub offset: u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gnttab_copy_gnttab_copy_ptr__bindgen_ty_1 {
    pub ref_: grant_ref_t,
    pub gmfn: xen_pfn_t,
}
#[test]
fn bindgen_test_layout_gnttab_copy_gnttab_copy_ptr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_copy_gnttab_copy_ptr__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(gnttab_copy_gnttab_copy_ptr__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_copy_gnttab_copy_ptr__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(gnttab_copy_gnttab_copy_ptr__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gnttab_copy_gnttab_copy_ptr__bindgen_ty_1>())).ref_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_copy_gnttab_copy_ptr__bindgen_ty_1),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gnttab_copy_gnttab_copy_ptr__bindgen_ty_1>())).gmfn as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_copy_gnttab_copy_ptr__bindgen_ty_1),
            "::",
            stringify!(gmfn)
        )
    );
}
#[test]
fn bindgen_test_layout_gnttab_copy_gnttab_copy_ptr() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_copy_gnttab_copy_ptr>(),
        16usize,
        concat!("Size of: ", stringify!(gnttab_copy_gnttab_copy_ptr))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_copy_gnttab_copy_ptr>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_copy_gnttab_copy_ptr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_copy_gnttab_copy_ptr>())).u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_copy_gnttab_copy_ptr),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gnttab_copy_gnttab_copy_ptr>())).domid as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_copy_gnttab_copy_ptr),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gnttab_copy_gnttab_copy_ptr>())).offset as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_copy_gnttab_copy_ptr),
            "::",
            stringify!(offset)
        )
    );
}
#[test]
fn bindgen_test_layout_gnttab_copy() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_copy>(),
        40usize,
        concat!("Size of: ", stringify!(gnttab_copy))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_copy>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_copy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_copy>())).source as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_copy),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_copy>())).dest as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_copy),
            "::",
            stringify!(dest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_copy>())).len as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_copy),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_copy>())).flags as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_copy),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_copy>())).status as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_copy),
            "::",
            stringify!(status)
        )
    );
}
pub type gnttab_copy_t = gnttab_copy;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_copy_t {
    pub p: *mut gnttab_copy_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_copy_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_copy_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_gnttab_copy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_copy_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_gnttab_copy_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_gnttab_copy_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_copy_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_gnttab_copy_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_copy_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_copy_t {
    pub p: *mut gnttab_copy_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_copy_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_copy_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_gnttab_copy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_copy_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_gnttab_copy_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_copy_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_copy_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_copy_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_copy_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_copy_t {
    pub p: *const gnttab_copy_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_copy_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_copy_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_gnttab_copy_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_copy_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_copy_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_copy_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_copy_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_copy_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_copy_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_copy_t {
    pub p: *const gnttab_copy_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_copy_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_copy_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_copy_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_copy_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_copy_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_copy_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_copy_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_copy_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_copy_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_query_size {
    pub dom: domid_t,
    pub nr_frames: u32,
    pub max_nr_frames: u32,
    pub status: i16,
}
#[test]
fn bindgen_test_layout_gnttab_query_size() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_query_size>(),
        16usize,
        concat!("Size of: ", stringify!(gnttab_query_size))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_query_size>(),
        4usize,
        concat!("Alignment of ", stringify!(gnttab_query_size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_query_size>())).dom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_query_size),
            "::",
            stringify!(dom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_query_size>())).nr_frames as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_query_size),
            "::",
            stringify!(nr_frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_query_size>())).max_nr_frames as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_query_size),
            "::",
            stringify!(max_nr_frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_query_size>())).status as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_query_size),
            "::",
            stringify!(status)
        )
    );
}
pub type gnttab_query_size_t = gnttab_query_size;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_query_size_t {
    pub p: *mut gnttab_query_size_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_query_size_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_query_size_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_gnttab_query_size_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_query_size_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_query_size_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_query_size_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_query_size_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_query_size_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_query_size_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_query_size_t {
    pub p: *mut gnttab_query_size_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_query_size_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_query_size_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_query_size_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_query_size_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_query_size_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_query_size_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_query_size_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_query_size_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_query_size_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_query_size_t {
    pub p: *const gnttab_query_size_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_query_size_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_query_size_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_query_size_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_query_size_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_query_size_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_query_size_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_query_size_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_query_size_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_query_size_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_query_size_t {
    pub p: *const gnttab_query_size_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_query_size_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_query_size_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_query_size_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_query_size_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_query_size_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_query_size_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_query_size_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_query_size_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_query_size_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_unmap_and_replace {
    pub host_addr: u64,
    pub new_addr: u64,
    pub handle: grant_handle_t,
    pub status: i16,
}
#[test]
fn bindgen_test_layout_gnttab_unmap_and_replace() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_unmap_and_replace>(),
        24usize,
        concat!("Size of: ", stringify!(gnttab_unmap_and_replace))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_unmap_and_replace>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_unmap_and_replace))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gnttab_unmap_and_replace>())).host_addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_unmap_and_replace),
            "::",
            stringify!(host_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gnttab_unmap_and_replace>())).new_addr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_unmap_and_replace),
            "::",
            stringify!(new_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_unmap_and_replace>())).handle as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_unmap_and_replace),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_unmap_and_replace>())).status as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_unmap_and_replace),
            "::",
            stringify!(status)
        )
    );
}
pub type gnttab_unmap_and_replace_t = gnttab_unmap_and_replace;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_unmap_and_replace_t {
    pub p: *mut gnttab_unmap_and_replace_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_unmap_and_replace_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_unmap_and_replace_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_gnttab_unmap_and_replace_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_unmap_and_replace_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_unmap_and_replace_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_unmap_and_replace_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_unmap_and_replace_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_unmap_and_replace_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_unmap_and_replace_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_unmap_and_replace_t {
    pub p: *mut gnttab_unmap_and_replace_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_unmap_and_replace_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_unmap_and_replace_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_unmap_and_replace_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_unmap_and_replace_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_unmap_and_replace_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_unmap_and_replace_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_unmap_and_replace_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_unmap_and_replace_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_unmap_and_replace_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_unmap_and_replace_t {
    pub p: *const gnttab_unmap_and_replace_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_unmap_and_replace_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_unmap_and_replace_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_unmap_and_replace_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_unmap_and_replace_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_unmap_and_replace_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_unmap_and_replace_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_unmap_and_replace_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_unmap_and_replace_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_unmap_and_replace_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_unmap_and_replace_t {
    pub p: *const gnttab_unmap_and_replace_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_unmap_and_replace_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_unmap_and_replace_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_unmap_and_replace_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_unmap_and_replace_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_unmap_and_replace_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_unmap_and_replace_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_unmap_and_replace_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_unmap_and_replace_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_unmap_and_replace_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_set_version {
    pub version: u32,
}
#[test]
fn bindgen_test_layout_gnttab_set_version() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_set_version>(),
        4usize,
        concat!("Size of: ", stringify!(gnttab_set_version))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_set_version>(),
        4usize,
        concat!("Alignment of ", stringify!(gnttab_set_version))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_set_version>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_set_version),
            "::",
            stringify!(version)
        )
    );
}
pub type gnttab_set_version_t = gnttab_set_version;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_set_version_t {
    pub p: *mut gnttab_set_version_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_set_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_set_version_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_gnttab_set_version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_set_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_set_version_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_set_version_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_set_version_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_set_version_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_set_version_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_set_version_t {
    pub p: *mut gnttab_set_version_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_set_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_set_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_set_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_set_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_set_version_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_set_version_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_set_version_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_set_version_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_set_version_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_set_version_t {
    pub p: *const gnttab_set_version_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_set_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_set_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_set_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_set_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_set_version_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_set_version_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_set_version_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_set_version_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_set_version_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_set_version_t {
    pub p: *const gnttab_set_version_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_set_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_set_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_set_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_set_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_set_version_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_set_version_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_set_version_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_set_version_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_set_version_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gnttab_get_status_frames {
    pub nr_frames: u32,
    pub dom: domid_t,
    pub status: i16,
    pub frame_list: __guest_handle_64_uint64_t,
}
#[test]
fn bindgen_test_layout_gnttab_get_status_frames() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_get_status_frames>(),
        16usize,
        concat!("Size of: ", stringify!(gnttab_get_status_frames))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_get_status_frames>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_get_status_frames))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gnttab_get_status_frames>())).nr_frames as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_get_status_frames),
            "::",
            stringify!(nr_frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_get_status_frames>())).dom as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_get_status_frames),
            "::",
            stringify!(dom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_get_status_frames>())).status as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_get_status_frames),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gnttab_get_status_frames>())).frame_list as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_get_status_frames),
            "::",
            stringify!(frame_list)
        )
    );
}
pub type gnttab_get_status_frames_t = gnttab_get_status_frames;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_get_status_frames_t {
    pub p: *mut gnttab_get_status_frames_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_get_status_frames_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_get_status_frames_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_gnttab_get_status_frames_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_get_status_frames_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_get_status_frames_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_get_status_frames_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_get_status_frames_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_get_status_frames_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_get_status_frames_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_get_status_frames_t {
    pub p: *mut gnttab_get_status_frames_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_get_status_frames_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_get_status_frames_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_get_status_frames_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_get_status_frames_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_get_status_frames_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_get_status_frames_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_get_status_frames_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_get_status_frames_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_get_status_frames_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_get_status_frames_t {
    pub p: *const gnttab_get_status_frames_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_get_status_frames_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_get_status_frames_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_get_status_frames_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_get_status_frames_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_get_status_frames_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_get_status_frames_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_get_status_frames_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_get_status_frames_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_get_status_frames_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_get_status_frames_t {
    pub p: *const gnttab_get_status_frames_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_get_status_frames_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_get_status_frames_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_get_status_frames_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_get_status_frames_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_get_status_frames_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_get_status_frames_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_get_status_frames_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_get_status_frames_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_get_status_frames_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_get_version {
    pub dom: domid_t,
    pub pad: u16,
    pub version: u32,
}
#[test]
fn bindgen_test_layout_gnttab_get_version() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_get_version>(),
        8usize,
        concat!("Size of: ", stringify!(gnttab_get_version))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_get_version>(),
        4usize,
        concat!("Alignment of ", stringify!(gnttab_get_version))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_get_version>())).dom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_get_version),
            "::",
            stringify!(dom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_get_version>())).pad as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_get_version),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_get_version>())).version as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_get_version),
            "::",
            stringify!(version)
        )
    );
}
pub type gnttab_get_version_t = gnttab_get_version;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_get_version_t {
    pub p: *mut gnttab_get_version_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_get_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_get_version_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_gnttab_get_version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_get_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_get_version_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_get_version_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_get_version_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_get_version_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_get_version_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_get_version_t {
    pub p: *mut gnttab_get_version_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_get_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_get_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_get_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_get_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_get_version_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_get_version_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_get_version_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_get_version_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_get_version_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_get_version_t {
    pub p: *const gnttab_get_version_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_get_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_get_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_get_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_get_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_get_version_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_get_version_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_get_version_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_get_version_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_get_version_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_get_version_t {
    pub p: *const gnttab_get_version_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_get_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_get_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_get_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_get_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_get_version_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_get_version_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_get_version_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_get_version_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_get_version_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gnttab_swap_grant_ref {
    pub ref_a: grant_ref_t,
    pub ref_b: grant_ref_t,
    pub status: i16,
}
#[test]
fn bindgen_test_layout_gnttab_swap_grant_ref() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_swap_grant_ref>(),
        12usize,
        concat!("Size of: ", stringify!(gnttab_swap_grant_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_swap_grant_ref>(),
        4usize,
        concat!("Alignment of ", stringify!(gnttab_swap_grant_ref))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_swap_grant_ref>())).ref_a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_swap_grant_ref),
            "::",
            stringify!(ref_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_swap_grant_ref>())).ref_b as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_swap_grant_ref),
            "::",
            stringify!(ref_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_swap_grant_ref>())).status as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_swap_grant_ref),
            "::",
            stringify!(status)
        )
    );
}
pub type gnttab_swap_grant_ref_t = gnttab_swap_grant_ref;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_swap_grant_ref_t {
    pub p: *mut gnttab_swap_grant_ref_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_swap_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_swap_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_gnttab_swap_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_swap_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_swap_grant_ref_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_swap_grant_ref_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_swap_grant_ref_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_swap_grant_ref_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_swap_grant_ref_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_swap_grant_ref_t {
    pub p: *mut gnttab_swap_grant_ref_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_swap_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_swap_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_swap_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_swap_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_swap_grant_ref_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_swap_grant_ref_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_swap_grant_ref_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_swap_grant_ref_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_swap_grant_ref_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_swap_grant_ref_t {
    pub p: *const gnttab_swap_grant_ref_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_swap_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_swap_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_swap_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_swap_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_swap_grant_ref_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_swap_grant_ref_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_swap_grant_ref_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_swap_grant_ref_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_swap_grant_ref_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_swap_grant_ref_t {
    pub p: *const gnttab_swap_grant_ref_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_swap_grant_ref_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_swap_grant_ref_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_swap_grant_ref_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_swap_grant_ref_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_swap_grant_ref_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_swap_grant_ref_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_swap_grant_ref_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_swap_grant_ref_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_swap_grant_ref_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gnttab_cache_flush {
    pub a: gnttab_cache_flush__bindgen_ty_1,
    pub offset: u16,
    pub length: u16,
    pub op: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union gnttab_cache_flush__bindgen_ty_1 {
    pub dev_bus_addr: u64,
    pub ref_: grant_ref_t,
}
#[test]
fn bindgen_test_layout_gnttab_cache_flush__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_cache_flush__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(gnttab_cache_flush__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_cache_flush__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(gnttab_cache_flush__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gnttab_cache_flush__bindgen_ty_1>())).dev_bus_addr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_cache_flush__bindgen_ty_1),
            "::",
            stringify!(dev_bus_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<gnttab_cache_flush__bindgen_ty_1>())).ref_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_cache_flush__bindgen_ty_1),
            "::",
            stringify!(ref_)
        )
    );
}
#[test]
fn bindgen_test_layout_gnttab_cache_flush() {
    assert_eq!(
        ::std::mem::size_of::<gnttab_cache_flush>(),
        16usize,
        concat!("Size of: ", stringify!(gnttab_cache_flush))
    );
    assert_eq!(
        ::std::mem::align_of::<gnttab_cache_flush>(),
        8usize,
        concat!("Alignment of ", stringify!(gnttab_cache_flush))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_cache_flush>())).a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_cache_flush),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_cache_flush>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_cache_flush),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_cache_flush>())).length as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_cache_flush),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gnttab_cache_flush>())).op as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(gnttab_cache_flush),
            "::",
            stringify!(op)
        )
    );
}
pub type gnttab_cache_flush_t = gnttab_cache_flush;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_gnttab_cache_flush_t {
    pub p: *mut gnttab_cache_flush_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_gnttab_cache_flush_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_gnttab_cache_flush_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_gnttab_cache_flush_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_gnttab_cache_flush_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_gnttab_cache_flush_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_cache_flush_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_cache_flush_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_gnttab_cache_flush_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_gnttab_cache_flush_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_gnttab_cache_flush_t {
    pub p: *mut gnttab_cache_flush_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_gnttab_cache_flush_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_gnttab_cache_flush_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_gnttab_cache_flush_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_gnttab_cache_flush_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_gnttab_cache_flush_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_cache_flush_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_cache_flush_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_gnttab_cache_flush_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_gnttab_cache_flush_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_gnttab_cache_flush_t {
    pub p: *const gnttab_cache_flush_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_gnttab_cache_flush_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_gnttab_cache_flush_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_gnttab_cache_flush_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_gnttab_cache_flush_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_gnttab_cache_flush_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_cache_flush_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_cache_flush_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_gnttab_cache_flush_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_gnttab_cache_flush_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_gnttab_cache_flush_t {
    pub p: *const gnttab_cache_flush_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_gnttab_cache_flush_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_gnttab_cache_flush_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_gnttab_cache_flush_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_gnttab_cache_flush_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_gnttab_cache_flush_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_cache_flush_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_cache_flush_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_gnttab_cache_flush_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_gnttab_cache_flush_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_save_descriptor {
    pub typecode: u16,
    pub instance: u16,
    pub length: u32,
}
#[test]
fn bindgen_test_layout_hvm_save_descriptor() {
    assert_eq!(
        ::std::mem::size_of::<hvm_save_descriptor>(),
        8usize,
        concat!("Size of: ", stringify!(hvm_save_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<hvm_save_descriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(hvm_save_descriptor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hvm_save_descriptor>())).typecode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hvm_save_descriptor),
            "::",
            stringify!(typecode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hvm_save_descriptor>())).instance as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hvm_save_descriptor),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hvm_save_descriptor>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hvm_save_descriptor),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hvm_save_end {}
#[test]
fn bindgen_test_layout_hvm_save_end() {
    assert_eq!(
        ::std::mem::size_of::<hvm_save_end>(),
        0usize,
        concat!("Size of: ", stringify!(hvm_save_end))
    );
    assert_eq!(
        ::std::mem::align_of::<hvm_save_end>(),
        1usize,
        concat!("Alignment of ", stringify!(hvm_save_end))
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct __HVM_SAVE_TYPE_END {
    pub t: hvm_save_end,
    pub c: __IncompleteArrayField<::std::os::raw::c_char>,
    pub cpt: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout___HVM_SAVE_TYPE_END() {
    assert_eq!(
        ::std::mem::size_of::<__HVM_SAVE_TYPE_END>(),
        1usize,
        concat!("Size of: ", stringify!(__HVM_SAVE_TYPE_END))
    );
    assert_eq!(
        ::std::mem::align_of::<__HVM_SAVE_TYPE_END>(),
        1usize,
        concat!("Alignment of ", stringify!(__HVM_SAVE_TYPE_END))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__HVM_SAVE_TYPE_END>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__HVM_SAVE_TYPE_END),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__HVM_SAVE_TYPE_END>())).c as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__HVM_SAVE_TYPE_END),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__HVM_SAVE_TYPE_END>())).cpt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__HVM_SAVE_TYPE_END),
            "::",
            stringify!(cpt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_eoi {
    pub irq: u32,
}
#[test]
fn bindgen_test_layout_physdev_eoi() {
    assert_eq!(
        ::std::mem::size_of::<physdev_eoi>(),
        4usize,
        concat!("Size of: ", stringify!(physdev_eoi))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_eoi>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_eoi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_eoi>())).irq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_eoi),
            "::",
            stringify!(irq)
        )
    );
}
pub type physdev_eoi_t = physdev_eoi;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_eoi_t {
    pub p: *mut physdev_eoi_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_eoi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_eoi_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_eoi_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_eoi_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_physdev_eoi_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_physdev_eoi_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_eoi_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_physdev_eoi_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_eoi_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_eoi_t {
    pub p: *mut physdev_eoi_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_eoi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_eoi_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_physdev_eoi_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_eoi_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_physdev_eoi_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_eoi_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_eoi_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_eoi_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_eoi_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_eoi_t {
    pub p: *const physdev_eoi_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_eoi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_eoi_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_physdev_eoi_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_eoi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_eoi_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_eoi_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_eoi_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_eoi_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_eoi_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_eoi_t {
    pub p: *const physdev_eoi_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_eoi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_eoi_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_eoi_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_eoi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_eoi_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_eoi_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_eoi_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_eoi_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_eoi_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_pirq_eoi_gmfn {
    pub gmfn: xen_pfn_t,
}
#[test]
fn bindgen_test_layout_physdev_pirq_eoi_gmfn() {
    assert_eq!(
        ::std::mem::size_of::<physdev_pirq_eoi_gmfn>(),
        8usize,
        concat!("Size of: ", stringify!(physdev_pirq_eoi_gmfn))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_pirq_eoi_gmfn>(),
        8usize,
        concat!("Alignment of ", stringify!(physdev_pirq_eoi_gmfn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_pirq_eoi_gmfn>())).gmfn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_pirq_eoi_gmfn),
            "::",
            stringify!(gmfn)
        )
    );
}
pub type physdev_pirq_eoi_gmfn_t = physdev_pirq_eoi_gmfn;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_pirq_eoi_gmfn_t {
    pub p: *mut physdev_pirq_eoi_gmfn_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_pirq_eoi_gmfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_pirq_eoi_gmfn_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_physdev_pirq_eoi_gmfn_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_pirq_eoi_gmfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_pirq_eoi_gmfn_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_pirq_eoi_gmfn_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_pirq_eoi_gmfn_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_pirq_eoi_gmfn_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_pirq_eoi_gmfn_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_pirq_eoi_gmfn_t {
    pub p: *mut physdev_pirq_eoi_gmfn_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_pirq_eoi_gmfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_pirq_eoi_gmfn_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_pirq_eoi_gmfn_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_pirq_eoi_gmfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_pirq_eoi_gmfn_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_pirq_eoi_gmfn_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_pirq_eoi_gmfn_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_pirq_eoi_gmfn_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_pirq_eoi_gmfn_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_pirq_eoi_gmfn_t {
    pub p: *const physdev_pirq_eoi_gmfn_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_pirq_eoi_gmfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_pirq_eoi_gmfn_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_pirq_eoi_gmfn_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_pirq_eoi_gmfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_pirq_eoi_gmfn_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_pirq_eoi_gmfn_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_pirq_eoi_gmfn_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_pirq_eoi_gmfn_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_pirq_eoi_gmfn_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_pirq_eoi_gmfn_t {
    pub p: *const physdev_pirq_eoi_gmfn_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_pirq_eoi_gmfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_pirq_eoi_gmfn_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_pirq_eoi_gmfn_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_pirq_eoi_gmfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_pirq_eoi_gmfn_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_pirq_eoi_gmfn_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_pirq_eoi_gmfn_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_pirq_eoi_gmfn_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_pirq_eoi_gmfn_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_irq_status_query {
    pub irq: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_physdev_irq_status_query() {
    assert_eq!(
        ::std::mem::size_of::<physdev_irq_status_query>(),
        8usize,
        concat!("Size of: ", stringify!(physdev_irq_status_query))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_irq_status_query>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_irq_status_query))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_irq_status_query>())).irq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_irq_status_query),
            "::",
            stringify!(irq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_irq_status_query>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_irq_status_query),
            "::",
            stringify!(flags)
        )
    );
}
pub type physdev_irq_status_query_t = physdev_irq_status_query;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_irq_status_query_t {
    pub p: *mut physdev_irq_status_query_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_irq_status_query_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_irq_status_query_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_physdev_irq_status_query_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_irq_status_query_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_irq_status_query_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_irq_status_query_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_irq_status_query_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_irq_status_query_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_irq_status_query_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_irq_status_query_t {
    pub p: *mut physdev_irq_status_query_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_irq_status_query_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_irq_status_query_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_irq_status_query_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_irq_status_query_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_irq_status_query_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_irq_status_query_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_irq_status_query_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_irq_status_query_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_irq_status_query_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_irq_status_query_t {
    pub p: *const physdev_irq_status_query_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_irq_status_query_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_irq_status_query_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_irq_status_query_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_irq_status_query_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_irq_status_query_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_irq_status_query_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_irq_status_query_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_irq_status_query_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_irq_status_query_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_irq_status_query_t {
    pub p: *const physdev_irq_status_query_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_irq_status_query_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_irq_status_query_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_irq_status_query_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_irq_status_query_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_irq_status_query_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_irq_status_query_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_irq_status_query_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_irq_status_query_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_irq_status_query_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_set_iopl {
    pub iopl: u32,
}
#[test]
fn bindgen_test_layout_physdev_set_iopl() {
    assert_eq!(
        ::std::mem::size_of::<physdev_set_iopl>(),
        4usize,
        concat!("Size of: ", stringify!(physdev_set_iopl))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_set_iopl>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_set_iopl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_set_iopl>())).iopl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_set_iopl),
            "::",
            stringify!(iopl)
        )
    );
}
pub type physdev_set_iopl_t = physdev_set_iopl;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_set_iopl_t {
    pub p: *mut physdev_set_iopl_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_set_iopl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_set_iopl_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_set_iopl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_set_iopl_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_set_iopl_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_set_iopl_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_set_iopl_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_set_iopl_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_set_iopl_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_set_iopl_t {
    pub p: *mut physdev_set_iopl_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_set_iopl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_set_iopl_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_set_iopl_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_set_iopl_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_set_iopl_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_set_iopl_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_set_iopl_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_set_iopl_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_set_iopl_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_set_iopl_t {
    pub p: *const physdev_set_iopl_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_set_iopl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_set_iopl_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_set_iopl_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_set_iopl_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_set_iopl_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_set_iopl_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_set_iopl_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_set_iopl_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_set_iopl_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_set_iopl_t {
    pub p: *const physdev_set_iopl_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_set_iopl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_set_iopl_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_set_iopl_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_set_iopl_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_set_iopl_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_set_iopl_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_set_iopl_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_set_iopl_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_set_iopl_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct physdev_set_iobitmap {
    pub bitmap: __guest_handle_64_uint8,
    pub nr_ports: u32,
}
#[test]
fn bindgen_test_layout_physdev_set_iobitmap() {
    assert_eq!(
        ::std::mem::size_of::<physdev_set_iobitmap>(),
        16usize,
        concat!("Size of: ", stringify!(physdev_set_iobitmap))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_set_iobitmap>(),
        8usize,
        concat!("Alignment of ", stringify!(physdev_set_iobitmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_set_iobitmap>())).bitmap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_set_iobitmap),
            "::",
            stringify!(bitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_set_iobitmap>())).nr_ports as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_set_iobitmap),
            "::",
            stringify!(nr_ports)
        )
    );
}
pub type physdev_set_iobitmap_t = physdev_set_iobitmap;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_set_iobitmap_t {
    pub p: *mut physdev_set_iobitmap_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_set_iobitmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_set_iobitmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_physdev_set_iobitmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_set_iobitmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_set_iobitmap_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_set_iobitmap_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_set_iobitmap_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_set_iobitmap_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_set_iobitmap_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_set_iobitmap_t {
    pub p: *mut physdev_set_iobitmap_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_set_iobitmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_set_iobitmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_set_iobitmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_set_iobitmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_set_iobitmap_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_set_iobitmap_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_set_iobitmap_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_set_iobitmap_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_set_iobitmap_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_set_iobitmap_t {
    pub p: *const physdev_set_iobitmap_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_set_iobitmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_set_iobitmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_set_iobitmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_set_iobitmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_set_iobitmap_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_set_iobitmap_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_set_iobitmap_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_set_iobitmap_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_set_iobitmap_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_set_iobitmap_t {
    pub p: *const physdev_set_iobitmap_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_set_iobitmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_set_iobitmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_set_iobitmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_set_iobitmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_set_iobitmap_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_set_iobitmap_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_set_iobitmap_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_set_iobitmap_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_set_iobitmap_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_apic {
    pub apic_physbase: ::std::os::raw::c_ulong,
    pub reg: u32,
    pub value: u32,
}
#[test]
fn bindgen_test_layout_physdev_apic() {
    assert_eq!(
        ::std::mem::size_of::<physdev_apic>(),
        16usize,
        concat!("Size of: ", stringify!(physdev_apic))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_apic>(),
        8usize,
        concat!("Alignment of ", stringify!(physdev_apic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_apic>())).apic_physbase as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_apic),
            "::",
            stringify!(apic_physbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_apic>())).reg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_apic),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_apic>())).value as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_apic),
            "::",
            stringify!(value)
        )
    );
}
pub type physdev_apic_t = physdev_apic;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_apic_t {
    pub p: *mut physdev_apic_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_apic_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_apic_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_apic_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_apic_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_physdev_apic_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_physdev_apic_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_apic_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_physdev_apic_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_apic_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_apic_t {
    pub p: *mut physdev_apic_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_apic_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_apic_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_physdev_apic_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_apic_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_apic_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_apic_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_apic_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_apic_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_apic_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_apic_t {
    pub p: *const physdev_apic_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_apic_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_apic_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_physdev_apic_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_apic_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_apic_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_apic_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_apic_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_apic_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_apic_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_apic_t {
    pub p: *const physdev_apic_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_apic_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_apic_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_apic_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_apic_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_apic_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_apic_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_apic_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_apic_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_apic_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_irq {
    pub irq: u32,
    pub vector: u32,
}
#[test]
fn bindgen_test_layout_physdev_irq() {
    assert_eq!(
        ::std::mem::size_of::<physdev_irq>(),
        8usize,
        concat!("Size of: ", stringify!(physdev_irq))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_irq>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_irq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_irq>())).irq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_irq),
            "::",
            stringify!(irq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_irq>())).vector as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_irq),
            "::",
            stringify!(vector)
        )
    );
}
pub type physdev_irq_t = physdev_irq;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_irq_t {
    pub p: *mut physdev_irq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_irq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_irq_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_irq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_irq_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_physdev_irq_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_physdev_irq_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_irq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_physdev_irq_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_irq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_irq_t {
    pub p: *mut physdev_irq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_irq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_irq_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_physdev_irq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_irq_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_physdev_irq_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_irq_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_irq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_irq_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_irq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_irq_t {
    pub p: *const physdev_irq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_irq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_irq_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_physdev_irq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_irq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_irq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_irq_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_irq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_irq_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_irq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_irq_t {
    pub p: *const physdev_irq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_irq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_irq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_irq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_irq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_irq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_irq_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_irq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_irq_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_irq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_map_pirq {
    pub domid: domid_t,
    pub type_: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
    pub pirq: ::std::os::raw::c_int,
    pub bus: ::std::os::raw::c_int,
    pub devfn: ::std::os::raw::c_int,
    pub entry_nr: ::std::os::raw::c_int,
    pub table_base: u64,
}
#[test]
fn bindgen_test_layout_physdev_map_pirq() {
    assert_eq!(
        ::std::mem::size_of::<physdev_map_pirq>(),
        40usize,
        concat!("Size of: ", stringify!(physdev_map_pirq))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_map_pirq>(),
        8usize,
        concat!("Alignment of ", stringify!(physdev_map_pirq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_map_pirq>())).domid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_map_pirq),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_map_pirq>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_map_pirq),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_map_pirq>())).index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_map_pirq),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_map_pirq>())).pirq as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_map_pirq),
            "::",
            stringify!(pirq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_map_pirq>())).bus as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_map_pirq),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_map_pirq>())).devfn as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_map_pirq),
            "::",
            stringify!(devfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_map_pirq>())).entry_nr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_map_pirq),
            "::",
            stringify!(entry_nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_map_pirq>())).table_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_map_pirq),
            "::",
            stringify!(table_base)
        )
    );
}
pub type physdev_map_pirq_t = physdev_map_pirq;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_map_pirq_t {
    pub p: *mut physdev_map_pirq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_map_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_map_pirq_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_map_pirq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_map_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_map_pirq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_map_pirq_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_map_pirq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_map_pirq_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_map_pirq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_map_pirq_t {
    pub p: *mut physdev_map_pirq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_map_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_map_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_map_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_map_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_map_pirq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_map_pirq_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_map_pirq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_map_pirq_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_map_pirq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_map_pirq_t {
    pub p: *const physdev_map_pirq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_map_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_map_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_map_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_map_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_map_pirq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_map_pirq_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_map_pirq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_map_pirq_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_map_pirq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_map_pirq_t {
    pub p: *const physdev_map_pirq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_map_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_map_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_map_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_map_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_map_pirq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_map_pirq_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_map_pirq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_map_pirq_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_map_pirq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_unmap_pirq {
    pub domid: domid_t,
    pub pirq: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_physdev_unmap_pirq() {
    assert_eq!(
        ::std::mem::size_of::<physdev_unmap_pirq>(),
        8usize,
        concat!("Size of: ", stringify!(physdev_unmap_pirq))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_unmap_pirq>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_unmap_pirq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_unmap_pirq>())).domid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_unmap_pirq),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_unmap_pirq>())).pirq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_unmap_pirq),
            "::",
            stringify!(pirq)
        )
    );
}
pub type physdev_unmap_pirq_t = physdev_unmap_pirq;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_unmap_pirq_t {
    pub p: *mut physdev_unmap_pirq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_unmap_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_unmap_pirq_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_unmap_pirq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_unmap_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_unmap_pirq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_unmap_pirq_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_unmap_pirq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_unmap_pirq_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_unmap_pirq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_unmap_pirq_t {
    pub p: *mut physdev_unmap_pirq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_unmap_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_unmap_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_unmap_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_unmap_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_unmap_pirq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_unmap_pirq_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_unmap_pirq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_unmap_pirq_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_unmap_pirq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_unmap_pirq_t {
    pub p: *const physdev_unmap_pirq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_unmap_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_unmap_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_unmap_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_unmap_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_unmap_pirq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_unmap_pirq_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_unmap_pirq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_unmap_pirq_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_unmap_pirq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_unmap_pirq_t {
    pub p: *const physdev_unmap_pirq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_unmap_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_unmap_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_unmap_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_unmap_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_unmap_pirq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_unmap_pirq_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_unmap_pirq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_unmap_pirq_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_unmap_pirq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_manage_pci {
    pub bus: u8,
    pub devfn: u8,
}
#[test]
fn bindgen_test_layout_physdev_manage_pci() {
    assert_eq!(
        ::std::mem::size_of::<physdev_manage_pci>(),
        2usize,
        concat!("Size of: ", stringify!(physdev_manage_pci))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_manage_pci>(),
        1usize,
        concat!("Alignment of ", stringify!(physdev_manage_pci))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_manage_pci>())).bus as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_manage_pci),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_manage_pci>())).devfn as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_manage_pci),
            "::",
            stringify!(devfn)
        )
    );
}
pub type physdev_manage_pci_t = physdev_manage_pci;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_manage_pci_t {
    pub p: *mut physdev_manage_pci_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_manage_pci_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_manage_pci_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_manage_pci_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_manage_pci_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_manage_pci_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_manage_pci_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_manage_pci_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_manage_pci_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_manage_pci_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_manage_pci_t {
    pub p: *mut physdev_manage_pci_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_manage_pci_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_manage_pci_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_manage_pci_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_manage_pci_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_manage_pci_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_manage_pci_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_manage_pci_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_manage_pci_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_manage_pci_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_manage_pci_t {
    pub p: *const physdev_manage_pci_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_manage_pci_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_manage_pci_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_manage_pci_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_manage_pci_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_manage_pci_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_manage_pci_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_manage_pci_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_manage_pci_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_manage_pci_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_manage_pci_t {
    pub p: *const physdev_manage_pci_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_manage_pci_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_manage_pci_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_manage_pci_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_manage_pci_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_manage_pci_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_manage_pci_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_manage_pci_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_manage_pci_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_manage_pci_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_restore_msi {
    pub bus: u8,
    pub devfn: u8,
}
#[test]
fn bindgen_test_layout_physdev_restore_msi() {
    assert_eq!(
        ::std::mem::size_of::<physdev_restore_msi>(),
        2usize,
        concat!("Size of: ", stringify!(physdev_restore_msi))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_restore_msi>(),
        1usize,
        concat!("Alignment of ", stringify!(physdev_restore_msi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_restore_msi>())).bus as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_restore_msi),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_restore_msi>())).devfn as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_restore_msi),
            "::",
            stringify!(devfn)
        )
    );
}
pub type physdev_restore_msi_t = physdev_restore_msi;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_restore_msi_t {
    pub p: *mut physdev_restore_msi_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_restore_msi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_restore_msi_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_physdev_restore_msi_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_restore_msi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_restore_msi_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_restore_msi_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_restore_msi_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_restore_msi_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_restore_msi_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_restore_msi_t {
    pub p: *mut physdev_restore_msi_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_restore_msi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_restore_msi_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_restore_msi_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_restore_msi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_restore_msi_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_restore_msi_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_restore_msi_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_restore_msi_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_restore_msi_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_restore_msi_t {
    pub p: *const physdev_restore_msi_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_restore_msi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_restore_msi_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_restore_msi_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_restore_msi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_restore_msi_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_restore_msi_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_restore_msi_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_restore_msi_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_restore_msi_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_restore_msi_t {
    pub p: *const physdev_restore_msi_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_restore_msi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_restore_msi_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_restore_msi_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_restore_msi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_restore_msi_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_restore_msi_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_restore_msi_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_restore_msi_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_restore_msi_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_manage_pci_ext {
    pub bus: u8,
    pub devfn: u8,
    pub is_extfn: ::std::os::raw::c_uint,
    pub is_virtfn: ::std::os::raw::c_uint,
    pub physfn: physdev_manage_pci_ext__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_manage_pci_ext__bindgen_ty_1 {
    pub bus: u8,
    pub devfn: u8,
}
#[test]
fn bindgen_test_layout_physdev_manage_pci_ext__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<physdev_manage_pci_ext__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(physdev_manage_pci_ext__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_manage_pci_ext__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(physdev_manage_pci_ext__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<physdev_manage_pci_ext__bindgen_ty_1>())).bus as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_manage_pci_ext__bindgen_ty_1),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<physdev_manage_pci_ext__bindgen_ty_1>())).devfn as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_manage_pci_ext__bindgen_ty_1),
            "::",
            stringify!(devfn)
        )
    );
}
#[test]
fn bindgen_test_layout_physdev_manage_pci_ext() {
    assert_eq!(
        ::std::mem::size_of::<physdev_manage_pci_ext>(),
        16usize,
        concat!("Size of: ", stringify!(physdev_manage_pci_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_manage_pci_ext>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_manage_pci_ext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_manage_pci_ext>())).bus as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_manage_pci_ext),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_manage_pci_ext>())).devfn as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_manage_pci_ext),
            "::",
            stringify!(devfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_manage_pci_ext>())).is_extfn as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_manage_pci_ext),
            "::",
            stringify!(is_extfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<physdev_manage_pci_ext>())).is_virtfn as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_manage_pci_ext),
            "::",
            stringify!(is_virtfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_manage_pci_ext>())).physfn as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_manage_pci_ext),
            "::",
            stringify!(physfn)
        )
    );
}
pub type physdev_manage_pci_ext_t = physdev_manage_pci_ext;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_manage_pci_ext_t {
    pub p: *mut physdev_manage_pci_ext_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_manage_pci_ext_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_manage_pci_ext_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_physdev_manage_pci_ext_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_manage_pci_ext_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_manage_pci_ext_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_manage_pci_ext_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_manage_pci_ext_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_manage_pci_ext_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_manage_pci_ext_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_manage_pci_ext_t {
    pub p: *mut physdev_manage_pci_ext_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_manage_pci_ext_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_manage_pci_ext_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_manage_pci_ext_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_manage_pci_ext_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_manage_pci_ext_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_manage_pci_ext_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_manage_pci_ext_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_manage_pci_ext_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_manage_pci_ext_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_manage_pci_ext_t {
    pub p: *const physdev_manage_pci_ext_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_manage_pci_ext_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_manage_pci_ext_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_manage_pci_ext_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_manage_pci_ext_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_manage_pci_ext_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_manage_pci_ext_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_manage_pci_ext_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_manage_pci_ext_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_manage_pci_ext_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_manage_pci_ext_t {
    pub p: *const physdev_manage_pci_ext_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_manage_pci_ext_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_manage_pci_ext_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_manage_pci_ext_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_manage_pci_ext_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_manage_pci_ext_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_manage_pci_ext_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_manage_pci_ext_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_manage_pci_ext_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_manage_pci_ext_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct physdev_op {
    pub cmd: u32,
    pub u: physdev_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union physdev_op__bindgen_ty_1 {
    pub irq_status_query: physdev_irq_status_query_t,
    pub set_iopl: physdev_set_iopl_t,
    pub set_iobitmap: physdev_set_iobitmap_t,
    pub apic_op: physdev_apic_t,
    pub irq_op: physdev_irq_t,
}
#[test]
fn bindgen_test_layout_physdev_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<physdev_op__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(physdev_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(physdev_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<physdev_op__bindgen_ty_1>())).irq_status_query as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_op__bindgen_ty_1),
            "::",
            stringify!(irq_status_query)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<physdev_op__bindgen_ty_1>())).set_iopl as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_op__bindgen_ty_1),
            "::",
            stringify!(set_iopl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<physdev_op__bindgen_ty_1>())).set_iobitmap as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_op__bindgen_ty_1),
            "::",
            stringify!(set_iobitmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<physdev_op__bindgen_ty_1>())).apic_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_op__bindgen_ty_1),
            "::",
            stringify!(apic_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_op__bindgen_ty_1>())).irq_op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_op__bindgen_ty_1),
            "::",
            stringify!(irq_op)
        )
    );
}
#[test]
fn bindgen_test_layout_physdev_op() {
    assert_eq!(
        ::std::mem::size_of::<physdev_op>(),
        24usize,
        concat!("Size of: ", stringify!(physdev_op))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_op>(),
        8usize,
        concat!("Alignment of ", stringify!(physdev_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_op>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_op>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_op),
            "::",
            stringify!(u)
        )
    );
}
pub type physdev_op_t = physdev_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_op_t {
    pub p: *mut physdev_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_op_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_physdev_op_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_physdev_op_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_physdev_op_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_op_t {
    pub p: *mut physdev_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_physdev_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_op_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_physdev_op_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_op_t {
    pub p: *const physdev_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_physdev_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_op_t {
    pub p: *const physdev_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_setup_gsi {
    pub gsi: ::std::os::raw::c_int,
    pub triggering: u8,
    pub polarity: u8,
}
#[test]
fn bindgen_test_layout_physdev_setup_gsi() {
    assert_eq!(
        ::std::mem::size_of::<physdev_setup_gsi>(),
        8usize,
        concat!("Size of: ", stringify!(physdev_setup_gsi))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_setup_gsi>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_setup_gsi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_setup_gsi>())).gsi as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_setup_gsi),
            "::",
            stringify!(gsi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_setup_gsi>())).triggering as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_setup_gsi),
            "::",
            stringify!(triggering)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_setup_gsi>())).polarity as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_setup_gsi),
            "::",
            stringify!(polarity)
        )
    );
}
pub type physdev_setup_gsi_t = physdev_setup_gsi;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_setup_gsi_t {
    pub p: *mut physdev_setup_gsi_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_setup_gsi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_setup_gsi_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_setup_gsi_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_setup_gsi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_setup_gsi_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_setup_gsi_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_setup_gsi_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_setup_gsi_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_setup_gsi_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_setup_gsi_t {
    pub p: *mut physdev_setup_gsi_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_setup_gsi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_setup_gsi_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_setup_gsi_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_setup_gsi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_setup_gsi_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_setup_gsi_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_setup_gsi_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_setup_gsi_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_setup_gsi_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_setup_gsi_t {
    pub p: *const physdev_setup_gsi_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_setup_gsi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_setup_gsi_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_setup_gsi_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_setup_gsi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_setup_gsi_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_setup_gsi_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_setup_gsi_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_setup_gsi_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_setup_gsi_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_setup_gsi_t {
    pub p: *const physdev_setup_gsi_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_setup_gsi_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_setup_gsi_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_setup_gsi_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_setup_gsi_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_setup_gsi_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_setup_gsi_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_setup_gsi_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_setup_gsi_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_setup_gsi_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_get_free_pirq {
    pub type_: ::std::os::raw::c_int,
    pub pirq: u32,
}
#[test]
fn bindgen_test_layout_physdev_get_free_pirq() {
    assert_eq!(
        ::std::mem::size_of::<physdev_get_free_pirq>(),
        8usize,
        concat!("Size of: ", stringify!(physdev_get_free_pirq))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_get_free_pirq>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_get_free_pirq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_get_free_pirq>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_get_free_pirq),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_get_free_pirq>())).pirq as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_get_free_pirq),
            "::",
            stringify!(pirq)
        )
    );
}
pub type physdev_get_free_pirq_t = physdev_get_free_pirq;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_get_free_pirq_t {
    pub p: *mut physdev_get_free_pirq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_get_free_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_get_free_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_physdev_get_free_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_get_free_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_get_free_pirq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_get_free_pirq_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_get_free_pirq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_get_free_pirq_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_get_free_pirq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_get_free_pirq_t {
    pub p: *mut physdev_get_free_pirq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_get_free_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_get_free_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_get_free_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_get_free_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_get_free_pirq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_get_free_pirq_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_get_free_pirq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_get_free_pirq_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_get_free_pirq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_get_free_pirq_t {
    pub p: *const physdev_get_free_pirq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_get_free_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_get_free_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_get_free_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_get_free_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_get_free_pirq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_get_free_pirq_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_get_free_pirq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_get_free_pirq_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_get_free_pirq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_get_free_pirq_t {
    pub p: *const physdev_get_free_pirq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_get_free_pirq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_get_free_pirq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_get_free_pirq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_get_free_pirq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_get_free_pirq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_get_free_pirq_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_get_free_pirq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_get_free_pirq_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_get_free_pirq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_pci_mmcfg_reserved {
    pub address: u64,
    pub segment: u16,
    pub start_bus: u8,
    pub end_bus: u8,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_physdev_pci_mmcfg_reserved() {
    assert_eq!(
        ::std::mem::size_of::<physdev_pci_mmcfg_reserved>(),
        16usize,
        concat!("Size of: ", stringify!(physdev_pci_mmcfg_reserved))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_pci_mmcfg_reserved>(),
        8usize,
        concat!("Alignment of ", stringify!(physdev_pci_mmcfg_reserved))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<physdev_pci_mmcfg_reserved>())).address as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_pci_mmcfg_reserved),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<physdev_pci_mmcfg_reserved>())).segment as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_pci_mmcfg_reserved),
            "::",
            stringify!(segment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<physdev_pci_mmcfg_reserved>())).start_bus as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_pci_mmcfg_reserved),
            "::",
            stringify!(start_bus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<physdev_pci_mmcfg_reserved>())).end_bus as *const _ as usize
        },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_pci_mmcfg_reserved),
            "::",
            stringify!(end_bus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<physdev_pci_mmcfg_reserved>())).flags as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_pci_mmcfg_reserved),
            "::",
            stringify!(flags)
        )
    );
}
pub type physdev_pci_mmcfg_reserved_t = physdev_pci_mmcfg_reserved;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_pci_mmcfg_reserved_t {
    pub p: *mut physdev_pci_mmcfg_reserved_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_pci_mmcfg_reserved_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_pci_mmcfg_reserved_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_physdev_pci_mmcfg_reserved_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_pci_mmcfg_reserved_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_pci_mmcfg_reserved_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_pci_mmcfg_reserved_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_pci_mmcfg_reserved_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_pci_mmcfg_reserved_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_pci_mmcfg_reserved_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_pci_mmcfg_reserved_t {
    pub p: *mut physdev_pci_mmcfg_reserved_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_pci_mmcfg_reserved_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_pci_mmcfg_reserved_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_pci_mmcfg_reserved_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_pci_mmcfg_reserved_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_pci_mmcfg_reserved_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_pci_mmcfg_reserved_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_pci_mmcfg_reserved_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_pci_mmcfg_reserved_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_pci_mmcfg_reserved_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_pci_mmcfg_reserved_t {
    pub p: *const physdev_pci_mmcfg_reserved_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_pci_mmcfg_reserved_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_pci_mmcfg_reserved_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_pci_mmcfg_reserved_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_pci_mmcfg_reserved_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_pci_mmcfg_reserved_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_pci_mmcfg_reserved_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_pci_mmcfg_reserved_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_pci_mmcfg_reserved_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_pci_mmcfg_reserved_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_pci_mmcfg_reserved_t {
    pub p: *const physdev_pci_mmcfg_reserved_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_pci_mmcfg_reserved_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_pci_mmcfg_reserved_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_pci_mmcfg_reserved_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_pci_mmcfg_reserved_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_pci_mmcfg_reserved_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_pci_mmcfg_reserved_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_pci_mmcfg_reserved_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_pci_mmcfg_reserved_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_pci_mmcfg_reserved_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct physdev_pci_device_add {
    pub seg: u16,
    pub bus: u8,
    pub devfn: u8,
    pub flags: u32,
    pub physfn: physdev_pci_device_add__bindgen_ty_1,
    pub optarr: __IncompleteArrayField<u32>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_pci_device_add__bindgen_ty_1 {
    pub bus: u8,
    pub devfn: u8,
}
#[test]
fn bindgen_test_layout_physdev_pci_device_add__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<physdev_pci_device_add__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(physdev_pci_device_add__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_pci_device_add__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(physdev_pci_device_add__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<physdev_pci_device_add__bindgen_ty_1>())).bus as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_pci_device_add__bindgen_ty_1),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<physdev_pci_device_add__bindgen_ty_1>())).devfn as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_pci_device_add__bindgen_ty_1),
            "::",
            stringify!(devfn)
        )
    );
}
#[test]
fn bindgen_test_layout_physdev_pci_device_add() {
    assert_eq!(
        ::std::mem::size_of::<physdev_pci_device_add>(),
        12usize,
        concat!("Size of: ", stringify!(physdev_pci_device_add))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_pci_device_add>(),
        4usize,
        concat!("Alignment of ", stringify!(physdev_pci_device_add))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_pci_device_add>())).seg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_pci_device_add),
            "::",
            stringify!(seg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_pci_device_add>())).bus as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_pci_device_add),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_pci_device_add>())).devfn as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_pci_device_add),
            "::",
            stringify!(devfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_pci_device_add>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_pci_device_add),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_pci_device_add>())).physfn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_pci_device_add),
            "::",
            stringify!(physfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_pci_device_add>())).optarr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_pci_device_add),
            "::",
            stringify!(optarr)
        )
    );
}
pub type physdev_pci_device_add_t = physdev_pci_device_add;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_pci_device_add_t {
    pub p: *mut physdev_pci_device_add_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_pci_device_add_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_pci_device_add_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_physdev_pci_device_add_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_pci_device_add_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_pci_device_add_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_pci_device_add_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_pci_device_add_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_pci_device_add_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_pci_device_add_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_pci_device_add_t {
    pub p: *mut physdev_pci_device_add_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_pci_device_add_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_pci_device_add_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_pci_device_add_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_pci_device_add_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_pci_device_add_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_pci_device_add_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_pci_device_add_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_pci_device_add_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_pci_device_add_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_pci_device_add_t {
    pub p: *const physdev_pci_device_add_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_pci_device_add_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_pci_device_add_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_pci_device_add_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_pci_device_add_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_pci_device_add_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_pci_device_add_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_pci_device_add_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_pci_device_add_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_pci_device_add_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_pci_device_add_t {
    pub p: *const physdev_pci_device_add_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_pci_device_add_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_pci_device_add_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_pci_device_add_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_pci_device_add_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_pci_device_add_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_pci_device_add_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_pci_device_add_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_pci_device_add_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_pci_device_add_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct physdev_pci_device {
    pub seg: u16,
    pub bus: u8,
    pub devfn: u8,
}
#[test]
fn bindgen_test_layout_physdev_pci_device() {
    assert_eq!(
        ::std::mem::size_of::<physdev_pci_device>(),
        4usize,
        concat!("Size of: ", stringify!(physdev_pci_device))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_pci_device>(),
        2usize,
        concat!("Alignment of ", stringify!(physdev_pci_device))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_pci_device>())).seg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_pci_device),
            "::",
            stringify!(seg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_pci_device>())).bus as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_pci_device),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_pci_device>())).devfn as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_pci_device),
            "::",
            stringify!(devfn)
        )
    );
}
pub type physdev_pci_device_t = physdev_pci_device;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_pci_device_t {
    pub p: *mut physdev_pci_device_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_pci_device_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_pci_device_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_pci_device_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_pci_device_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_pci_device_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_pci_device_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_pci_device_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_pci_device_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_pci_device_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_pci_device_t {
    pub p: *mut physdev_pci_device_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_pci_device_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_pci_device_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_physdev_pci_device_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_pci_device_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_pci_device_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_pci_device_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_pci_device_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_pci_device_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_pci_device_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_pci_device_t {
    pub p: *const physdev_pci_device_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_pci_device_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_pci_device_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_pci_device_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_pci_device_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_pci_device_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_pci_device_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_pci_device_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_pci_device_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_pci_device_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_pci_device_t {
    pub p: *const physdev_pci_device_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_pci_device_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_pci_device_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_pci_device_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_pci_device_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_pci_device_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_pci_device_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_pci_device_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_pci_device_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_pci_device_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct physdev_dbgp_op {
    pub op: u8,
    pub bus: u8,
    pub u: physdev_dbgp_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union physdev_dbgp_op__bindgen_ty_1 {
    pub pci: physdev_pci_device_t,
}
#[test]
fn bindgen_test_layout_physdev_dbgp_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<physdev_dbgp_op__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(physdev_dbgp_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_dbgp_op__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(physdev_dbgp_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<physdev_dbgp_op__bindgen_ty_1>())).pci as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_dbgp_op__bindgen_ty_1),
            "::",
            stringify!(pci)
        )
    );
}
#[test]
fn bindgen_test_layout_physdev_dbgp_op() {
    assert_eq!(
        ::std::mem::size_of::<physdev_dbgp_op>(),
        6usize,
        concat!("Size of: ", stringify!(physdev_dbgp_op))
    );
    assert_eq!(
        ::std::mem::align_of::<physdev_dbgp_op>(),
        2usize,
        concat!("Alignment of ", stringify!(physdev_dbgp_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_dbgp_op>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_dbgp_op),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_dbgp_op>())).bus as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_dbgp_op),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<physdev_dbgp_op>())).u as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(physdev_dbgp_op),
            "::",
            stringify!(u)
        )
    );
}
pub type physdev_dbgp_op_t = physdev_dbgp_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_physdev_dbgp_op_t {
    pub p: *mut physdev_dbgp_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_physdev_dbgp_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_physdev_dbgp_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_physdev_dbgp_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_physdev_dbgp_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_physdev_dbgp_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_dbgp_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_dbgp_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_physdev_dbgp_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_physdev_dbgp_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_physdev_dbgp_op_t {
    pub p: *mut physdev_dbgp_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_physdev_dbgp_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_physdev_dbgp_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_physdev_dbgp_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_physdev_dbgp_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_physdev_dbgp_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_dbgp_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_dbgp_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_physdev_dbgp_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_physdev_dbgp_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_physdev_dbgp_op_t {
    pub p: *const physdev_dbgp_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_physdev_dbgp_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_physdev_dbgp_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_physdev_dbgp_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_physdev_dbgp_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_physdev_dbgp_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_dbgp_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_dbgp_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_physdev_dbgp_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_physdev_dbgp_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_physdev_dbgp_op_t {
    pub p: *const physdev_dbgp_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_physdev_dbgp_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_physdev_dbgp_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_physdev_dbgp_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_physdev_dbgp_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_physdev_dbgp_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_dbgp_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_dbgp_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_physdev_dbgp_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_physdev_dbgp_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_memory_reservation {
    pub extent_start: __guest_handle_64_xen_pfn_t,
    pub nr_extents: xen_ulong_t,
    pub extent_order: ::std::os::raw::c_uint,
    pub mem_flags: ::std::os::raw::c_uint,
    pub domid: domid_t,
}
#[test]
fn bindgen_test_layout_xen_memory_reservation() {
    assert_eq!(
        ::std::mem::size_of::<xen_memory_reservation>(),
        32usize,
        concat!("Size of: ", stringify!(xen_memory_reservation))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_memory_reservation>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_memory_reservation))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_memory_reservation>())).extent_start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_memory_reservation),
            "::",
            stringify!(extent_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_memory_reservation>())).nr_extents as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_memory_reservation),
            "::",
            stringify!(nr_extents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_memory_reservation>())).extent_order as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_memory_reservation),
            "::",
            stringify!(extent_order)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_memory_reservation>())).mem_flags as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_memory_reservation),
            "::",
            stringify!(mem_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_memory_reservation>())).domid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_memory_reservation),
            "::",
            stringify!(domid)
        )
    );
}
pub type xen_memory_reservation_t = xen_memory_reservation;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_memory_reservation_t {
    pub p: *mut xen_memory_reservation_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_memory_reservation_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_memory_reservation_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_memory_reservation_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_memory_reservation_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_memory_reservation_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_memory_reservation_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_memory_reservation_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_memory_reservation_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_memory_reservation_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_memory_reservation_t {
    pub p: *mut xen_memory_reservation_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_memory_reservation_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_memory_reservation_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_memory_reservation_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_memory_reservation_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_memory_reservation_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_memory_reservation_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_memory_reservation_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_memory_reservation_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_memory_reservation_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_memory_reservation_t {
    pub p: *const xen_memory_reservation_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_memory_reservation_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_memory_reservation_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_memory_reservation_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_memory_reservation_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_memory_reservation_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_memory_reservation_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_memory_reservation_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_memory_reservation_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_memory_reservation_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_memory_reservation_t {
    pub p: *const xen_memory_reservation_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_memory_reservation_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_memory_reservation_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_memory_reservation_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_memory_reservation_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_memory_reservation_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_memory_reservation_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_memory_reservation_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_memory_reservation_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_memory_reservation_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_memory_exchange {
    pub in_: xen_memory_reservation,
    pub out: xen_memory_reservation,
    pub nr_exchanged: xen_ulong_t,
}
#[test]
fn bindgen_test_layout_xen_memory_exchange() {
    assert_eq!(
        ::std::mem::size_of::<xen_memory_exchange>(),
        72usize,
        concat!("Size of: ", stringify!(xen_memory_exchange))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_memory_exchange>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_memory_exchange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_memory_exchange>())).in_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_memory_exchange),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_memory_exchange>())).out as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_memory_exchange),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_memory_exchange>())).nr_exchanged as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_memory_exchange),
            "::",
            stringify!(nr_exchanged)
        )
    );
}
pub type xen_memory_exchange_t = xen_memory_exchange;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_memory_exchange_t {
    pub p: *mut xen_memory_exchange_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_memory_exchange_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_memory_exchange_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_memory_exchange_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_memory_exchange_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_memory_exchange_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_memory_exchange_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_memory_exchange_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_memory_exchange_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_memory_exchange_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_memory_exchange_t {
    pub p: *mut xen_memory_exchange_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_memory_exchange_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_memory_exchange_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_memory_exchange_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_memory_exchange_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_memory_exchange_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_memory_exchange_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_memory_exchange_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_memory_exchange_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_memory_exchange_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_memory_exchange_t {
    pub p: *const xen_memory_exchange_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_memory_exchange_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_memory_exchange_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_memory_exchange_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_memory_exchange_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_memory_exchange_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_memory_exchange_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_memory_exchange_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_memory_exchange_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_memory_exchange_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_memory_exchange_t {
    pub p: *const xen_memory_exchange_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_memory_exchange_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_memory_exchange_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_memory_exchange_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_memory_exchange_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_memory_exchange_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_memory_exchange_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_memory_exchange_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_memory_exchange_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_memory_exchange_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_memory_domain {
    pub domid: domid_t,
}
#[test]
fn bindgen_test_layout_xen_memory_domain() {
    assert_eq!(
        ::std::mem::size_of::<xen_memory_domain>(),
        2usize,
        concat!("Size of: ", stringify!(xen_memory_domain))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_memory_domain>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_memory_domain))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_memory_domain>())).domid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_memory_domain),
            "::",
            stringify!(domid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_machphys_mfn_list {
    pub max_extents: ::std::os::raw::c_uint,
    pub extent_start: __guest_handle_64_xen_pfn_t,
    pub nr_extents: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_xen_machphys_mfn_list() {
    assert_eq!(
        ::std::mem::size_of::<xen_machphys_mfn_list>(),
        24usize,
        concat!("Size of: ", stringify!(xen_machphys_mfn_list))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_machphys_mfn_list>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_machphys_mfn_list))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_machphys_mfn_list>())).max_extents as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_machphys_mfn_list),
            "::",
            stringify!(max_extents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_machphys_mfn_list>())).extent_start as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_machphys_mfn_list),
            "::",
            stringify!(extent_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_machphys_mfn_list>())).nr_extents as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_machphys_mfn_list),
            "::",
            stringify!(nr_extents)
        )
    );
}
pub type xen_machphys_mfn_list_t = xen_machphys_mfn_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_machphys_mfn_list_t {
    pub p: *mut xen_machphys_mfn_list_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_machphys_mfn_list_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_machphys_mfn_list_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_machphys_mfn_list_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_machphys_mfn_list_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_machphys_mfn_list_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_machphys_mfn_list_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_machphys_mfn_list_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_machphys_mfn_list_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_machphys_mfn_list_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_machphys_mfn_list_t {
    pub p: *mut xen_machphys_mfn_list_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_machphys_mfn_list_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_machphys_mfn_list_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_machphys_mfn_list_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_machphys_mfn_list_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_machphys_mfn_list_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_machphys_mfn_list_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_machphys_mfn_list_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_machphys_mfn_list_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_machphys_mfn_list_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_machphys_mfn_list_t {
    pub p: *const xen_machphys_mfn_list_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_machphys_mfn_list_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_machphys_mfn_list_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_machphys_mfn_list_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_machphys_mfn_list_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_machphys_mfn_list_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_machphys_mfn_list_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_machphys_mfn_list_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_machphys_mfn_list_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_machphys_mfn_list_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_machphys_mfn_list_t {
    pub p: *const xen_machphys_mfn_list_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_machphys_mfn_list_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_machphys_mfn_list_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_machphys_mfn_list_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_machphys_mfn_list_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_machphys_mfn_list_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_machphys_mfn_list_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_machphys_mfn_list_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_machphys_mfn_list_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_machphys_mfn_list_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_machphys_mapping {
    pub v_start: xen_ulong_t,
    pub v_end: xen_ulong_t,
    pub max_mfn: xen_ulong_t,
}
#[test]
fn bindgen_test_layout_xen_machphys_mapping() {
    assert_eq!(
        ::std::mem::size_of::<xen_machphys_mapping>(),
        24usize,
        concat!("Size of: ", stringify!(xen_machphys_mapping))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_machphys_mapping>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_machphys_mapping))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_machphys_mapping>())).v_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_machphys_mapping),
            "::",
            stringify!(v_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_machphys_mapping>())).v_end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_machphys_mapping),
            "::",
            stringify!(v_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_machphys_mapping>())).max_mfn as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_machphys_mapping),
            "::",
            stringify!(max_mfn)
        )
    );
}
pub type xen_machphys_mapping_t = xen_machphys_mapping;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_machphys_mapping_t {
    pub p: *mut xen_machphys_mapping_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_machphys_mapping_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_machphys_mapping_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_machphys_mapping_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_machphys_mapping_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_machphys_mapping_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_machphys_mapping_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_machphys_mapping_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_machphys_mapping_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_machphys_mapping_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_machphys_mapping_t {
    pub p: *mut xen_machphys_mapping_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_machphys_mapping_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_machphys_mapping_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_machphys_mapping_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_machphys_mapping_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_machphys_mapping_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_machphys_mapping_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_machphys_mapping_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_machphys_mapping_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_machphys_mapping_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_machphys_mapping_t {
    pub p: *const xen_machphys_mapping_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_machphys_mapping_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_machphys_mapping_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_machphys_mapping_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_machphys_mapping_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_machphys_mapping_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_machphys_mapping_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_machphys_mapping_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_machphys_mapping_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_machphys_mapping_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_machphys_mapping_t {
    pub p: *const xen_machphys_mapping_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_machphys_mapping_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_machphys_mapping_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_machphys_mapping_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_machphys_mapping_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_machphys_mapping_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_machphys_mapping_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_machphys_mapping_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_machphys_mapping_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_machphys_mapping_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_add_to_physmap {
    pub domid: domid_t,
    pub size: u16,
    pub space: ::std::os::raw::c_uint,
    pub idx: xen_ulong_t,
    pub gpfn: xen_pfn_t,
}
#[test]
fn bindgen_test_layout_xen_add_to_physmap() {
    assert_eq!(
        ::std::mem::size_of::<xen_add_to_physmap>(),
        24usize,
        concat!("Size of: ", stringify!(xen_add_to_physmap))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_add_to_physmap>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_add_to_physmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_add_to_physmap>())).domid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_add_to_physmap),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_add_to_physmap>())).size as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_add_to_physmap),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_add_to_physmap>())).space as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_add_to_physmap),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_add_to_physmap>())).idx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_add_to_physmap),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_add_to_physmap>())).gpfn as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_add_to_physmap),
            "::",
            stringify!(gpfn)
        )
    );
}
pub type xen_add_to_physmap_t = xen_add_to_physmap;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_add_to_physmap_t {
    pub p: *mut xen_add_to_physmap_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_add_to_physmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_add_to_physmap_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_add_to_physmap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_add_to_physmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_add_to_physmap_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_add_to_physmap_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_add_to_physmap_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_add_to_physmap_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_add_to_physmap_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_add_to_physmap_t {
    pub p: *mut xen_add_to_physmap_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_add_to_physmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_add_to_physmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_add_to_physmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_add_to_physmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_add_to_physmap_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_add_to_physmap_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_add_to_physmap_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_add_to_physmap_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_add_to_physmap_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_add_to_physmap_t {
    pub p: *const xen_add_to_physmap_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_add_to_physmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_add_to_physmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_add_to_physmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_add_to_physmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_add_to_physmap_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_add_to_physmap_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_add_to_physmap_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_add_to_physmap_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_add_to_physmap_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_add_to_physmap_t {
    pub p: *const xen_add_to_physmap_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_add_to_physmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_add_to_physmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_add_to_physmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_add_to_physmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_add_to_physmap_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_add_to_physmap_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_add_to_physmap_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_add_to_physmap_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_add_to_physmap_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_add_to_physmap_batch {
    pub domid: domid_t,
    pub space: u16,
    pub size: u16,
    pub u: xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra,
    pub idxs: __guest_handle_64_xen_ulong_t,
    pub gpfns: __guest_handle_64_xen_pfn_t,
    pub errs: __guest_handle_64_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra {
    pub foreign_domid: domid_t,
    pub res0: u16,
}
#[test]
fn bindgen_test_layout_xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra() {
    assert_eq!(
        ::std::mem::size_of::<xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra>()))
                .foreign_domid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra),
            "::",
            stringify!(foreign_domid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra>())).res0
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_add_to_physmap_batch_xen_add_to_physmap_batch_extra),
            "::",
            stringify!(res0)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_add_to_physmap_batch() {
    assert_eq!(
        ::std::mem::size_of::<xen_add_to_physmap_batch>(),
        32usize,
        concat!("Size of: ", stringify!(xen_add_to_physmap_batch))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_add_to_physmap_batch>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_add_to_physmap_batch))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_add_to_physmap_batch>())).domid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_add_to_physmap_batch),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_add_to_physmap_batch>())).space as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_add_to_physmap_batch),
            "::",
            stringify!(space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_add_to_physmap_batch>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_add_to_physmap_batch),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_add_to_physmap_batch>())).u as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_add_to_physmap_batch),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_add_to_physmap_batch>())).idxs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_add_to_physmap_batch),
            "::",
            stringify!(idxs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_add_to_physmap_batch>())).gpfns as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_add_to_physmap_batch),
            "::",
            stringify!(gpfns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_add_to_physmap_batch>())).errs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_add_to_physmap_batch),
            "::",
            stringify!(errs)
        )
    );
}
pub type xen_add_to_physmap_batch_t = xen_add_to_physmap_batch;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_add_to_physmap_batch_t {
    pub p: *mut xen_add_to_physmap_batch_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_add_to_physmap_batch_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_add_to_physmap_batch_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_add_to_physmap_batch_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_add_to_physmap_batch_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_add_to_physmap_batch_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_add_to_physmap_batch_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_add_to_physmap_batch_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_add_to_physmap_batch_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_add_to_physmap_batch_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_add_to_physmap_batch_t {
    pub p: *mut xen_add_to_physmap_batch_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_add_to_physmap_batch_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_add_to_physmap_batch_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_add_to_physmap_batch_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_add_to_physmap_batch_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_add_to_physmap_batch_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_add_to_physmap_batch_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_add_to_physmap_batch_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_add_to_physmap_batch_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_add_to_physmap_batch_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_add_to_physmap_batch_t {
    pub p: *const xen_add_to_physmap_batch_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_add_to_physmap_batch_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_add_to_physmap_batch_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_add_to_physmap_batch_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_add_to_physmap_batch_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_add_to_physmap_batch_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_add_to_physmap_batch_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_add_to_physmap_batch_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_add_to_physmap_batch_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_add_to_physmap_batch_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_add_to_physmap_batch_t {
    pub p: *const xen_add_to_physmap_batch_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_add_to_physmap_batch_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_add_to_physmap_batch_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_add_to_physmap_batch_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_add_to_physmap_batch_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_add_to_physmap_batch_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_add_to_physmap_batch_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_add_to_physmap_batch_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_add_to_physmap_batch_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_add_to_physmap_batch_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_remove_from_physmap {
    pub domid: domid_t,
    pub gpfn: xen_pfn_t,
}
#[test]
fn bindgen_test_layout_xen_remove_from_physmap() {
    assert_eq!(
        ::std::mem::size_of::<xen_remove_from_physmap>(),
        16usize,
        concat!("Size of: ", stringify!(xen_remove_from_physmap))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_remove_from_physmap>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_remove_from_physmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_remove_from_physmap>())).domid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_remove_from_physmap),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_remove_from_physmap>())).gpfn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_remove_from_physmap),
            "::",
            stringify!(gpfn)
        )
    );
}
pub type xen_remove_from_physmap_t = xen_remove_from_physmap;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_remove_from_physmap_t {
    pub p: *mut xen_remove_from_physmap_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_remove_from_physmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_remove_from_physmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_remove_from_physmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_remove_from_physmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_remove_from_physmap_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_remove_from_physmap_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_remove_from_physmap_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_remove_from_physmap_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_remove_from_physmap_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_remove_from_physmap_t {
    pub p: *mut xen_remove_from_physmap_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_remove_from_physmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_remove_from_physmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_remove_from_physmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_remove_from_physmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_remove_from_physmap_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_remove_from_physmap_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_remove_from_physmap_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_remove_from_physmap_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_remove_from_physmap_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_remove_from_physmap_t {
    pub p: *const xen_remove_from_physmap_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_remove_from_physmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_remove_from_physmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_remove_from_physmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_remove_from_physmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_remove_from_physmap_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_remove_from_physmap_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_remove_from_physmap_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_remove_from_physmap_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_remove_from_physmap_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_remove_from_physmap_t {
    pub p: *const xen_remove_from_physmap_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_remove_from_physmap_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_remove_from_physmap_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_remove_from_physmap_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_remove_from_physmap_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_remove_from_physmap_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_remove_from_physmap_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_remove_from_physmap_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_remove_from_physmap_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_remove_from_physmap_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_memory_map {
    pub nr_entries: ::std::os::raw::c_uint,
    pub buffer: __guest_handle_64_void,
}
#[test]
fn bindgen_test_layout_xen_memory_map() {
    assert_eq!(
        ::std::mem::size_of::<xen_memory_map>(),
        16usize,
        concat!("Size of: ", stringify!(xen_memory_map))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_memory_map>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_memory_map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_memory_map>())).nr_entries as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_memory_map),
            "::",
            stringify!(nr_entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_memory_map>())).buffer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_memory_map),
            "::",
            stringify!(buffer)
        )
    );
}
pub type xen_memory_map_t = xen_memory_map;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_memory_map_t {
    pub p: *mut xen_memory_map_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_memory_map_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_memory_map_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_memory_map_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_memory_map_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_memory_map_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_memory_map_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_memory_map_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_memory_map_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_memory_map_t {
    pub p: *mut xen_memory_map_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_memory_map_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_memory_map_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_memory_map_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_memory_map_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_memory_map_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_memory_map_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_memory_map_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_memory_map_t {
    pub p: *const xen_memory_map_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_memory_map_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_memory_map_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_memory_map_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_memory_map_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_memory_map_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_memory_map_t {
    pub p: *const xen_memory_map_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_memory_map_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_memory_map_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_memory_map_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_memory_map_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_memory_map_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_foreign_memory_map {
    pub domid: domid_t,
    pub map: xen_memory_map,
}
#[test]
fn bindgen_test_layout_xen_foreign_memory_map() {
    assert_eq!(
        ::std::mem::size_of::<xen_foreign_memory_map>(),
        24usize,
        concat!("Size of: ", stringify!(xen_foreign_memory_map))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_foreign_memory_map>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_foreign_memory_map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_foreign_memory_map>())).domid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_foreign_memory_map),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_foreign_memory_map>())).map as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_foreign_memory_map),
            "::",
            stringify!(map)
        )
    );
}
pub type xen_foreign_memory_map_t = xen_foreign_memory_map;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_foreign_memory_map_t {
    pub p: *mut xen_foreign_memory_map_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_foreign_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_foreign_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_foreign_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_foreign_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_foreign_memory_map_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_foreign_memory_map_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_foreign_memory_map_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_foreign_memory_map_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_foreign_memory_map_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_foreign_memory_map_t {
    pub p: *mut xen_foreign_memory_map_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_foreign_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_foreign_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_foreign_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_foreign_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_foreign_memory_map_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_foreign_memory_map_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_foreign_memory_map_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_foreign_memory_map_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_foreign_memory_map_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_foreign_memory_map_t {
    pub p: *const xen_foreign_memory_map_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_foreign_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_foreign_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_foreign_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_foreign_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_foreign_memory_map_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_foreign_memory_map_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_foreign_memory_map_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_foreign_memory_map_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_foreign_memory_map_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_foreign_memory_map_t {
    pub p: *const xen_foreign_memory_map_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_foreign_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_foreign_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_foreign_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_foreign_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_foreign_memory_map_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_foreign_memory_map_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_foreign_memory_map_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_foreign_memory_map_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_foreign_memory_map_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_pod_target {
    pub target_pages: u64,
    pub tot_pages: u64,
    pub pod_cache_pages: u64,
    pub pod_entries: u64,
    pub domid: domid_t,
}
#[test]
fn bindgen_test_layout_xen_pod_target() {
    assert_eq!(
        ::std::mem::size_of::<xen_pod_target>(),
        40usize,
        concat!("Size of: ", stringify!(xen_pod_target))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_pod_target>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_pod_target))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_pod_target>())).target_pages as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_pod_target),
            "::",
            stringify!(target_pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_pod_target>())).tot_pages as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_pod_target),
            "::",
            stringify!(tot_pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_pod_target>())).pod_cache_pages as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_pod_target),
            "::",
            stringify!(pod_cache_pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_pod_target>())).pod_entries as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_pod_target),
            "::",
            stringify!(pod_entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_pod_target>())).domid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_pod_target),
            "::",
            stringify!(domid)
        )
    );
}
pub type xen_pod_target_t = xen_pod_target;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_paging_op {
    pub op: u8,
    pub domain: domid_t,
    pub buffer: __guest_handle_64_const_uint8,
    pub gfn: u64,
}
#[test]
fn bindgen_test_layout_xen_mem_paging_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_paging_op>(),
        24usize,
        concat!("Size of: ", stringify!(xen_mem_paging_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_paging_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_mem_paging_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_paging_op>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_paging_op),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_paging_op>())).domain as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_paging_op),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_paging_op>())).buffer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_paging_op),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_paging_op>())).gfn as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_paging_op),
            "::",
            stringify!(gfn)
        )
    );
}
pub type xen_mem_paging_op_t = xen_mem_paging_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_mem_paging_op_t {
    pub p: *mut xen_mem_paging_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_mem_paging_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_mem_paging_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_mem_paging_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_mem_paging_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_mem_paging_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_mem_paging_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_mem_paging_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_mem_paging_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_mem_paging_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_mem_paging_op_t {
    pub p: *mut xen_mem_paging_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_mem_paging_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_mem_paging_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_mem_paging_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_mem_paging_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_mem_paging_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_mem_paging_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_mem_paging_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_mem_paging_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_mem_paging_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_mem_paging_op_t {
    pub p: *const xen_mem_paging_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_mem_paging_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_mem_paging_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_mem_paging_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_mem_paging_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_mem_paging_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_mem_paging_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_mem_paging_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_mem_paging_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_mem_paging_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_mem_paging_op_t {
    pub p: *const xen_mem_paging_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_mem_paging_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_mem_paging_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_mem_paging_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_mem_paging_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_mem_paging_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_mem_paging_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_mem_paging_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_mem_paging_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_mem_paging_op_t),
            "::",
            stringify!(q)
        )
    );
}
pub const xenmem_access_t_XENMEM_access_n: xenmem_access_t = 0;
pub const xenmem_access_t_XENMEM_access_r: xenmem_access_t = 1;
pub const xenmem_access_t_XENMEM_access_w: xenmem_access_t = 2;
pub const xenmem_access_t_XENMEM_access_rw: xenmem_access_t = 3;
pub const xenmem_access_t_XENMEM_access_x: xenmem_access_t = 4;
pub const xenmem_access_t_XENMEM_access_rx: xenmem_access_t = 5;
pub const xenmem_access_t_XENMEM_access_wx: xenmem_access_t = 6;
pub const xenmem_access_t_XENMEM_access_rwx: xenmem_access_t = 7;
pub const xenmem_access_t_XENMEM_access_rx2rw: xenmem_access_t = 8;
pub const xenmem_access_t_XENMEM_access_n2rwx: xenmem_access_t = 9;
pub const xenmem_access_t_XENMEM_access_default: xenmem_access_t = 10;
pub type xenmem_access_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_access_op {
    pub op: u8,
    pub access: u8,
    pub domid: domid_t,
    pub nr: u32,
    pub pfn: u64,
    pub pfn_list: __guest_handle_64_const_uint64,
    pub access_list: __guest_handle_64_const_uint8,
}
#[test]
fn bindgen_test_layout_xen_mem_access_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_access_op>(),
        32usize,
        concat!("Size of: ", stringify!(xen_mem_access_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_access_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_mem_access_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_access_op>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_access_op),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_access_op>())).access as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_access_op),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_access_op>())).domid as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_access_op),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_access_op>())).nr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_access_op),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_access_op>())).pfn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_access_op),
            "::",
            stringify!(pfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_access_op>())).pfn_list as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_access_op),
            "::",
            stringify!(pfn_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_access_op>())).access_list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_access_op),
            "::",
            stringify!(access_list)
        )
    );
}
pub type xen_mem_access_op_t = xen_mem_access_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_mem_access_op_t {
    pub p: *mut xen_mem_access_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_mem_access_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_mem_access_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_mem_access_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_mem_access_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_mem_access_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_mem_access_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_mem_access_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_mem_access_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_mem_access_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_mem_access_op_t {
    pub p: *mut xen_mem_access_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_mem_access_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_mem_access_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_mem_access_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_mem_access_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_mem_access_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_mem_access_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_mem_access_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_mem_access_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_mem_access_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_mem_access_op_t {
    pub p: *const xen_mem_access_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_mem_access_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_mem_access_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_mem_access_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_mem_access_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_mem_access_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_mem_access_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_mem_access_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_mem_access_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_mem_access_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_mem_access_op_t {
    pub p: *const xen_mem_access_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_mem_access_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_mem_access_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_mem_access_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_mem_access_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_mem_access_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_mem_access_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_mem_access_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_mem_access_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_mem_access_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_sharing_op {
    pub op: u8,
    pub domain: domid_t,
    pub u: xen_mem_sharing_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_mem_sharing_op__bindgen_ty_1 {
    pub nominate: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate,
    pub share: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share,
    pub range: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range,
    pub debug: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug,
    pub fork: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate {
    pub u: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1,
    pub handle: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1 {
    pub gfn: u64,
    pub grant_ref: u32,
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1,
            >()))
            .gfn as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1),
            "::",
            stringify!(gfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1,
            >()))
            .grant_ref as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate__bindgen_ty_1),
            "::",
            stringify!(grant_ref)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate>())).u
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate>()))
                .handle as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_nominate),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share {
    pub source_gfn: u64,
    pub source_handle: u64,
    pub client_gfn: u64,
    pub client_handle: u64,
    pub client_domain: domid_t,
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share>()))
                .source_gfn as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share),
            "::",
            stringify!(source_gfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share>()))
                .source_handle as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share),
            "::",
            stringify!(source_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share>()))
                .client_gfn as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share),
            "::",
            stringify!(client_gfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share>()))
                .client_handle as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share),
            "::",
            stringify!(client_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share>()))
                .client_domain as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_share),
            "::",
            stringify!(client_domain)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range {
    pub first_gfn: u64,
    pub last_gfn: u64,
    pub opaque: u64,
    pub client_domain: domid_t,
    pub _pad: [u16; 3usize],
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range>()))
                .first_gfn as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range),
            "::",
            stringify!(first_gfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range>()))
                .last_gfn as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range),
            "::",
            stringify!(last_gfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range>())).opaque
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range>()))
                .client_domain as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range),
            "::",
            stringify!(client_domain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range>()))._pad
                as *const _ as usize
        },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_range),
            "::",
            stringify!(_pad)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug {
    pub u: xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1 {
    pub gfn: u64,
    pub mfn: u64,
    pub gref: u32,
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1>(
        ),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1,
            >()))
            .gfn as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1),
            "::",
            stringify!(gfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1,
            >()))
            .mfn as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1),
            "::",
            stringify!(mfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1,
            >()))
            .gref as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug__bindgen_ty_1),
            "::",
            stringify!(gref)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug>())).u
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_debug),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork {
    pub parent_domain: domid_t,
    pub flags: u16,
    pub pad: u32,
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork>()))
                .parent_domain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork),
            "::",
            stringify!(parent_domain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork>())).flags
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork>())).pad
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1_mem_sharing_op_fork),
            "::",
            stringify!(pad)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(xen_mem_sharing_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_sharing_op__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1>())).nominate as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1),
            "::",
            stringify!(nominate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1>())).share as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1),
            "::",
            stringify!(share)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1>())).range as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1>())).debug as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1),
            "::",
            stringify!(debug)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_sharing_op__bindgen_ty_1>())).fork as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op__bindgen_ty_1),
            "::",
            stringify!(fork)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_mem_sharing_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_sharing_op>(),
        48usize,
        concat!("Size of: ", stringify!(xen_mem_sharing_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_sharing_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_mem_sharing_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_sharing_op>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_sharing_op>())).domain as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_sharing_op>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_sharing_op),
            "::",
            stringify!(u)
        )
    );
}
pub type xen_mem_sharing_op_t = xen_mem_sharing_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_mem_sharing_op_t {
    pub p: *mut xen_mem_sharing_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_mem_sharing_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_mem_sharing_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_mem_sharing_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_mem_sharing_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_mem_sharing_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_mem_sharing_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_mem_sharing_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_mem_sharing_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_mem_sharing_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_mem_sharing_op_t {
    pub p: *mut xen_mem_sharing_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_mem_sharing_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_mem_sharing_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_mem_sharing_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_mem_sharing_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_mem_sharing_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_mem_sharing_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_mem_sharing_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_mem_sharing_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_mem_sharing_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_mem_sharing_op_t {
    pub p: *const xen_mem_sharing_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_mem_sharing_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_mem_sharing_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_mem_sharing_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_mem_sharing_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_mem_sharing_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_mem_sharing_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_mem_sharing_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_mem_sharing_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_mem_sharing_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_mem_sharing_op_t {
    pub p: *const xen_mem_sharing_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_mem_sharing_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_mem_sharing_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_mem_sharing_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_mem_sharing_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_mem_sharing_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_mem_sharing_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_mem_sharing_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_mem_sharing_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_mem_sharing_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_reserved_device_memory {
    pub start_pfn: xen_pfn_t,
    pub nr_pages: xen_ulong_t,
}
#[test]
fn bindgen_test_layout_xen_reserved_device_memory() {
    assert_eq!(
        ::std::mem::size_of::<xen_reserved_device_memory>(),
        16usize,
        concat!("Size of: ", stringify!(xen_reserved_device_memory))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_reserved_device_memory>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_reserved_device_memory))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_reserved_device_memory>())).start_pfn as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_reserved_device_memory),
            "::",
            stringify!(start_pfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_reserved_device_memory>())).nr_pages as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_reserved_device_memory),
            "::",
            stringify!(nr_pages)
        )
    );
}
pub type xen_reserved_device_memory_t = xen_reserved_device_memory;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_reserved_device_memory_t {
    pub p: *mut xen_reserved_device_memory_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_reserved_device_memory_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_reserved_device_memory_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_reserved_device_memory_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_reserved_device_memory_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_reserved_device_memory_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_reserved_device_memory_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_reserved_device_memory_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_reserved_device_memory_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_reserved_device_memory_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_reserved_device_memory_t {
    pub p: *mut xen_reserved_device_memory_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_reserved_device_memory_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_reserved_device_memory_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_reserved_device_memory_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_reserved_device_memory_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_reserved_device_memory_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_reserved_device_memory_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_reserved_device_memory_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_reserved_device_memory_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_reserved_device_memory_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_reserved_device_memory_t {
    pub p: *const xen_reserved_device_memory_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_reserved_device_memory_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_reserved_device_memory_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_reserved_device_memory_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_reserved_device_memory_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_reserved_device_memory_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_reserved_device_memory_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_reserved_device_memory_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_reserved_device_memory_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_reserved_device_memory_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_reserved_device_memory_t {
    pub p: *const xen_reserved_device_memory_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_reserved_device_memory_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_reserved_device_memory_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_reserved_device_memory_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_reserved_device_memory_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_reserved_device_memory_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_reserved_device_memory_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_reserved_device_memory_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_reserved_device_memory_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_reserved_device_memory_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_reserved_device_memory_map {
    pub flags: u32,
    pub nr_entries: ::std::os::raw::c_uint,
    pub buffer: __guest_handle_64_xen_reserved_device_memory_t,
    pub dev: xen_reserved_device_memory_map__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_reserved_device_memory_map__bindgen_ty_1 {
    pub pci: physdev_pci_device_t,
}
#[test]
fn bindgen_test_layout_xen_reserved_device_memory_map__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_reserved_device_memory_map__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(xen_reserved_device_memory_map__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_reserved_device_memory_map__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(xen_reserved_device_memory_map__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_reserved_device_memory_map__bindgen_ty_1>())).pci as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_reserved_device_memory_map__bindgen_ty_1),
            "::",
            stringify!(pci)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_reserved_device_memory_map() {
    assert_eq!(
        ::std::mem::size_of::<xen_reserved_device_memory_map>(),
        24usize,
        concat!("Size of: ", stringify!(xen_reserved_device_memory_map))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_reserved_device_memory_map>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_reserved_device_memory_map))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_reserved_device_memory_map>())).flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_reserved_device_memory_map),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_reserved_device_memory_map>())).nr_entries as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_reserved_device_memory_map),
            "::",
            stringify!(nr_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_reserved_device_memory_map>())).buffer as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_reserved_device_memory_map),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_reserved_device_memory_map>())).dev as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_reserved_device_memory_map),
            "::",
            stringify!(dev)
        )
    );
}
pub type xen_reserved_device_memory_map_t = xen_reserved_device_memory_map;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_reserved_device_memory_map_t {
    pub p: *mut xen_reserved_device_memory_map_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_reserved_device_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_reserved_device_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_reserved_device_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_reserved_device_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_reserved_device_memory_map_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_reserved_device_memory_map_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_reserved_device_memory_map_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_reserved_device_memory_map_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_reserved_device_memory_map_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_reserved_device_memory_map_t {
    pub p: *mut xen_reserved_device_memory_map_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_reserved_device_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_reserved_device_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_reserved_device_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_reserved_device_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_reserved_device_memory_map_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_reserved_device_memory_map_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_reserved_device_memory_map_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_reserved_device_memory_map_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_reserved_device_memory_map_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_reserved_device_memory_map_t {
    pub p: *const xen_reserved_device_memory_map_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_reserved_device_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_reserved_device_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_reserved_device_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_reserved_device_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_reserved_device_memory_map_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_reserved_device_memory_map_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_reserved_device_memory_map_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_reserved_device_memory_map_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_reserved_device_memory_map_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_reserved_device_memory_map_t {
    pub p: *const xen_reserved_device_memory_map_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_reserved_device_memory_map_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_reserved_device_memory_map_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_reserved_device_memory_map_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_reserved_device_memory_map_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_reserved_device_memory_map_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_reserved_device_memory_map_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_reserved_device_memory_map_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_reserved_device_memory_map_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_reserved_device_memory_map_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_mem_acquire_resource {
    pub domid: domid_t,
    pub type_: u16,
    pub id: u32,
    pub nr_frames: u32,
    pub pad: u32,
    pub frame: u64,
    pub frame_list: __guest_handle_64_xen_pfn_t,
}
#[test]
fn bindgen_test_layout_xen_mem_acquire_resource() {
    assert_eq!(
        ::std::mem::size_of::<xen_mem_acquire_resource>(),
        32usize,
        concat!("Size of: ", stringify!(xen_mem_acquire_resource))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_mem_acquire_resource>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_mem_acquire_resource))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_acquire_resource>())).domid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_acquire_resource),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_acquire_resource>())).type_ as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_acquire_resource),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_acquire_resource>())).id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_acquire_resource),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_acquire_resource>())).nr_frames as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_acquire_resource),
            "::",
            stringify!(nr_frames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_acquire_resource>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_acquire_resource),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_mem_acquire_resource>())).frame as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_acquire_resource),
            "::",
            stringify!(frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_mem_acquire_resource>())).frame_list as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_mem_acquire_resource),
            "::",
            stringify!(frame_list)
        )
    );
}
pub type xen_mem_acquire_resource_t = xen_mem_acquire_resource;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_mem_acquire_resource_t {
    pub p: *mut xen_mem_acquire_resource_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_mem_acquire_resource_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_mem_acquire_resource_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_mem_acquire_resource_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_mem_acquire_resource_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_mem_acquire_resource_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_mem_acquire_resource_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_mem_acquire_resource_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_mem_acquire_resource_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_mem_acquire_resource_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_mem_acquire_resource_t {
    pub p: *mut xen_mem_acquire_resource_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_mem_acquire_resource_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_mem_acquire_resource_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_mem_acquire_resource_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_mem_acquire_resource_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_mem_acquire_resource_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_mem_acquire_resource_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_mem_acquire_resource_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_mem_acquire_resource_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_mem_acquire_resource_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_mem_acquire_resource_t {
    pub p: *const xen_mem_acquire_resource_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_mem_acquire_resource_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_mem_acquire_resource_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_mem_acquire_resource_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_mem_acquire_resource_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_mem_acquire_resource_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_mem_acquire_resource_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_mem_acquire_resource_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_mem_acquire_resource_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_mem_acquire_resource_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_mem_acquire_resource_t {
    pub p: *const xen_mem_acquire_resource_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_mem_acquire_resource_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_mem_acquire_resource_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_mem_acquire_resource_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_mem_acquire_resource_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_mem_acquire_resource_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_mem_acquire_resource_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_mem_acquire_resource_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_mem_acquire_resource_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_mem_acquire_resource_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_vmemrange {
    pub start: u64,
    pub end: u64,
    pub flags: ::std::os::raw::c_uint,
    pub nid: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_xen_vmemrange() {
    assert_eq!(
        ::std::mem::size_of::<xen_vmemrange>(),
        24usize,
        concat!("Size of: ", stringify!(xen_vmemrange))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_vmemrange>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_vmemrange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_vmemrange>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vmemrange),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_vmemrange>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vmemrange),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_vmemrange>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vmemrange),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_vmemrange>())).nid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vmemrange),
            "::",
            stringify!(nid)
        )
    );
}
pub type xen_vmemrange_t = xen_vmemrange;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_vmemrange_t {
    pub p: *mut xen_vmemrange_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_vmemrange_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_vmemrange_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_vmemrange_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_vmemrange_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_vmemrange_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_vmemrange_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_vmemrange_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_vmemrange_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_vmemrange_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_vmemrange_t {
    pub p: *mut xen_vmemrange_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_vmemrange_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_vmemrange_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_vmemrange_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_vmemrange_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_vmemrange_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_vmemrange_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_vmemrange_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_vmemrange_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_vmemrange_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_vmemrange_t {
    pub p: *const xen_vmemrange_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_vmemrange_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_vmemrange_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_vmemrange_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_vmemrange_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_vmemrange_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_vmemrange_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_vmemrange_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_vmemrange_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_vmemrange_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_vmemrange_t {
    pub p: *const xen_vmemrange_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_vmemrange_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_vmemrange_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_vmemrange_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_vmemrange_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_vmemrange_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_vmemrange_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_vmemrange_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_vmemrange_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_vmemrange_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_vnuma_topology_info {
    pub domid: domid_t,
    pub pad: u16,
    pub nr_vnodes: ::std::os::raw::c_uint,
    pub nr_vcpus: ::std::os::raw::c_uint,
    pub nr_vmemranges: ::std::os::raw::c_uint,
    pub vdistance: xen_vnuma_topology_info__bindgen_ty_1,
    pub vcpu_to_vnode: xen_vnuma_topology_info__bindgen_ty_2,
    pub vmemrange: xen_vnuma_topology_info__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_vnuma_topology_info__bindgen_ty_1 {
    pub h: __guest_handle_64_uint,
    pub pad: u64,
}
#[test]
fn bindgen_test_layout_xen_vnuma_topology_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_vnuma_topology_info__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_vnuma_topology_info__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_vnuma_topology_info__bindgen_ty_1>())).h as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_1),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_vnuma_topology_info__bindgen_ty_1>())).pad as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_1),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_vnuma_topology_info__bindgen_ty_2 {
    pub h: __guest_handle_64_uint,
    pub pad: u64,
}
#[test]
fn bindgen_test_layout_xen_vnuma_topology_info__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xen_vnuma_topology_info__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_vnuma_topology_info__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_vnuma_topology_info__bindgen_ty_2>())).h as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_2),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_vnuma_topology_info__bindgen_ty_2>())).pad as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_2),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_vnuma_topology_info__bindgen_ty_3 {
    pub h: __guest_handle_64_xen_vmemrange_t,
    pub pad: u64,
}
#[test]
fn bindgen_test_layout_xen_vnuma_topology_info__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xen_vnuma_topology_info__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_vnuma_topology_info__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_vnuma_topology_info__bindgen_ty_3>())).h as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_3),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_vnuma_topology_info__bindgen_ty_3>())).pad as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vnuma_topology_info__bindgen_ty_3),
            "::",
            stringify!(pad)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_vnuma_topology_info() {
    assert_eq!(
        ::std::mem::size_of::<xen_vnuma_topology_info>(),
        40usize,
        concat!("Size of: ", stringify!(xen_vnuma_topology_info))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_vnuma_topology_info>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_vnuma_topology_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_vnuma_topology_info>())).domid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vnuma_topology_info),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_vnuma_topology_info>())).pad as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vnuma_topology_info),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_vnuma_topology_info>())).nr_vnodes as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vnuma_topology_info),
            "::",
            stringify!(nr_vnodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_vnuma_topology_info>())).nr_vcpus as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vnuma_topology_info),
            "::",
            stringify!(nr_vcpus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_vnuma_topology_info>())).nr_vmemranges as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vnuma_topology_info),
            "::",
            stringify!(nr_vmemranges)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_vnuma_topology_info>())).vdistance as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vnuma_topology_info),
            "::",
            stringify!(vdistance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_vnuma_topology_info>())).vcpu_to_vnode as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vnuma_topology_info),
            "::",
            stringify!(vcpu_to_vnode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_vnuma_topology_info>())).vmemrange as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_vnuma_topology_info),
            "::",
            stringify!(vmemrange)
        )
    );
}
pub type xen_vnuma_topology_info_t = xen_vnuma_topology_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_vnuma_topology_info_t {
    pub p: *mut xen_vnuma_topology_info_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_vnuma_topology_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_vnuma_topology_info_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_vnuma_topology_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_vnuma_topology_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_vnuma_topology_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_vnuma_topology_info_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_vnuma_topology_info_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_vnuma_topology_info_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_vnuma_topology_info_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_vnuma_topology_info_t {
    pub p: *mut xen_vnuma_topology_info_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_vnuma_topology_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_vnuma_topology_info_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_vnuma_topology_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_vnuma_topology_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_vnuma_topology_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_vnuma_topology_info_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_vnuma_topology_info_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_vnuma_topology_info_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_vnuma_topology_info_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_vnuma_topology_info_t {
    pub p: *const xen_vnuma_topology_info_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_vnuma_topology_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_vnuma_topology_info_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_vnuma_topology_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_vnuma_topology_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_vnuma_topology_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_vnuma_topology_info_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_vnuma_topology_info_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_vnuma_topology_info_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_vnuma_topology_info_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_vnuma_topology_info_t {
    pub p: *const xen_vnuma_topology_info_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_vnuma_topology_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_vnuma_topology_info_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_vnuma_topology_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_vnuma_topology_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_vnuma_topology_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_vnuma_topology_info_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_vnuma_topology_info_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_vnuma_topology_info_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_vnuma_topology_info_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_createdomain {
    pub ssidref: u32,
    pub handle: xen_domain_handle_t,
    pub flags: u32,
    pub iommu_opts: u32,
    pub max_vcpus: u32,
    pub max_evtchn_port: u32,
    pub max_grant_frames: i32,
    pub max_maptrack_frames: i32,
    pub grant_opts: u32,
    pub vmtrace_size: u32,
    pub arch: xen_arch_domainconfig,
}
#[test]
fn bindgen_test_layout_xen_domctl_createdomain() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_createdomain>(),
        64usize,
        concat!("Size of: ", stringify!(xen_domctl_createdomain))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_createdomain>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_createdomain))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_createdomain>())).ssidref as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_createdomain),
            "::",
            stringify!(ssidref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_createdomain>())).handle as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_createdomain),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_createdomain>())).flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_createdomain),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_createdomain>())).iommu_opts as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_createdomain),
            "::",
            stringify!(iommu_opts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_createdomain>())).max_vcpus as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_createdomain),
            "::",
            stringify!(max_vcpus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_createdomain>())).max_evtchn_port as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_createdomain),
            "::",
            stringify!(max_evtchn_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_createdomain>())).max_grant_frames as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_createdomain),
            "::",
            stringify!(max_grant_frames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_createdomain>())).max_maptrack_frames as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_createdomain),
            "::",
            stringify!(max_maptrack_frames)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_createdomain>())).grant_opts as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_createdomain),
            "::",
            stringify!(grant_opts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_createdomain>())).vmtrace_size as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_createdomain),
            "::",
            stringify!(vmtrace_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_createdomain>())).arch as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_createdomain),
            "::",
            stringify!(arch)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_getdomaininfo {
    pub domain: domid_t,
    pub pad1: u16,
    pub flags: u32,
    pub tot_pages: u64,
    pub max_pages: u64,
    pub outstanding_pages: u64,
    pub shr_pages: u64,
    pub paged_pages: u64,
    pub shared_info_frame: u64,
    pub cpu_time: u64,
    pub nr_online_vcpus: u32,
    pub max_vcpu_id: u32,
    pub ssidref: u32,
    pub handle: xen_domain_handle_t,
    pub cpupool: u32,
    pub gpaddr_bits: u8,
    pub pad2: [u8; 7usize],
    pub arch_config: xen_arch_domainconfig,
}
#[test]
fn bindgen_test_layout_xen_domctl_getdomaininfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_getdomaininfo>(),
        120usize,
        concat!("Size of: ", stringify!(xen_domctl_getdomaininfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_getdomaininfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_getdomaininfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).domain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).pad1 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).tot_pages as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(tot_pages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).max_pages as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(max_pages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).outstanding_pages as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(outstanding_pages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).shr_pages as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(shr_pages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).paged_pages as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(paged_pages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).shared_info_frame as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(shared_info_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).cpu_time as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(cpu_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).nr_online_vcpus as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(nr_online_vcpus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).max_vcpu_id as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(max_vcpu_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).ssidref as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(ssidref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).handle as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).cpupool as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(cpupool)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).gpaddr_bits as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(gpaddr_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).pad2 as *const _ as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_getdomaininfo>())).arch_config as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getdomaininfo),
            "::",
            stringify!(arch_config)
        )
    );
}
pub type xen_domctl_getdomaininfo_t = xen_domctl_getdomaininfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_domctl_getdomaininfo_t {
    pub p: *mut xen_domctl_getdomaininfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_domctl_getdomaininfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_domctl_getdomaininfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_domctl_getdomaininfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_domctl_getdomaininfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_domctl_getdomaininfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_domctl_getdomaininfo_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_domctl_getdomaininfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_domctl_getdomaininfo_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_domctl_getdomaininfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_domctl_getdomaininfo_t {
    pub p: *mut xen_domctl_getdomaininfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_domctl_getdomaininfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_domctl_getdomaininfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_domctl_getdomaininfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_domctl_getdomaininfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_domctl_getdomaininfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_domctl_getdomaininfo_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_domctl_getdomaininfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_domctl_getdomaininfo_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_domctl_getdomaininfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_domctl_getdomaininfo_t {
    pub p: *const xen_domctl_getdomaininfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_domctl_getdomaininfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_domctl_getdomaininfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_domctl_getdomaininfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_domctl_getdomaininfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_domctl_getdomaininfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_domctl_getdomaininfo_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_domctl_getdomaininfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_domctl_getdomaininfo_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_domctl_getdomaininfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_domctl_getdomaininfo_t {
    pub p: *const xen_domctl_getdomaininfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_domctl_getdomaininfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_domctl_getdomaininfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_domctl_getdomaininfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_domctl_getdomaininfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_domctl_getdomaininfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_domctl_getdomaininfo_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_domctl_getdomaininfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_domctl_getdomaininfo_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_domctl_getdomaininfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_getpageframeinfo3 {
    pub num: u64,
    pub array: __guest_handle_64_xen_pfn_t,
}
#[test]
fn bindgen_test_layout_xen_domctl_getpageframeinfo3() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_getpageframeinfo3>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_getpageframeinfo3))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_getpageframeinfo3>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_getpageframeinfo3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_getpageframeinfo3>())).num as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getpageframeinfo3),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_getpageframeinfo3>())).array as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getpageframeinfo3),
            "::",
            stringify!(array)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_shadow_op_stats {
    pub fault_count: u32,
    pub dirty_count: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_shadow_op_stats() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_shadow_op_stats>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_shadow_op_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_shadow_op_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_shadow_op_stats))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_shadow_op_stats>())).fault_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_shadow_op_stats),
            "::",
            stringify!(fault_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_shadow_op_stats>())).dirty_count as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_shadow_op_stats),
            "::",
            stringify!(dirty_count)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_shadow_op {
    pub op: u32,
    pub mode: u32,
    pub mb: u32,
    pub dirty_bitmap: __guest_handle_64_uint8,
    pub pages: u64,
    pub stats: xen_domctl_shadow_op_stats,
}
#[test]
fn bindgen_test_layout_xen_domctl_shadow_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_shadow_op>(),
        40usize,
        concat!("Size of: ", stringify!(xen_domctl_shadow_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_shadow_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_shadow_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_shadow_op>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_shadow_op),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_shadow_op>())).mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_shadow_op),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_shadow_op>())).mb as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_shadow_op),
            "::",
            stringify!(mb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_shadow_op>())).dirty_bitmap as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_shadow_op),
            "::",
            stringify!(dirty_bitmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_shadow_op>())).pages as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_shadow_op),
            "::",
            stringify!(pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_shadow_op>())).stats as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_shadow_op),
            "::",
            stringify!(stats)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_max_mem {
    pub max_memkb: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_max_mem() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_max_mem>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_max_mem))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_max_mem>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_max_mem))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_max_mem>())).max_memkb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_max_mem),
            "::",
            stringify!(max_memkb)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_vcpucontext {
    pub vcpu: u32,
    pub ctxt: __guest_handle_64_vcpu_guest_context_t,
}
#[test]
fn bindgen_test_layout_xen_domctl_vcpucontext() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_vcpucontext>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_vcpucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_vcpucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_vcpucontext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vcpucontext>())).vcpu as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vcpucontext),
            "::",
            stringify!(vcpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vcpucontext>())).ctxt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vcpucontext),
            "::",
            stringify!(ctxt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_getvcpuinfo {
    pub vcpu: u32,
    pub online: u8,
    pub blocked: u8,
    pub running: u8,
    pub cpu_time: u64,
    pub cpu: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_getvcpuinfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_getvcpuinfo>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_getvcpuinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_getvcpuinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_getvcpuinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_getvcpuinfo>())).vcpu as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getvcpuinfo),
            "::",
            stringify!(vcpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_getvcpuinfo>())).online as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getvcpuinfo),
            "::",
            stringify!(online)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_getvcpuinfo>())).blocked as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getvcpuinfo),
            "::",
            stringify!(blocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_getvcpuinfo>())).running as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getvcpuinfo),
            "::",
            stringify!(running)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_getvcpuinfo>())).cpu_time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getvcpuinfo),
            "::",
            stringify!(cpu_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_getvcpuinfo>())).cpu as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_getvcpuinfo),
            "::",
            stringify!(cpu)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_nodeaffinity {
    pub nodemap: xenctl_bitmap,
}
#[test]
fn bindgen_test_layout_xen_domctl_nodeaffinity() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_nodeaffinity>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_nodeaffinity))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_nodeaffinity>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_nodeaffinity))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_nodeaffinity>())).nodemap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_nodeaffinity),
            "::",
            stringify!(nodemap)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_vcpuaffinity {
    pub vcpu: u32,
    pub flags: u32,
    pub cpumap_hard: xenctl_bitmap,
    pub cpumap_soft: xenctl_bitmap,
}
#[test]
fn bindgen_test_layout_xen_domctl_vcpuaffinity() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_vcpuaffinity>(),
        40usize,
        concat!("Size of: ", stringify!(xen_domctl_vcpuaffinity))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_vcpuaffinity>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_vcpuaffinity))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vcpuaffinity>())).vcpu as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vcpuaffinity),
            "::",
            stringify!(vcpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vcpuaffinity>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vcpuaffinity),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_vcpuaffinity>())).cpumap_hard as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vcpuaffinity),
            "::",
            stringify!(cpumap_hard)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_vcpuaffinity>())).cpumap_soft as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vcpuaffinity),
            "::",
            stringify!(cpumap_soft)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_max_vcpus {
    pub max: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_max_vcpus() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_max_vcpus>(),
        4usize,
        concat!("Size of: ", stringify!(xen_domctl_max_vcpus))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_max_vcpus>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_max_vcpus))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_max_vcpus>())).max as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_max_vcpus),
            "::",
            stringify!(max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_sched_credit {
    pub weight: u16,
    pub cap: u16,
}
#[test]
fn bindgen_test_layout_xen_domctl_sched_credit() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_sched_credit>(),
        4usize,
        concat!("Size of: ", stringify!(xen_domctl_sched_credit))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_sched_credit>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_domctl_sched_credit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_sched_credit>())).weight as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_sched_credit),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_sched_credit>())).cap as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_sched_credit),
            "::",
            stringify!(cap)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_sched_credit2 {
    pub weight: u16,
    pub cap: u16,
}
#[test]
fn bindgen_test_layout_xen_domctl_sched_credit2() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_sched_credit2>(),
        4usize,
        concat!("Size of: ", stringify!(xen_domctl_sched_credit2))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_sched_credit2>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_domctl_sched_credit2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_sched_credit2>())).weight as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_sched_credit2),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_sched_credit2>())).cap as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_sched_credit2),
            "::",
            stringify!(cap)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_sched_rtds {
    pub period: u32,
    pub budget: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_sched_rtds() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_sched_rtds>(),
        12usize,
        concat!("Size of: ", stringify!(xen_domctl_sched_rtds))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_sched_rtds>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_sched_rtds))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_sched_rtds>())).period as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_sched_rtds),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_sched_rtds>())).budget as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_sched_rtds),
            "::",
            stringify!(budget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_sched_rtds>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_sched_rtds),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_schedparam_vcpu {
    pub u: xen_domctl_schedparam_vcpu__bindgen_ty_1,
    pub vcpuid: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_schedparam_vcpu__bindgen_ty_1 {
    pub credit: xen_domctl_sched_credit,
    pub credit2: xen_domctl_sched_credit2,
    pub rtds: xen_domctl_sched_rtds,
}
#[test]
fn bindgen_test_layout_xen_domctl_schedparam_vcpu__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_schedparam_vcpu__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_schedparam_vcpu__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_schedparam_vcpu__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_schedparam_vcpu__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_schedparam_vcpu__bindgen_ty_1>())).credit as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_schedparam_vcpu__bindgen_ty_1),
            "::",
            stringify!(credit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_schedparam_vcpu__bindgen_ty_1>())).credit2 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_schedparam_vcpu__bindgen_ty_1),
            "::",
            stringify!(credit2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_schedparam_vcpu__bindgen_ty_1>())).rtds as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_schedparam_vcpu__bindgen_ty_1),
            "::",
            stringify!(rtds)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_domctl_schedparam_vcpu() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_schedparam_vcpu>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_schedparam_vcpu))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_schedparam_vcpu>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_schedparam_vcpu))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_schedparam_vcpu>())).u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_schedparam_vcpu),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_schedparam_vcpu>())).vcpuid as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_schedparam_vcpu),
            "::",
            stringify!(vcpuid)
        )
    );
}
pub type xen_domctl_schedparam_vcpu_t = xen_domctl_schedparam_vcpu;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_domctl_schedparam_vcpu_t {
    pub p: *mut xen_domctl_schedparam_vcpu_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_domctl_schedparam_vcpu_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_domctl_schedparam_vcpu_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_domctl_schedparam_vcpu_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_domctl_schedparam_vcpu_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_domctl_schedparam_vcpu_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_domctl_schedparam_vcpu_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_domctl_schedparam_vcpu_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_domctl_schedparam_vcpu_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_domctl_schedparam_vcpu_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_domctl_schedparam_vcpu_t {
    pub p: *mut xen_domctl_schedparam_vcpu_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_domctl_schedparam_vcpu_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_domctl_schedparam_vcpu_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_domctl_schedparam_vcpu_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_domctl_schedparam_vcpu_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_domctl_schedparam_vcpu_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_domctl_schedparam_vcpu_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_domctl_schedparam_vcpu_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_domctl_schedparam_vcpu_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_domctl_schedparam_vcpu_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_domctl_schedparam_vcpu_t {
    pub p: *const xen_domctl_schedparam_vcpu_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_domctl_schedparam_vcpu_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_domctl_schedparam_vcpu_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_domctl_schedparam_vcpu_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_domctl_schedparam_vcpu_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_domctl_schedparam_vcpu_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_domctl_schedparam_vcpu_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_domctl_schedparam_vcpu_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_domctl_schedparam_vcpu_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_domctl_schedparam_vcpu_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_domctl_schedparam_vcpu_t {
    pub p: *const xen_domctl_schedparam_vcpu_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_domctl_schedparam_vcpu_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_domctl_schedparam_vcpu_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_domctl_schedparam_vcpu_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_domctl_schedparam_vcpu_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_domctl_schedparam_vcpu_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_domctl_schedparam_vcpu_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_domctl_schedparam_vcpu_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_domctl_schedparam_vcpu_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_domctl_schedparam_vcpu_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_scheduler_op {
    pub sched_id: u32,
    pub cmd: u32,
    pub u: xen_domctl_scheduler_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_scheduler_op__bindgen_ty_1 {
    pub credit: xen_domctl_sched_credit,
    pub credit2: xen_domctl_sched_credit2,
    pub rtds: xen_domctl_sched_rtds,
    pub v: xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1 {
    pub vcpus: __guest_handle_64_xen_domctl_schedparam_vcpu_t,
    pub nr_vcpus: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1>())).vcpus
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(vcpus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1>())).nr_vcpus
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(nr_vcpus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1>())).padding
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_scheduler_op__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(padding)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_domctl_scheduler_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_scheduler_op__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_scheduler_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_scheduler_op__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_scheduler_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_scheduler_op__bindgen_ty_1>())).credit as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_scheduler_op__bindgen_ty_1),
            "::",
            stringify!(credit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_scheduler_op__bindgen_ty_1>())).credit2 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_scheduler_op__bindgen_ty_1),
            "::",
            stringify!(credit2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_scheduler_op__bindgen_ty_1>())).rtds as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_scheduler_op__bindgen_ty_1),
            "::",
            stringify!(rtds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_scheduler_op__bindgen_ty_1>())).v as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_scheduler_op__bindgen_ty_1),
            "::",
            stringify!(v)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_domctl_scheduler_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_scheduler_op>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_scheduler_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_scheduler_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_scheduler_op))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_scheduler_op>())).sched_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_scheduler_op),
            "::",
            stringify!(sched_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_scheduler_op>())).cmd as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_scheduler_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_scheduler_op>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_scheduler_op),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_setdomainhandle {
    pub handle: xen_domain_handle_t,
}
#[test]
fn bindgen_test_layout_xen_domctl_setdomainhandle() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_setdomainhandle>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_setdomainhandle))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_setdomainhandle>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_domctl_setdomainhandle))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_setdomainhandle>())).handle as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_setdomainhandle),
            "::",
            stringify!(handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_setdebugging {
    pub enable: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_setdebugging() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_setdebugging>(),
        1usize,
        concat!("Size of: ", stringify!(xen_domctl_setdebugging))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_setdebugging>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_domctl_setdebugging))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_setdebugging>())).enable as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_setdebugging),
            "::",
            stringify!(enable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_irq_permission {
    pub pirq: u32,
    pub allow_access: u8,
    pub pad: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_xen_domctl_irq_permission() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_irq_permission>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_irq_permission))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_irq_permission>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_irq_permission))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_irq_permission>())).pirq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_irq_permission),
            "::",
            stringify!(pirq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_irq_permission>())).allow_access as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_irq_permission),
            "::",
            stringify!(allow_access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_irq_permission>())).pad as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_irq_permission),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_iomem_permission {
    pub first_mfn: u64,
    pub nr_mfns: u64,
    pub allow_access: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_iomem_permission() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_iomem_permission>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_iomem_permission))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_iomem_permission>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_iomem_permission))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_iomem_permission>())).first_mfn as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_iomem_permission),
            "::",
            stringify!(first_mfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_iomem_permission>())).nr_mfns as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_iomem_permission),
            "::",
            stringify!(nr_mfns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_iomem_permission>())).allow_access as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_iomem_permission),
            "::",
            stringify!(allow_access)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_ioport_permission {
    pub first_port: u32,
    pub nr_ports: u32,
    pub allow_access: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_ioport_permission() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_ioport_permission>(),
        12usize,
        concat!("Size of: ", stringify!(xen_domctl_ioport_permission))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_ioport_permission>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_ioport_permission))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_ioport_permission>())).first_port as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_ioport_permission),
            "::",
            stringify!(first_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_ioport_permission>())).nr_ports as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_ioport_permission),
            "::",
            stringify!(nr_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_ioport_permission>())).allow_access as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_ioport_permission),
            "::",
            stringify!(allow_access)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_hypercall_init {
    pub gmfn: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_hypercall_init() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_hypercall_init>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_hypercall_init))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_hypercall_init>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_hypercall_init))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_hypercall_init>())).gmfn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_hypercall_init),
            "::",
            stringify!(gmfn)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_settimeoffset {
    pub time_offset_seconds: i64,
}
#[test]
fn bindgen_test_layout_xen_domctl_settimeoffset() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_settimeoffset>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_settimeoffset))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_settimeoffset>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_settimeoffset))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_settimeoffset>())).time_offset_seconds as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_settimeoffset),
            "::",
            stringify!(time_offset_seconds)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_hvmcontext {
    pub size: u32,
    pub buffer: __guest_handle_64_uint8,
}
#[test]
fn bindgen_test_layout_xen_domctl_hvmcontext() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_hvmcontext>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_hvmcontext))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_hvmcontext>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_hvmcontext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_hvmcontext>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_hvmcontext),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_hvmcontext>())).buffer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_hvmcontext),
            "::",
            stringify!(buffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_address_size {
    pub size: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_address_size() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_address_size>(),
        4usize,
        concat!("Size of: ", stringify!(xen_domctl_address_size))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_address_size>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_address_size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_address_size>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_address_size),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_sendtrigger {
    pub trigger: u32,
    pub vcpu: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_sendtrigger() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_sendtrigger>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_sendtrigger))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_sendtrigger>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_sendtrigger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_sendtrigger>())).trigger as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_sendtrigger),
            "::",
            stringify!(trigger)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_sendtrigger>())).vcpu as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_sendtrigger),
            "::",
            stringify!(vcpu)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_assign_device {
    pub dev: u32,
    pub flags: u32,
    pub u: xen_domctl_assign_device__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_assign_device__bindgen_ty_1 {
    pub pci: xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1,
    pub dt: xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1 {
    pub machine_sbdf: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1>()))
                .machine_sbdf as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(machine_sbdf)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2 {
    pub size: u32,
    pub path: __guest_handle_64_char,
}
#[test]
fn bindgen_test_layout_xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2>())).size
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2>())).path
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_assign_device__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(path)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_domctl_assign_device__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_assign_device__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_assign_device__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_assign_device__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_assign_device__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_assign_device__bindgen_ty_1>())).pci as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_assign_device__bindgen_ty_1),
            "::",
            stringify!(pci)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_assign_device__bindgen_ty_1>())).dt as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_assign_device__bindgen_ty_1),
            "::",
            stringify!(dt)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_domctl_assign_device() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_assign_device>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_assign_device))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_assign_device>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_assign_device))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_assign_device>())).dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_assign_device),
            "::",
            stringify!(dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_assign_device>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_assign_device),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_assign_device>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_assign_device),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_get_device_group {
    pub machine_sbdf: u32,
    pub max_sdevs: u32,
    pub num_sdevs: u32,
    pub sdev_array: __guest_handle_64_uint32,
}
#[test]
fn bindgen_test_layout_xen_domctl_get_device_group() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_get_device_group>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_get_device_group))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_get_device_group>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_get_device_group))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_get_device_group>())).machine_sbdf as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_get_device_group),
            "::",
            stringify!(machine_sbdf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_get_device_group>())).max_sdevs as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_get_device_group),
            "::",
            stringify!(max_sdevs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_get_device_group>())).num_sdevs as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_get_device_group),
            "::",
            stringify!(num_sdevs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_get_device_group>())).sdev_array as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_get_device_group),
            "::",
            stringify!(sdev_array)
        )
    );
}
pub const pt_irq_type_PT_IRQ_TYPE_PCI: pt_irq_type = 0;
pub const pt_irq_type_PT_IRQ_TYPE_ISA: pt_irq_type = 1;
pub const pt_irq_type_PT_IRQ_TYPE_MSI: pt_irq_type = 2;
pub const pt_irq_type_PT_IRQ_TYPE_MSI_TRANSLATE: pt_irq_type = 3;
pub const pt_irq_type_PT_IRQ_TYPE_SPI: pt_irq_type = 4;
pub type pt_irq_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_bind_pt_irq {
    pub machine_irq: u32,
    pub irq_type: u32,
    pub u: xen_domctl_bind_pt_irq__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_bind_pt_irq__bindgen_ty_1 {
    pub isa: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1,
    pub pci: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2,
    pub msi: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3,
    pub spi: xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1 {
    pub isa_irq: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1>())).isa_irq
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(isa_irq)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2 {
    pub bus: u8,
    pub device: u8,
    pub intx: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2>(),
        3usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2>())).bus
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2>())).device
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2>())).intx
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(intx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3 {
    pub gvec: u8,
    pub gflags: u32,
    pub gtable: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3>())).gvec
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(gvec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3>())).gflags
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(gflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3>())).gtable
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(gtable)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4 {
    pub spi: u16,
}
#[test]
fn bindgen_test_layout_xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4>())).spi
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(spi)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_domctl_bind_pt_irq__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_bind_pt_irq__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_bind_pt_irq__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_bind_pt_irq__bindgen_ty_1>())).isa as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1),
            "::",
            stringify!(isa)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_bind_pt_irq__bindgen_ty_1>())).pci as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1),
            "::",
            stringify!(pci)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_bind_pt_irq__bindgen_ty_1>())).msi as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1),
            "::",
            stringify!(msi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_bind_pt_irq__bindgen_ty_1>())).spi as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_bind_pt_irq__bindgen_ty_1),
            "::",
            stringify!(spi)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_domctl_bind_pt_irq() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_bind_pt_irq>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_bind_pt_irq))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_bind_pt_irq>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_bind_pt_irq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_bind_pt_irq>())).machine_irq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_bind_pt_irq),
            "::",
            stringify!(machine_irq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_bind_pt_irq>())).irq_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_bind_pt_irq),
            "::",
            stringify!(irq_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_bind_pt_irq>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_bind_pt_irq),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_memory_mapping {
    pub first_gfn: u64,
    pub first_mfn: u64,
    pub nr_mfns: u64,
    pub add_mapping: u32,
    pub padding: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_memory_mapping() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_memory_mapping>(),
        32usize,
        concat!("Size of: ", stringify!(xen_domctl_memory_mapping))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_memory_mapping>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_memory_mapping))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_memory_mapping>())).first_gfn as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_memory_mapping),
            "::",
            stringify!(first_gfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_memory_mapping>())).first_mfn as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_memory_mapping),
            "::",
            stringify!(first_mfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_memory_mapping>())).nr_mfns as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_memory_mapping),
            "::",
            stringify!(nr_mfns)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_memory_mapping>())).add_mapping as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_memory_mapping),
            "::",
            stringify!(add_mapping)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_memory_mapping>())).padding as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_memory_mapping),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_ioport_mapping {
    pub first_gport: u32,
    pub first_mport: u32,
    pub nr_ports: u32,
    pub add_mapping: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_ioport_mapping() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_ioport_mapping>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_ioport_mapping))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_ioport_mapping>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_ioport_mapping))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_ioport_mapping>())).first_gport as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_ioport_mapping),
            "::",
            stringify!(first_gport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_ioport_mapping>())).first_mport as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_ioport_mapping),
            "::",
            stringify!(first_mport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_ioport_mapping>())).nr_ports as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_ioport_mapping),
            "::",
            stringify!(nr_ports)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_ioport_mapping>())).add_mapping as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_ioport_mapping),
            "::",
            stringify!(add_mapping)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_ext_vcpucontext {
    pub vcpu: u32,
    pub size: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_ext_vcpucontext() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_ext_vcpucontext>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_ext_vcpucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_ext_vcpucontext>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_ext_vcpucontext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_ext_vcpucontext>())).vcpu as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_ext_vcpucontext),
            "::",
            stringify!(vcpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_ext_vcpucontext>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_ext_vcpucontext),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_set_target {
    pub target: domid_t,
}
#[test]
fn bindgen_test_layout_xen_domctl_set_target() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_set_target>(),
        2usize,
        concat!("Size of: ", stringify!(xen_domctl_set_target))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_set_target>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_domctl_set_target))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_set_target>())).target as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_set_target),
            "::",
            stringify!(target)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_subscribe {
    pub port: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_subscribe() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_subscribe>(),
        4usize,
        concat!("Size of: ", stringify!(xen_domctl_subscribe))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_subscribe>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_subscribe))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_subscribe>())).port as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_subscribe),
            "::",
            stringify!(port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_debug_op {
    pub op: u32,
    pub vcpu: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_debug_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_debug_op>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_debug_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_debug_op>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_debug_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_debug_op>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_debug_op),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_debug_op>())).vcpu as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_debug_op),
            "::",
            stringify!(vcpu)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_hvmcontext_partial {
    pub type_: u32,
    pub instance: u32,
    pub bufsz: u64,
    pub buffer: __guest_handle_64_uint8,
}
#[test]
fn bindgen_test_layout_xen_domctl_hvmcontext_partial() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_hvmcontext_partial>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_hvmcontext_partial))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_hvmcontext_partial>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_hvmcontext_partial))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_hvmcontext_partial>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_hvmcontext_partial),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_hvmcontext_partial>())).instance as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_hvmcontext_partial),
            "::",
            stringify!(instance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_hvmcontext_partial>())).bufsz as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_hvmcontext_partial),
            "::",
            stringify!(bufsz)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_hvmcontext_partial>())).buffer as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_hvmcontext_partial),
            "::",
            stringify!(buffer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_tsc_info {
    pub tsc_mode: u32,
    pub gtsc_khz: u32,
    pub incarnation: u32,
    pub pad: u32,
    pub elapsed_nsec: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_tsc_info() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_tsc_info>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_tsc_info))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_tsc_info>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_tsc_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_tsc_info>())).tsc_mode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_tsc_info),
            "::",
            stringify!(tsc_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_tsc_info>())).gtsc_khz as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_tsc_info),
            "::",
            stringify!(gtsc_khz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_tsc_info>())).incarnation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_tsc_info),
            "::",
            stringify!(incarnation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_tsc_info>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_tsc_info),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_tsc_info>())).elapsed_nsec as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_tsc_info),
            "::",
            stringify!(elapsed_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_gdbsx_memio {
    pub pgd3val: u64,
    pub gva: u64,
    pub uva: u64,
    pub len: u32,
    pub gwr: u8,
    pub remain: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_gdbsx_memio() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_gdbsx_memio>(),
        40usize,
        concat!("Size of: ", stringify!(xen_domctl_gdbsx_memio))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_gdbsx_memio>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_gdbsx_memio))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_gdbsx_memio>())).pgd3val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_gdbsx_memio),
            "::",
            stringify!(pgd3val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_gdbsx_memio>())).gva as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_gdbsx_memio),
            "::",
            stringify!(gva)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_gdbsx_memio>())).uva as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_gdbsx_memio),
            "::",
            stringify!(uva)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_gdbsx_memio>())).len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_gdbsx_memio),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_gdbsx_memio>())).gwr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_gdbsx_memio),
            "::",
            stringify!(gwr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_gdbsx_memio>())).remain as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_gdbsx_memio),
            "::",
            stringify!(remain)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_gdbsx_pauseunp_vcpu {
    pub vcpu: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_gdbsx_pauseunp_vcpu() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_gdbsx_pauseunp_vcpu>(),
        4usize,
        concat!("Size of: ", stringify!(xen_domctl_gdbsx_pauseunp_vcpu))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_gdbsx_pauseunp_vcpu>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_gdbsx_pauseunp_vcpu))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_gdbsx_pauseunp_vcpu>())).vcpu as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_gdbsx_pauseunp_vcpu),
            "::",
            stringify!(vcpu)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_gdbsx_domstatus {
    pub paused: u8,
    pub vcpu_id: u32,
    pub vcpu_ev: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_gdbsx_domstatus() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_gdbsx_domstatus>(),
        12usize,
        concat!("Size of: ", stringify!(xen_domctl_gdbsx_domstatus))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_gdbsx_domstatus>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_gdbsx_domstatus))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_gdbsx_domstatus>())).paused as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_gdbsx_domstatus),
            "::",
            stringify!(paused)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_gdbsx_domstatus>())).vcpu_id as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_gdbsx_domstatus),
            "::",
            stringify!(vcpu_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_gdbsx_domstatus>())).vcpu_ev as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_gdbsx_domstatus),
            "::",
            stringify!(vcpu_ev)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_vm_event_op {
    pub op: u32,
    pub mode: u32,
    pub u: xen_domctl_vm_event_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_vm_event_op__bindgen_ty_1 {
    pub enable: xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1,
    pub version: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1 {
    pub port: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1>())).port
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vm_event_op__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(port)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_domctl_vm_event_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_vm_event_op__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_vm_event_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_vm_event_op__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_vm_event_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_vm_event_op__bindgen_ty_1>())).enable as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vm_event_op__bindgen_ty_1),
            "::",
            stringify!(enable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_vm_event_op__bindgen_ty_1>())).version as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vm_event_op__bindgen_ty_1),
            "::",
            stringify!(version)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_domctl_vm_event_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_vm_event_op>(),
        12usize,
        concat!("Size of: ", stringify!(xen_domctl_vm_event_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_vm_event_op>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_vm_event_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vm_event_op>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vm_event_op),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vm_event_op>())).mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vm_event_op),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vm_event_op>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vm_event_op),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_mem_sharing_op {
    pub op: u8,
    pub u: xen_domctl_mem_sharing_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_mem_sharing_op__bindgen_ty_1 {
    pub enable: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_mem_sharing_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_mem_sharing_op__bindgen_ty_1>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_mem_sharing_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_mem_sharing_op__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_mem_sharing_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_mem_sharing_op__bindgen_ty_1>())).enable as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_mem_sharing_op__bindgen_ty_1),
            "::",
            stringify!(enable)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_domctl_mem_sharing_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_mem_sharing_op>(),
        2usize,
        concat!("Size of: ", stringify!(xen_domctl_mem_sharing_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_mem_sharing_op>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_domctl_mem_sharing_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_mem_sharing_op>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_mem_sharing_op),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_mem_sharing_op>())).u as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_mem_sharing_op),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_audit_p2m {
    pub orphans: u64,
    pub m2p_bad: u64,
    pub p2m_bad: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_audit_p2m() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_audit_p2m>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_audit_p2m))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_audit_p2m>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_audit_p2m))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_audit_p2m>())).orphans as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_audit_p2m),
            "::",
            stringify!(orphans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_audit_p2m>())).m2p_bad as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_audit_p2m),
            "::",
            stringify!(m2p_bad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_audit_p2m>())).p2m_bad as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_audit_p2m),
            "::",
            stringify!(p2m_bad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_set_virq_handler {
    pub virq: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_set_virq_handler() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_set_virq_handler>(),
        4usize,
        concat!("Size of: ", stringify!(xen_domctl_set_virq_handler))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_set_virq_handler>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_set_virq_handler))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_set_virq_handler>())).virq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_set_virq_handler),
            "::",
            stringify!(virq)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_set_access_required {
    pub access_required: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_set_access_required() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_set_access_required>(),
        1usize,
        concat!("Size of: ", stringify!(xen_domctl_set_access_required))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_set_access_required>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_domctl_set_access_required))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_set_access_required>())).access_required as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_set_access_required),
            "::",
            stringify!(access_required)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_set_broken_page_p2m {
    pub pfn: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_set_broken_page_p2m() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_set_broken_page_p2m>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_set_broken_page_p2m))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_set_broken_page_p2m>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_set_broken_page_p2m))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_set_broken_page_p2m>())).pfn as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_set_broken_page_p2m),
            "::",
            stringify!(pfn)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_cacheflush {
    pub start_pfn: xen_pfn_t,
    pub nr_pfns: xen_pfn_t,
}
#[test]
fn bindgen_test_layout_xen_domctl_cacheflush() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_cacheflush>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_cacheflush))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_cacheflush>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_cacheflush))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_cacheflush>())).start_pfn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_cacheflush),
            "::",
            stringify!(start_pfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_cacheflush>())).nr_pfns as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_cacheflush),
            "::",
            stringify!(nr_pfns)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_vnuma {
    pub nr_vnodes: u32,
    pub nr_vmemranges: u32,
    pub nr_vcpus: u32,
    pub pad: u32,
    pub vdistance: __guest_handle_64_uint,
    pub vcpu_to_vnode: __guest_handle_64_uint,
    pub vnode_to_pnode: __guest_handle_64_uint,
    pub vmemrange: __guest_handle_64_xen_vmemrange_t,
}
#[test]
fn bindgen_test_layout_xen_domctl_vnuma() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_vnuma>(),
        48usize,
        concat!("Size of: ", stringify!(xen_domctl_vnuma))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_vnuma>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_vnuma))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vnuma>())).nr_vnodes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vnuma),
            "::",
            stringify!(nr_vnodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vnuma>())).nr_vmemranges as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vnuma),
            "::",
            stringify!(nr_vmemranges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vnuma>())).nr_vcpus as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vnuma),
            "::",
            stringify!(nr_vcpus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vnuma>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vnuma),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vnuma>())).vdistance as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vnuma),
            "::",
            stringify!(vdistance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vnuma>())).vcpu_to_vnode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vnuma),
            "::",
            stringify!(vcpu_to_vnode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vnuma>())).vnode_to_pnode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vnuma),
            "::",
            stringify!(vnode_to_pnode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vnuma>())).vmemrange as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vnuma),
            "::",
            stringify!(vmemrange)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_psr_cmt_op {
    pub cmd: u32,
    pub data: u32,
}
#[test]
fn bindgen_test_layout_xen_domctl_psr_cmt_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_psr_cmt_op>(),
        8usize,
        concat!("Size of: ", stringify!(xen_domctl_psr_cmt_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_psr_cmt_op>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_domctl_psr_cmt_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_psr_cmt_op>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_psr_cmt_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_psr_cmt_op>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_psr_cmt_op),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl_monitor_op {
    pub op: u32,
    pub event: u32,
    pub u: xen_domctl_monitor_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl_monitor_op__bindgen_ty_1 {
    pub mov_to_cr: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1,
    pub mov_to_msr: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2,
    pub guest_request: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3,
    pub debug_exception: xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1 {
    pub index: u8,
    pub sync: u8,
    pub onchangeonly: u8,
    pub pad1: u8,
    pub pad2: u32,
    pub bitmask: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1>())).index
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1>())).sync
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(sync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1>()))
                .onchangeonly as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(onchangeonly)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1>())).pad1
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1>())).pad2
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1>())).bitmask
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(bitmask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2 {
    pub msr: u32,
    pub onchangeonly: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2>())).msr
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(msr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2>()))
                .onchangeonly as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(onchangeonly)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3 {
    pub sync: u8,
    pub allow_userspace: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3>())).sync
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(sync)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3>()))
                .allow_userspace as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(allow_userspace)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4 {
    pub sync: u8,
}
#[test]
fn bindgen_test_layout_xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4>(),
        1usize,
        concat!(
            "Size of: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4>())).sync
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(sync)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_domctl_monitor_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_monitor_op__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_monitor_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_monitor_op__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_monitor_op__bindgen_ty_1>())).mov_to_cr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1),
            "::",
            stringify!(mov_to_cr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_monitor_op__bindgen_ty_1>())).mov_to_msr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1),
            "::",
            stringify!(mov_to_msr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_monitor_op__bindgen_ty_1>())).guest_request
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1),
            "::",
            stringify!(guest_request)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_monitor_op__bindgen_ty_1>())).debug_exception
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op__bindgen_ty_1),
            "::",
            stringify!(debug_exception)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_domctl_monitor_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_monitor_op>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_monitor_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_monitor_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_monitor_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_monitor_op>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_monitor_op>())).event as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_monitor_op>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_monitor_op),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_psr_alloc {
    pub cmd: u32,
    pub target: u32,
    pub data: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_psr_alloc() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_psr_alloc>(),
        16usize,
        concat!("Size of: ", stringify!(xen_domctl_psr_alloc))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_psr_alloc>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_psr_alloc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_psr_alloc>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_psr_alloc),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_psr_alloc>())).target as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_psr_alloc),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_psr_alloc>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_psr_alloc),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vuart_op {
    pub cmd: u32,
    pub type_: u32,
    pub gfn: u64,
    pub console_domid: domid_t,
    pub pad: [u8; 2usize],
    pub evtchn: evtchn_port_t,
}
#[test]
fn bindgen_test_layout_xen_domctl_vuart_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_vuart_op>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_vuart_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_vuart_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_vuart_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vuart_op>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vuart_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vuart_op>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vuart_op),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vuart_op>())).gfn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vuart_op),
            "::",
            stringify!(gfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl_vuart_op>())).console_domid as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vuart_op),
            "::",
            stringify!(console_domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vuart_op>())).pad as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vuart_op),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vuart_op>())).evtchn as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vuart_op),
            "::",
            stringify!(evtchn)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_domctl_vmtrace_op {
    pub cmd: u32,
    pub vcpu: u32,
    pub key: u64,
    pub value: u64,
}
#[test]
fn bindgen_test_layout_xen_domctl_vmtrace_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl_vmtrace_op>(),
        24usize,
        concat!("Size of: ", stringify!(xen_domctl_vmtrace_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl_vmtrace_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl_vmtrace_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vmtrace_op>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vmtrace_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vmtrace_op>())).vcpu as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vmtrace_op),
            "::",
            stringify!(vcpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vmtrace_op>())).key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vmtrace_op),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl_vmtrace_op>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl_vmtrace_op),
            "::",
            stringify!(value)
        )
    );
}
pub type xen_domctl_vmtrace_op_t = xen_domctl_vmtrace_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_domctl_vmtrace_op_t {
    pub p: *mut xen_domctl_vmtrace_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_domctl_vmtrace_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_domctl_vmtrace_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_domctl_vmtrace_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_domctl_vmtrace_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_domctl_vmtrace_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_domctl_vmtrace_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_domctl_vmtrace_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_domctl_vmtrace_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_domctl_vmtrace_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_domctl_vmtrace_op_t {
    pub p: *mut xen_domctl_vmtrace_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_domctl_vmtrace_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_domctl_vmtrace_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_domctl_vmtrace_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_domctl_vmtrace_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_domctl_vmtrace_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_domctl_vmtrace_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_domctl_vmtrace_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_domctl_vmtrace_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_domctl_vmtrace_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_domctl_vmtrace_op_t {
    pub p: *const xen_domctl_vmtrace_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_domctl_vmtrace_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_domctl_vmtrace_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_domctl_vmtrace_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_domctl_vmtrace_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_domctl_vmtrace_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_domctl_vmtrace_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_domctl_vmtrace_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_domctl_vmtrace_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_domctl_vmtrace_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_domctl_vmtrace_op_t {
    pub p: *const xen_domctl_vmtrace_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_domctl_vmtrace_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_domctl_vmtrace_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_domctl_vmtrace_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_domctl_vmtrace_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_domctl_vmtrace_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_domctl_vmtrace_op_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_domctl_vmtrace_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_domctl_vmtrace_op_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_domctl_vmtrace_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_domctl {
    pub cmd: u32,
    pub interface_version: u32,
    pub domain: domid_t,
    pub _pad: [u16; 3usize],
    pub u: xen_domctl__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_domctl__bindgen_ty_1 {
    pub createdomain: xen_domctl_createdomain,
    pub getdomaininfo: xen_domctl_getdomaininfo,
    pub getpageframeinfo3: xen_domctl_getpageframeinfo3,
    pub nodeaffinity: xen_domctl_nodeaffinity,
    pub vcpuaffinity: xen_domctl_vcpuaffinity,
    pub shadow_op: xen_domctl_shadow_op,
    pub max_mem: xen_domctl_max_mem,
    pub vcpucontext: xen_domctl_vcpucontext,
    pub getvcpuinfo: xen_domctl_getvcpuinfo,
    pub max_vcpus: xen_domctl_max_vcpus,
    pub scheduler_op: xen_domctl_scheduler_op,
    pub setdomainhandle: xen_domctl_setdomainhandle,
    pub setdebugging: xen_domctl_setdebugging,
    pub irq_permission: xen_domctl_irq_permission,
    pub iomem_permission: xen_domctl_iomem_permission,
    pub ioport_permission: xen_domctl_ioport_permission,
    pub hypercall_init: xen_domctl_hypercall_init,
    pub settimeoffset: xen_domctl_settimeoffset,
    pub tsc_info: xen_domctl_tsc_info,
    pub hvmcontext: xen_domctl_hvmcontext,
    pub hvmcontext_partial: xen_domctl_hvmcontext_partial,
    pub address_size: xen_domctl_address_size,
    pub sendtrigger: xen_domctl_sendtrigger,
    pub get_device_group: xen_domctl_get_device_group,
    pub assign_device: xen_domctl_assign_device,
    pub bind_pt_irq: xen_domctl_bind_pt_irq,
    pub memory_mapping: xen_domctl_memory_mapping,
    pub ioport_mapping: xen_domctl_ioport_mapping,
    pub ext_vcpucontext: xen_domctl_ext_vcpucontext,
    pub set_target: xen_domctl_set_target,
    pub subscribe: xen_domctl_subscribe,
    pub debug_op: xen_domctl_debug_op,
    pub vm_event_op: xen_domctl_vm_event_op,
    pub mem_sharing_op: xen_domctl_mem_sharing_op,
    pub access_required: xen_domctl_set_access_required,
    pub audit_p2m: xen_domctl_audit_p2m,
    pub set_virq_handler: xen_domctl_set_virq_handler,
    pub gdbsx_guest_memio: xen_domctl_gdbsx_memio,
    pub set_broken_page_p2m: xen_domctl_set_broken_page_p2m,
    pub cacheflush: xen_domctl_cacheflush,
    pub gdbsx_pauseunp_vcpu: xen_domctl_gdbsx_pauseunp_vcpu,
    pub gdbsx_domstatus: xen_domctl_gdbsx_domstatus,
    pub vnuma: xen_domctl_vnuma,
    pub psr_cmt_op: xen_domctl_psr_cmt_op,
    pub monitor_op: xen_domctl_monitor_op,
    pub psr_alloc: xen_domctl_psr_alloc,
    pub vuart_op: xen_domctl_vuart_op,
    pub vmtrace_op: xen_domctl_vmtrace_op,
    pub pad: [u8; 128usize],
}
#[test]
fn bindgen_test_layout_xen_domctl__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(xen_domctl__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).createdomain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(createdomain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).getdomaininfo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(getdomaininfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).getpageframeinfo3 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(getpageframeinfo3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).nodeaffinity as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(nodeaffinity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).vcpuaffinity as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(vcpuaffinity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).shadow_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(shadow_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).max_mem as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(max_mem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).vcpucontext as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(vcpucontext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).getvcpuinfo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(getvcpuinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).max_vcpus as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(max_vcpus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).scheduler_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(scheduler_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).setdomainhandle as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(setdomainhandle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).setdebugging as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(setdebugging)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).irq_permission as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(irq_permission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).iomem_permission as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(iomem_permission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).ioport_permission as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(ioport_permission)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).hypercall_init as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(hypercall_init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).settimeoffset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(settimeoffset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).tsc_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(tsc_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).hvmcontext as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(hvmcontext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).hvmcontext_partial as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(hvmcontext_partial)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).address_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(address_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).sendtrigger as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(sendtrigger)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).get_device_group as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(get_device_group)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).assign_device as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(assign_device)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).bind_pt_irq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(bind_pt_irq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).memory_mapping as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(memory_mapping)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).ioport_mapping as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(ioport_mapping)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).ext_vcpucontext as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(ext_vcpucontext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).set_target as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(set_target)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).subscribe as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(subscribe)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).debug_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(debug_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).vm_event_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(vm_event_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).mem_sharing_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(mem_sharing_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).access_required as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(access_required)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).audit_p2m as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(audit_p2m)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).set_virq_handler as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(set_virq_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).gdbsx_guest_memio as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(gdbsx_guest_memio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).set_broken_page_p2m as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(set_broken_page_p2m)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).cacheflush as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(cacheflush)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).gdbsx_pauseunp_vcpu as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(gdbsx_pauseunp_vcpu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).gdbsx_domstatus as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(gdbsx_domstatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).vnuma as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(vnuma)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).psr_cmt_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(psr_cmt_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).monitor_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(monitor_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).psr_alloc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(psr_alloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).vuart_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(vuart_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).vmtrace_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(vmtrace_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl__bindgen_ty_1>())).pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl__bindgen_ty_1),
            "::",
            stringify!(pad)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_domctl() {
    assert_eq!(
        ::std::mem::size_of::<xen_domctl>(),
        144usize,
        concat!("Size of: ", stringify!(xen_domctl))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_domctl>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_domctl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl>())).interface_version as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl),
            "::",
            stringify!(interface_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl>())).domain as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl>()))._pad as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_domctl>())).u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_domctl),
            "::",
            stringify!(u)
        )
    );
}
pub type xen_domctl_t = xen_domctl;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_domctl_t {
    pub p: *mut xen_domctl_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_domctl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_domctl_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_domctl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_domctl_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_domctl_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_xen_domctl_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_domctl_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_xen_domctl_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_domctl_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_domctl_t {
    pub p: *mut xen_domctl_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_domctl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_domctl_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_domctl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_domctl_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_xen_domctl_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_domctl_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_domctl_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_domctl_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_domctl_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_domctl_t {
    pub p: *const xen_domctl_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_domctl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_domctl_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_xen_domctl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_domctl_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_domctl_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_domctl_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_domctl_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_domctl_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_domctl_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_domctl_t {
    pub p: *const xen_domctl_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_domctl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_domctl_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_domctl_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_domctl_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_domctl_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_domctl_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_domctl_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_domctl_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_domctl_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_readconsole {
    pub clear: u8,
    pub incremental: u8,
    pub pad0: u8,
    pub pad1: u8,
    pub index: u32,
    pub buffer: __guest_handle_64_char,
    pub count: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_readconsole() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_readconsole>(),
        24usize,
        concat!("Size of: ", stringify!(xen_sysctl_readconsole))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_readconsole>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_readconsole))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_readconsole>())).clear as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_readconsole),
            "::",
            stringify!(clear)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_readconsole>())).incremental as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_readconsole),
            "::",
            stringify!(incremental)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_readconsole>())).pad0 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_readconsole),
            "::",
            stringify!(pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_readconsole>())).pad1 as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_readconsole),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_readconsole>())).index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_readconsole),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_readconsole>())).buffer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_readconsole),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_readconsole>())).count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_readconsole),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_tbuf_op {
    pub cmd: u32,
    pub cpu_mask: xenctl_bitmap,
    pub evt_mask: u32,
    pub buffer_mfn: u64,
    pub size: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_tbuf_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_tbuf_op>(),
        48usize,
        concat!("Size of: ", stringify!(xen_sysctl_tbuf_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_tbuf_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_tbuf_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_tbuf_op>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_tbuf_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_tbuf_op>())).cpu_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_tbuf_op),
            "::",
            stringify!(cpu_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_tbuf_op>())).evt_mask as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_tbuf_op),
            "::",
            stringify!(evt_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_tbuf_op>())).buffer_mfn as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_tbuf_op),
            "::",
            stringify!(buffer_mfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_tbuf_op>())).size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_tbuf_op),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_physinfo {
    pub threads_per_core: u32,
    pub cores_per_socket: u32,
    pub nr_cpus: u32,
    pub max_cpu_id: u32,
    pub nr_nodes: u32,
    pub max_node_id: u32,
    pub cpu_khz: u32,
    pub capabilities: u32,
    pub total_pages: u64,
    pub free_pages: u64,
    pub scrub_pages: u64,
    pub outstanding_pages: u64,
    pub max_mfn: u64,
    pub hw_cap: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_xen_sysctl_physinfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_physinfo>(),
        104usize,
        concat!("Size of: ", stringify!(xen_sysctl_physinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_physinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_physinfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_physinfo>())).threads_per_core as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_physinfo),
            "::",
            stringify!(threads_per_core)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_physinfo>())).cores_per_socket as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_physinfo),
            "::",
            stringify!(cores_per_socket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_physinfo>())).nr_cpus as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_physinfo),
            "::",
            stringify!(nr_cpus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_physinfo>())).max_cpu_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_physinfo),
            "::",
            stringify!(max_cpu_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_physinfo>())).nr_nodes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_physinfo),
            "::",
            stringify!(nr_nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_physinfo>())).max_node_id as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_physinfo),
            "::",
            stringify!(max_node_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_physinfo>())).cpu_khz as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_physinfo),
            "::",
            stringify!(cpu_khz)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_physinfo>())).capabilities as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_physinfo),
            "::",
            stringify!(capabilities)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_physinfo>())).total_pages as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_physinfo),
            "::",
            stringify!(total_pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_physinfo>())).free_pages as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_physinfo),
            "::",
            stringify!(free_pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_physinfo>())).scrub_pages as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_physinfo),
            "::",
            stringify!(scrub_pages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_physinfo>())).outstanding_pages as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_physinfo),
            "::",
            stringify!(outstanding_pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_physinfo>())).max_mfn as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_physinfo),
            "::",
            stringify!(max_mfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_physinfo>())).hw_cap as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_physinfo),
            "::",
            stringify!(hw_cap)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_sched_id {
    pub sched_id: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_sched_id() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_sched_id>(),
        4usize,
        concat!("Size of: ", stringify!(xen_sysctl_sched_id))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_sched_id>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_sysctl_sched_id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_sched_id>())).sched_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_sched_id),
            "::",
            stringify!(sched_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_perfc_desc {
    pub name: [::std::os::raw::c_char; 80usize],
    pub nr_vals: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_perfc_desc() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_perfc_desc>(),
        84usize,
        concat!("Size of: ", stringify!(xen_sysctl_perfc_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_perfc_desc>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_sysctl_perfc_desc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_perfc_desc>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_perfc_desc),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_perfc_desc>())).nr_vals as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_perfc_desc),
            "::",
            stringify!(nr_vals)
        )
    );
}
pub type xen_sysctl_perfc_desc_t = xen_sysctl_perfc_desc;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_sysctl_perfc_desc_t {
    pub p: *mut xen_sysctl_perfc_desc_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_sysctl_perfc_desc_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_sysctl_perfc_desc_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_sysctl_perfc_desc_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_sysctl_perfc_desc_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_sysctl_perfc_desc_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_sysctl_perfc_desc_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_sysctl_perfc_desc_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_sysctl_perfc_desc_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_sysctl_perfc_desc_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_sysctl_perfc_desc_t {
    pub p: *mut xen_sysctl_perfc_desc_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_sysctl_perfc_desc_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_sysctl_perfc_desc_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_sysctl_perfc_desc_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_sysctl_perfc_desc_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_sysctl_perfc_desc_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_sysctl_perfc_desc_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_sysctl_perfc_desc_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_sysctl_perfc_desc_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_sysctl_perfc_desc_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_sysctl_perfc_desc_t {
    pub p: *const xen_sysctl_perfc_desc_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_sysctl_perfc_desc_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_sysctl_perfc_desc_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_sysctl_perfc_desc_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_sysctl_perfc_desc_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_sysctl_perfc_desc_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_sysctl_perfc_desc_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_sysctl_perfc_desc_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_sysctl_perfc_desc_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_sysctl_perfc_desc_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_sysctl_perfc_desc_t {
    pub p: *const xen_sysctl_perfc_desc_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_sysctl_perfc_desc_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_sysctl_perfc_desc_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_sysctl_perfc_desc_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_sysctl_perfc_desc_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_sysctl_perfc_desc_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_sysctl_perfc_desc_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_sysctl_perfc_desc_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_sysctl_perfc_desc_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_sysctl_perfc_desc_t),
            "::",
            stringify!(q)
        )
    );
}
pub type xen_sysctl_perfc_val_t = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_sysctl_perfc_val_t {
    pub p: *mut xen_sysctl_perfc_val_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_sysctl_perfc_val_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_sysctl_perfc_val_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_sysctl_perfc_val_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_sysctl_perfc_val_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_sysctl_perfc_val_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_sysctl_perfc_val_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_sysctl_perfc_val_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_sysctl_perfc_val_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_sysctl_perfc_val_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_sysctl_perfc_val_t {
    pub p: *mut xen_sysctl_perfc_val_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_sysctl_perfc_val_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_sysctl_perfc_val_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_sysctl_perfc_val_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_sysctl_perfc_val_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_sysctl_perfc_val_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_sysctl_perfc_val_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_sysctl_perfc_val_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_sysctl_perfc_val_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_sysctl_perfc_val_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_sysctl_perfc_val_t {
    pub p: *const xen_sysctl_perfc_val_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_sysctl_perfc_val_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_sysctl_perfc_val_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_sysctl_perfc_val_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_sysctl_perfc_val_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_sysctl_perfc_val_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_sysctl_perfc_val_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_sysctl_perfc_val_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_sysctl_perfc_val_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_sysctl_perfc_val_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_sysctl_perfc_val_t {
    pub p: *const xen_sysctl_perfc_val_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_sysctl_perfc_val_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_sysctl_perfc_val_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_sysctl_perfc_val_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_sysctl_perfc_val_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_sysctl_perfc_val_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_sysctl_perfc_val_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_sysctl_perfc_val_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_sysctl_perfc_val_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_sysctl_perfc_val_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_perfc_op {
    pub cmd: u32,
    pub nr_counters: u32,
    pub nr_vals: u32,
    pub desc: __guest_handle_64_xen_sysctl_perfc_desc_t,
    pub val: __guest_handle_64_xen_sysctl_perfc_val_t,
}
#[test]
fn bindgen_test_layout_xen_sysctl_perfc_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_perfc_op>(),
        32usize,
        concat!("Size of: ", stringify!(xen_sysctl_perfc_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_perfc_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_perfc_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_perfc_op>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_perfc_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_perfc_op>())).nr_counters as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_perfc_op),
            "::",
            stringify!(nr_counters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_perfc_op>())).nr_vals as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_perfc_op),
            "::",
            stringify!(nr_vals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_perfc_op>())).desc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_perfc_op),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_perfc_op>())).val as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_perfc_op),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_getdomaininfolist {
    pub first_domain: domid_t,
    pub max_domains: u32,
    pub buffer: __guest_handle_64_xen_domctl_getdomaininfo_t,
    pub num_domains: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_getdomaininfolist() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_getdomaininfolist>(),
        24usize,
        concat!("Size of: ", stringify!(xen_sysctl_getdomaininfolist))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_getdomaininfolist>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_getdomaininfolist))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_getdomaininfolist>())).first_domain as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_getdomaininfolist),
            "::",
            stringify!(first_domain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_getdomaininfolist>())).max_domains as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_getdomaininfolist),
            "::",
            stringify!(max_domains)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_getdomaininfolist>())).buffer as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_getdomaininfolist),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_getdomaininfolist>())).num_domains as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_getdomaininfolist),
            "::",
            stringify!(num_domains)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_debug_keys {
    pub keys: __guest_handle_64_const_char,
    pub nr_keys: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_debug_keys() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_debug_keys>(),
        16usize,
        concat!("Size of: ", stringify!(xen_sysctl_debug_keys))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_debug_keys>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_debug_keys))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_debug_keys>())).keys as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_debug_keys),
            "::",
            stringify!(keys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_debug_keys>())).nr_keys as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_debug_keys),
            "::",
            stringify!(nr_keys)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cpuinfo {
    pub idletime: u64,
}
#[test]
fn bindgen_test_layout_xen_sysctl_cpuinfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_cpuinfo>(),
        8usize,
        concat!("Size of: ", stringify!(xen_sysctl_cpuinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_cpuinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_cpuinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_cpuinfo>())).idletime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cpuinfo),
            "::",
            stringify!(idletime)
        )
    );
}
pub type xen_sysctl_cpuinfo_t = xen_sysctl_cpuinfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_sysctl_cpuinfo_t {
    pub p: *mut xen_sysctl_cpuinfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_sysctl_cpuinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_sysctl_cpuinfo_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_sysctl_cpuinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_sysctl_cpuinfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_sysctl_cpuinfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_sysctl_cpuinfo_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_sysctl_cpuinfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_sysctl_cpuinfo_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_sysctl_cpuinfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_sysctl_cpuinfo_t {
    pub p: *mut xen_sysctl_cpuinfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_sysctl_cpuinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_sysctl_cpuinfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_sysctl_cpuinfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_sysctl_cpuinfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_sysctl_cpuinfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_sysctl_cpuinfo_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_sysctl_cpuinfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_sysctl_cpuinfo_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_sysctl_cpuinfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_sysctl_cpuinfo_t {
    pub p: *const xen_sysctl_cpuinfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_sysctl_cpuinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_sysctl_cpuinfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_sysctl_cpuinfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_sysctl_cpuinfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_sysctl_cpuinfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_sysctl_cpuinfo_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_sysctl_cpuinfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_sysctl_cpuinfo_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_sysctl_cpuinfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_sysctl_cpuinfo_t {
    pub p: *const xen_sysctl_cpuinfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_sysctl_cpuinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_sysctl_cpuinfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_sysctl_cpuinfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_sysctl_cpuinfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_sysctl_cpuinfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_sysctl_cpuinfo_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_sysctl_cpuinfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_sysctl_cpuinfo_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_sysctl_cpuinfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_getcpuinfo {
    pub max_cpus: u32,
    pub info: __guest_handle_64_xen_sysctl_cpuinfo_t,
    pub nr_cpus: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_getcpuinfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_getcpuinfo>(),
        24usize,
        concat!("Size of: ", stringify!(xen_sysctl_getcpuinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_getcpuinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_getcpuinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_getcpuinfo>())).max_cpus as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_getcpuinfo),
            "::",
            stringify!(max_cpus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_getcpuinfo>())).info as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_getcpuinfo),
            "::",
            stringify!(info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_getcpuinfo>())).nr_cpus as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_getcpuinfo),
            "::",
            stringify!(nr_cpus)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_availheap {
    pub min_bitwidth: u32,
    pub max_bitwidth: u32,
    pub node: i32,
    pub avail_bytes: u64,
}
#[test]
fn bindgen_test_layout_xen_sysctl_availheap() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_availheap>(),
        24usize,
        concat!("Size of: ", stringify!(xen_sysctl_availheap))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_availheap>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_availheap))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_availheap>())).min_bitwidth as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_availheap),
            "::",
            stringify!(min_bitwidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_availheap>())).max_bitwidth as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_availheap),
            "::",
            stringify!(max_bitwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_availheap>())).node as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_availheap),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_availheap>())).avail_bytes as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_availheap),
            "::",
            stringify!(avail_bytes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pm_px_val {
    pub freq: u64,
    pub residency: u64,
    pub count: u64,
}
#[test]
fn bindgen_test_layout_pm_px_val() {
    assert_eq!(
        ::std::mem::size_of::<pm_px_val>(),
        24usize,
        concat!("Size of: ", stringify!(pm_px_val))
    );
    assert_eq!(
        ::std::mem::align_of::<pm_px_val>(),
        8usize,
        concat!("Alignment of ", stringify!(pm_px_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_px_val>())).freq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_px_val),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_px_val>())).residency as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_px_val),
            "::",
            stringify!(residency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_px_val>())).count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_px_val),
            "::",
            stringify!(count)
        )
    );
}
pub type pm_px_val_t = pm_px_val;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_pm_px_val_t {
    pub p: *mut pm_px_val_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_pm_px_val_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_pm_px_val_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_pm_px_val_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_pm_px_val_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_pm_px_val_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_pm_px_val_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_pm_px_val_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_pm_px_val_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_pm_px_val_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_pm_px_val_t {
    pub p: *mut pm_px_val_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_pm_px_val_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_pm_px_val_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_pm_px_val_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_pm_px_val_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_pm_px_val_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_pm_px_val_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_pm_px_val_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_64_pm_px_val_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_pm_px_val_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_pm_px_val_t {
    pub p: *const pm_px_val_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_pm_px_val_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_pm_px_val_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_pm_px_val_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_pm_px_val_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_pm_px_val_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_pm_px_val_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_pm_px_val_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_pm_px_val_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_pm_px_val_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_pm_px_val_t {
    pub p: *const pm_px_val_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_pm_px_val_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_pm_px_val_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_const_pm_px_val_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_pm_px_val_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_pm_px_val_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_pm_px_val_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_pm_px_val_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_pm_px_val_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_pm_px_val_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pm_px_stat {
    pub total: u8,
    pub usable: u8,
    pub last: u8,
    pub cur: u8,
    pub trans_pt: __guest_handle_64_uint64,
    pub pt: __guest_handle_64_pm_px_val_t,
}
#[test]
fn bindgen_test_layout_pm_px_stat() {
    assert_eq!(
        ::std::mem::size_of::<pm_px_stat>(),
        24usize,
        concat!("Size of: ", stringify!(pm_px_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<pm_px_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(pm_px_stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_px_stat>())).total as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_px_stat),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_px_stat>())).usable as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_px_stat),
            "::",
            stringify!(usable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_px_stat>())).last as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_px_stat),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_px_stat>())).cur as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_px_stat),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_px_stat>())).trans_pt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_px_stat),
            "::",
            stringify!(trans_pt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_px_stat>())).pt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_px_stat),
            "::",
            stringify!(pt)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pm_cx_stat {
    pub nr: u32,
    pub last: u32,
    pub idle_time: u64,
    pub triggers: __guest_handle_64_uint64,
    pub residencies: __guest_handle_64_uint64,
    pub nr_pc: u32,
    pub nr_cc: u32,
    pub pc: __guest_handle_64_uint64,
    pub cc: __guest_handle_64_uint64,
}
#[test]
fn bindgen_test_layout_pm_cx_stat() {
    assert_eq!(
        ::std::mem::size_of::<pm_cx_stat>(),
        56usize,
        concat!("Size of: ", stringify!(pm_cx_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<pm_cx_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(pm_cx_stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_cx_stat>())).nr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_cx_stat),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_cx_stat>())).last as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_cx_stat),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_cx_stat>())).idle_time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_cx_stat),
            "::",
            stringify!(idle_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_cx_stat>())).triggers as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_cx_stat),
            "::",
            stringify!(triggers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_cx_stat>())).residencies as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_cx_stat),
            "::",
            stringify!(residencies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_cx_stat>())).nr_pc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_cx_stat),
            "::",
            stringify!(nr_pc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_cx_stat>())).nr_cc as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_cx_stat),
            "::",
            stringify!(nr_cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_cx_stat>())).pc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_cx_stat),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pm_cx_stat>())).cc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pm_cx_stat),
            "::",
            stringify!(cc)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_get_pmstat {
    pub type_: u32,
    pub cpuid: u32,
    pub u: xen_sysctl_get_pmstat__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_get_pmstat__bindgen_ty_1 {
    pub getpx: pm_px_stat,
    pub getcx: pm_cx_stat,
}
#[test]
fn bindgen_test_layout_xen_sysctl_get_pmstat__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_get_pmstat__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(xen_sysctl_get_pmstat__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_get_pmstat__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_get_pmstat__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_get_pmstat__bindgen_ty_1>())).getpx as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_get_pmstat__bindgen_ty_1),
            "::",
            stringify!(getpx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_get_pmstat__bindgen_ty_1>())).getcx as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_get_pmstat__bindgen_ty_1),
            "::",
            stringify!(getcx)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_sysctl_get_pmstat() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_get_pmstat>(),
        64usize,
        concat!("Size of: ", stringify!(xen_sysctl_get_pmstat))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_get_pmstat>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_get_pmstat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_get_pmstat>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_get_pmstat),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_get_pmstat>())).cpuid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_get_pmstat),
            "::",
            stringify!(cpuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_get_pmstat>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_get_pmstat),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cpu_hotplug {
    pub cpu: u32,
    pub op: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_cpu_hotplug() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_cpu_hotplug>(),
        8usize,
        concat!("Size of: ", stringify!(xen_sysctl_cpu_hotplug))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_cpu_hotplug>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_sysctl_cpu_hotplug))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_cpu_hotplug>())).cpu as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cpu_hotplug),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_cpu_hotplug>())).op as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cpu_hotplug),
            "::",
            stringify!(op)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_userspace {
    pub scaling_setspeed: u32,
}
#[test]
fn bindgen_test_layout_xen_userspace() {
    assert_eq!(
        ::std::mem::size_of::<xen_userspace>(),
        4usize,
        concat!("Size of: ", stringify!(xen_userspace))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_userspace>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_userspace))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_userspace>())).scaling_setspeed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_userspace),
            "::",
            stringify!(scaling_setspeed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_ondemand {
    pub sampling_rate_max: u32,
    pub sampling_rate_min: u32,
    pub sampling_rate: u32,
    pub up_threshold: u32,
}
#[test]
fn bindgen_test_layout_xen_ondemand() {
    assert_eq!(
        ::std::mem::size_of::<xen_ondemand>(),
        16usize,
        concat!("Size of: ", stringify!(xen_ondemand))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_ondemand>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_ondemand))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_ondemand>())).sampling_rate_max as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_ondemand),
            "::",
            stringify!(sampling_rate_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_ondemand>())).sampling_rate_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_ondemand),
            "::",
            stringify!(sampling_rate_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_ondemand>())).sampling_rate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_ondemand),
            "::",
            stringify!(sampling_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_ondemand>())).up_threshold as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_ondemand),
            "::",
            stringify!(up_threshold)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_get_cpufreq_para {
    pub cpu_num: u32,
    pub freq_num: u32,
    pub gov_num: u32,
    pub affected_cpus: __guest_handle_64_uint32,
    pub scaling_available_frequencies: __guest_handle_64_uint32,
    pub scaling_available_governors: __guest_handle_64_char,
    pub scaling_driver: [::std::os::raw::c_char; 16usize],
    pub cpuinfo_cur_freq: u32,
    pub cpuinfo_max_freq: u32,
    pub cpuinfo_min_freq: u32,
    pub scaling_cur_freq: u32,
    pub scaling_governor: [::std::os::raw::c_char; 16usize],
    pub scaling_max_freq: u32,
    pub scaling_min_freq: u32,
    pub u: xen_get_cpufreq_para__bindgen_ty_1,
    pub turbo_enabled: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_get_cpufreq_para__bindgen_ty_1 {
    pub userspace: xen_userspace,
    pub ondemand: xen_ondemand,
}
#[test]
fn bindgen_test_layout_xen_get_cpufreq_para__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_get_cpufreq_para__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(xen_get_cpufreq_para__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_get_cpufreq_para__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_get_cpufreq_para__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_get_cpufreq_para__bindgen_ty_1>())).userspace as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para__bindgen_ty_1),
            "::",
            stringify!(userspace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_get_cpufreq_para__bindgen_ty_1>())).ondemand as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para__bindgen_ty_1),
            "::",
            stringify!(ondemand)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_get_cpufreq_para() {
    assert_eq!(
        ::std::mem::size_of::<xen_get_cpufreq_para>(),
        120usize,
        concat!("Size of: ", stringify!(xen_get_cpufreq_para))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_get_cpufreq_para>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_get_cpufreq_para))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_get_cpufreq_para>())).cpu_num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para),
            "::",
            stringify!(cpu_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_get_cpufreq_para>())).freq_num as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para),
            "::",
            stringify!(freq_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_get_cpufreq_para>())).gov_num as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para),
            "::",
            stringify!(gov_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_get_cpufreq_para>())).affected_cpus as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para),
            "::",
            stringify!(affected_cpus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_get_cpufreq_para>())).scaling_available_frequencies
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para),
            "::",
            stringify!(scaling_available_frequencies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_get_cpufreq_para>())).scaling_available_governors as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para),
            "::",
            stringify!(scaling_available_governors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_get_cpufreq_para>())).scaling_driver as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para),
            "::",
            stringify!(scaling_driver)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_get_cpufreq_para>())).cpuinfo_cur_freq as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para),
            "::",
            stringify!(cpuinfo_cur_freq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_get_cpufreq_para>())).cpuinfo_max_freq as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para),
            "::",
            stringify!(cpuinfo_max_freq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_get_cpufreq_para>())).cpuinfo_min_freq as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para),
            "::",
            stringify!(cpuinfo_min_freq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_get_cpufreq_para>())).scaling_cur_freq as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para),
            "::",
            stringify!(scaling_cur_freq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_get_cpufreq_para>())).scaling_governor as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para),
            "::",
            stringify!(scaling_governor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_get_cpufreq_para>())).scaling_max_freq as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para),
            "::",
            stringify!(scaling_max_freq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_get_cpufreq_para>())).scaling_min_freq as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para),
            "::",
            stringify!(scaling_min_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_get_cpufreq_para>())).u as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_get_cpufreq_para>())).turbo_enabled as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_get_cpufreq_para),
            "::",
            stringify!(turbo_enabled)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_set_cpufreq_gov {
    pub scaling_governor: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_xen_set_cpufreq_gov() {
    assert_eq!(
        ::std::mem::size_of::<xen_set_cpufreq_gov>(),
        16usize,
        concat!("Size of: ", stringify!(xen_set_cpufreq_gov))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_set_cpufreq_gov>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_set_cpufreq_gov))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_set_cpufreq_gov>())).scaling_governor as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_set_cpufreq_gov),
            "::",
            stringify!(scaling_governor)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_set_cpufreq_para {
    pub ctrl_type: u32,
    pub ctrl_value: u32,
}
#[test]
fn bindgen_test_layout_xen_set_cpufreq_para() {
    assert_eq!(
        ::std::mem::size_of::<xen_set_cpufreq_para>(),
        8usize,
        concat!("Size of: ", stringify!(xen_set_cpufreq_para))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_set_cpufreq_para>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_set_cpufreq_para))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_set_cpufreq_para>())).ctrl_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_set_cpufreq_para),
            "::",
            stringify!(ctrl_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_set_cpufreq_para>())).ctrl_value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_set_cpufreq_para),
            "::",
            stringify!(ctrl_value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_pm_op {
    pub cmd: u32,
    pub cpuid: u32,
    pub u: xen_sysctl_pm_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_pm_op__bindgen_ty_1 {
    pub get_para: xen_get_cpufreq_para,
    pub set_gov: xen_set_cpufreq_gov,
    pub set_para: xen_set_cpufreq_para,
    pub get_avgfreq: u64,
    pub set_sched_opt_smt: u32,
    pub get_max_cstate: u32,
    pub set_max_cstate: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_pm_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_pm_op__bindgen_ty_1>(),
        120usize,
        concat!("Size of: ", stringify!(xen_sysctl_pm_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_pm_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_pm_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_pm_op__bindgen_ty_1>())).get_para as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_pm_op__bindgen_ty_1),
            "::",
            stringify!(get_para)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_pm_op__bindgen_ty_1>())).set_gov as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_pm_op__bindgen_ty_1),
            "::",
            stringify!(set_gov)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_pm_op__bindgen_ty_1>())).set_para as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_pm_op__bindgen_ty_1),
            "::",
            stringify!(set_para)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_pm_op__bindgen_ty_1>())).get_avgfreq as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_pm_op__bindgen_ty_1),
            "::",
            stringify!(get_avgfreq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_pm_op__bindgen_ty_1>())).set_sched_opt_smt as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_pm_op__bindgen_ty_1),
            "::",
            stringify!(set_sched_opt_smt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_pm_op__bindgen_ty_1>())).get_max_cstate as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_pm_op__bindgen_ty_1),
            "::",
            stringify!(get_max_cstate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_pm_op__bindgen_ty_1>())).set_max_cstate as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_pm_op__bindgen_ty_1),
            "::",
            stringify!(set_max_cstate)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_sysctl_pm_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_pm_op>(),
        128usize,
        concat!("Size of: ", stringify!(xen_sysctl_pm_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_pm_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_pm_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_pm_op>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_pm_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_pm_op>())).cpuid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_pm_op),
            "::",
            stringify!(cpuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_pm_op>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_pm_op),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_page_offline_op {
    pub cmd: u32,
    pub start: u32,
    pub end: u32,
    pub status: __guest_handle_64_uint32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_page_offline_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_page_offline_op>(),
        24usize,
        concat!("Size of: ", stringify!(xen_sysctl_page_offline_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_page_offline_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_page_offline_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_page_offline_op>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_page_offline_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_page_offline_op>())).start as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_page_offline_op),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_page_offline_op>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_page_offline_op),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_page_offline_op>())).status as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_page_offline_op),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_lockprof_data {
    pub name: [::std::os::raw::c_char; 40usize],
    pub type_: i32,
    pub idx: i32,
    pub lock_cnt: u64,
    pub block_cnt: u64,
    pub lock_time: u64,
    pub block_time: u64,
}
#[test]
fn bindgen_test_layout_xen_sysctl_lockprof_data() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_lockprof_data>(),
        80usize,
        concat!("Size of: ", stringify!(xen_sysctl_lockprof_data))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_lockprof_data>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_lockprof_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_lockprof_data>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_lockprof_data),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_lockprof_data>())).type_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_lockprof_data),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_lockprof_data>())).idx as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_lockprof_data),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_lockprof_data>())).lock_cnt as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_lockprof_data),
            "::",
            stringify!(lock_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_lockprof_data>())).block_cnt as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_lockprof_data),
            "::",
            stringify!(block_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_lockprof_data>())).lock_time as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_lockprof_data),
            "::",
            stringify!(lock_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_lockprof_data>())).block_time as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_lockprof_data),
            "::",
            stringify!(block_time)
        )
    );
}
pub type xen_sysctl_lockprof_data_t = xen_sysctl_lockprof_data;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_sysctl_lockprof_data_t {
    pub p: *mut xen_sysctl_lockprof_data_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_sysctl_lockprof_data_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_sysctl_lockprof_data_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_sysctl_lockprof_data_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_sysctl_lockprof_data_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_sysctl_lockprof_data_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_sysctl_lockprof_data_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_sysctl_lockprof_data_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_sysctl_lockprof_data_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_sysctl_lockprof_data_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_sysctl_lockprof_data_t {
    pub p: *mut xen_sysctl_lockprof_data_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_sysctl_lockprof_data_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_sysctl_lockprof_data_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_sysctl_lockprof_data_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_sysctl_lockprof_data_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_sysctl_lockprof_data_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_sysctl_lockprof_data_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_sysctl_lockprof_data_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_sysctl_lockprof_data_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_sysctl_lockprof_data_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_sysctl_lockprof_data_t {
    pub p: *const xen_sysctl_lockprof_data_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_sysctl_lockprof_data_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_sysctl_lockprof_data_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_sysctl_lockprof_data_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_sysctl_lockprof_data_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_sysctl_lockprof_data_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_sysctl_lockprof_data_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_sysctl_lockprof_data_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_sysctl_lockprof_data_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_sysctl_lockprof_data_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_sysctl_lockprof_data_t {
    pub p: *const xen_sysctl_lockprof_data_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_sysctl_lockprof_data_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_sysctl_lockprof_data_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_sysctl_lockprof_data_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_sysctl_lockprof_data_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_sysctl_lockprof_data_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_sysctl_lockprof_data_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_sysctl_lockprof_data_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_sysctl_lockprof_data_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_sysctl_lockprof_data_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_lockprof_op {
    pub cmd: u32,
    pub max_elem: u32,
    pub nr_elem: u32,
    pub time: u64,
    pub data: __guest_handle_64_xen_sysctl_lockprof_data_t,
}
#[test]
fn bindgen_test_layout_xen_sysctl_lockprof_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_lockprof_op>(),
        32usize,
        concat!("Size of: ", stringify!(xen_sysctl_lockprof_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_lockprof_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_lockprof_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_lockprof_op>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_lockprof_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_lockprof_op>())).max_elem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_lockprof_op),
            "::",
            stringify!(max_elem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_lockprof_op>())).nr_elem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_lockprof_op),
            "::",
            stringify!(nr_elem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_lockprof_op>())).time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_lockprof_op),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_lockprof_op>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_lockprof_op),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cputopo {
    pub core: u32,
    pub socket: u32,
    pub node: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_cputopo() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_cputopo>(),
        12usize,
        concat!("Size of: ", stringify!(xen_sysctl_cputopo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_cputopo>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_sysctl_cputopo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_cputopo>())).core as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cputopo),
            "::",
            stringify!(core)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_cputopo>())).socket as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cputopo),
            "::",
            stringify!(socket)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_cputopo>())).node as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cputopo),
            "::",
            stringify!(node)
        )
    );
}
pub type xen_sysctl_cputopo_t = xen_sysctl_cputopo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_sysctl_cputopo_t {
    pub p: *mut xen_sysctl_cputopo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_sysctl_cputopo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_sysctl_cputopo_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_sysctl_cputopo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_sysctl_cputopo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_sysctl_cputopo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_sysctl_cputopo_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_sysctl_cputopo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_sysctl_cputopo_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_sysctl_cputopo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_sysctl_cputopo_t {
    pub p: *mut xen_sysctl_cputopo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_sysctl_cputopo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_sysctl_cputopo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_sysctl_cputopo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_sysctl_cputopo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_sysctl_cputopo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_sysctl_cputopo_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_sysctl_cputopo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_sysctl_cputopo_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_sysctl_cputopo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_sysctl_cputopo_t {
    pub p: *const xen_sysctl_cputopo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_sysctl_cputopo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_sysctl_cputopo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_sysctl_cputopo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_sysctl_cputopo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_sysctl_cputopo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_sysctl_cputopo_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_sysctl_cputopo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_sysctl_cputopo_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_sysctl_cputopo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_sysctl_cputopo_t {
    pub p: *const xen_sysctl_cputopo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_sysctl_cputopo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_sysctl_cputopo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_sysctl_cputopo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_sysctl_cputopo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_sysctl_cputopo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_sysctl_cputopo_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_sysctl_cputopo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_sysctl_cputopo_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_sysctl_cputopo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_cputopoinfo {
    pub num_cpus: u32,
    pub cputopo: __guest_handle_64_xen_sysctl_cputopo_t,
}
#[test]
fn bindgen_test_layout_xen_sysctl_cputopoinfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_cputopoinfo>(),
        16usize,
        concat!("Size of: ", stringify!(xen_sysctl_cputopoinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_cputopoinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_cputopoinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_cputopoinfo>())).num_cpus as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cputopoinfo),
            "::",
            stringify!(num_cpus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_cputopoinfo>())).cputopo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cputopoinfo),
            "::",
            stringify!(cputopo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_meminfo {
    pub memsize: u64,
    pub memfree: u64,
}
#[test]
fn bindgen_test_layout_xen_sysctl_meminfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_meminfo>(),
        16usize,
        concat!("Size of: ", stringify!(xen_sysctl_meminfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_meminfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_meminfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_meminfo>())).memsize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_meminfo),
            "::",
            stringify!(memsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_meminfo>())).memfree as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_meminfo),
            "::",
            stringify!(memfree)
        )
    );
}
pub type xen_sysctl_meminfo_t = xen_sysctl_meminfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_sysctl_meminfo_t {
    pub p: *mut xen_sysctl_meminfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_sysctl_meminfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_sysctl_meminfo_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_sysctl_meminfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_sysctl_meminfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_sysctl_meminfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_sysctl_meminfo_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_sysctl_meminfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_sysctl_meminfo_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_sysctl_meminfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_sysctl_meminfo_t {
    pub p: *mut xen_sysctl_meminfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_sysctl_meminfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_sysctl_meminfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_sysctl_meminfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_sysctl_meminfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_sysctl_meminfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_sysctl_meminfo_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_sysctl_meminfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_sysctl_meminfo_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_sysctl_meminfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_sysctl_meminfo_t {
    pub p: *const xen_sysctl_meminfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_sysctl_meminfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_sysctl_meminfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_sysctl_meminfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_sysctl_meminfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_sysctl_meminfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_sysctl_meminfo_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_sysctl_meminfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_sysctl_meminfo_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_sysctl_meminfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_sysctl_meminfo_t {
    pub p: *const xen_sysctl_meminfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_sysctl_meminfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_sysctl_meminfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_sysctl_meminfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_sysctl_meminfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_sysctl_meminfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_sysctl_meminfo_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_sysctl_meminfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_sysctl_meminfo_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_sysctl_meminfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_numainfo {
    pub num_nodes: u32,
    pub meminfo: __guest_handle_64_xen_sysctl_meminfo_t,
    pub distance: __guest_handle_64_uint32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_numainfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_numainfo>(),
        24usize,
        concat!("Size of: ", stringify!(xen_sysctl_numainfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_numainfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_numainfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_numainfo>())).num_nodes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_numainfo),
            "::",
            stringify!(num_nodes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_numainfo>())).meminfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_numainfo),
            "::",
            stringify!(meminfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_numainfo>())).distance as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_numainfo),
            "::",
            stringify!(distance)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_cpupool_op {
    pub op: u32,
    pub cpupool_id: u32,
    pub sched_id: u32,
    pub domid: u32,
    pub cpu: u32,
    pub n_dom: u32,
    pub cpumap: xenctl_bitmap,
}
#[test]
fn bindgen_test_layout_xen_sysctl_cpupool_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_cpupool_op>(),
        40usize,
        concat!("Size of: ", stringify!(xen_sysctl_cpupool_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_cpupool_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_cpupool_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_cpupool_op>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cpupool_op),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_cpupool_op>())).cpupool_id as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cpupool_op),
            "::",
            stringify!(cpupool_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_cpupool_op>())).sched_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cpupool_op),
            "::",
            stringify!(sched_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_cpupool_op>())).domid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cpupool_op),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_cpupool_op>())).cpu as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cpupool_op),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_cpupool_op>())).n_dom as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cpupool_op),
            "::",
            stringify!(n_dom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_cpupool_op>())).cpumap as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cpupool_op),
            "::",
            stringify!(cpumap)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_arinc653_schedule {
    pub major_frame: u64,
    pub num_sched_entries: u8,
    pub sched_entries: [xen_sysctl_arinc653_schedule__bindgen_ty_1; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_arinc653_schedule__bindgen_ty_1 {
    pub dom_handle: xen_domain_handle_t,
    pub vcpu_id: ::std::os::raw::c_uint,
    pub runtime: u64,
}
#[test]
fn bindgen_test_layout_xen_sysctl_arinc653_schedule__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_arinc653_schedule__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(xen_sysctl_arinc653_schedule__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_arinc653_schedule__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_arinc653_schedule__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_arinc653_schedule__bindgen_ty_1>())).dom_handle
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_arinc653_schedule__bindgen_ty_1),
            "::",
            stringify!(dom_handle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_arinc653_schedule__bindgen_ty_1>())).vcpu_id
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_arinc653_schedule__bindgen_ty_1),
            "::",
            stringify!(vcpu_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_arinc653_schedule__bindgen_ty_1>())).runtime
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_arinc653_schedule__bindgen_ty_1),
            "::",
            stringify!(runtime)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_sysctl_arinc653_schedule() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_arinc653_schedule>(),
        2064usize,
        concat!("Size of: ", stringify!(xen_sysctl_arinc653_schedule))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_arinc653_schedule>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_arinc653_schedule))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_arinc653_schedule>())).major_frame as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_arinc653_schedule),
            "::",
            stringify!(major_frame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_arinc653_schedule>())).num_sched_entries as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_arinc653_schedule),
            "::",
            stringify!(num_sched_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_arinc653_schedule>())).sched_entries as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_arinc653_schedule),
            "::",
            stringify!(sched_entries)
        )
    );
}
pub type xen_sysctl_arinc653_schedule_t = xen_sysctl_arinc653_schedule;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_sysctl_arinc653_schedule_t {
    pub p: *mut xen_sysctl_arinc653_schedule_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_sysctl_arinc653_schedule_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_sysctl_arinc653_schedule_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_sysctl_arinc653_schedule_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_sysctl_arinc653_schedule_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_sysctl_arinc653_schedule_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_sysctl_arinc653_schedule_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_sysctl_arinc653_schedule_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_sysctl_arinc653_schedule_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_sysctl_arinc653_schedule_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_sysctl_arinc653_schedule_t {
    pub p: *mut xen_sysctl_arinc653_schedule_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_sysctl_arinc653_schedule_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_sysctl_arinc653_schedule_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_sysctl_arinc653_schedule_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_sysctl_arinc653_schedule_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_sysctl_arinc653_schedule_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_sysctl_arinc653_schedule_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_sysctl_arinc653_schedule_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_sysctl_arinc653_schedule_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_sysctl_arinc653_schedule_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_sysctl_arinc653_schedule_t {
    pub p: *const xen_sysctl_arinc653_schedule_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_sysctl_arinc653_schedule_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_sysctl_arinc653_schedule_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_sysctl_arinc653_schedule_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_sysctl_arinc653_schedule_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_sysctl_arinc653_schedule_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_sysctl_arinc653_schedule_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_sysctl_arinc653_schedule_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_sysctl_arinc653_schedule_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_sysctl_arinc653_schedule_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_sysctl_arinc653_schedule_t {
    pub p: *const xen_sysctl_arinc653_schedule_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_sysctl_arinc653_schedule_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_sysctl_arinc653_schedule_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_sysctl_arinc653_schedule_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_sysctl_arinc653_schedule_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_sysctl_arinc653_schedule_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_sysctl_arinc653_schedule_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_sysctl_arinc653_schedule_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_sysctl_arinc653_schedule_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_sysctl_arinc653_schedule_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_credit_schedule {
    pub tslice_ms: ::std::os::raw::c_uint,
    pub ratelimit_us: ::std::os::raw::c_uint,
    pub vcpu_migr_delay_us: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_xen_sysctl_credit_schedule() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_credit_schedule>(),
        12usize,
        concat!("Size of: ", stringify!(xen_sysctl_credit_schedule))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_credit_schedule>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_sysctl_credit_schedule))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_credit_schedule>())).tslice_ms as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_credit_schedule),
            "::",
            stringify!(tslice_ms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_credit_schedule>())).ratelimit_us as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_credit_schedule),
            "::",
            stringify!(ratelimit_us)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_credit_schedule>())).vcpu_migr_delay_us as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_credit_schedule),
            "::",
            stringify!(vcpu_migr_delay_us)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_credit2_schedule {
    pub ratelimit_us: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_xen_sysctl_credit2_schedule() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_credit2_schedule>(),
        4usize,
        concat!("Size of: ", stringify!(xen_sysctl_credit2_schedule))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_credit2_schedule>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_sysctl_credit2_schedule))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_credit2_schedule>())).ratelimit_us as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_credit2_schedule),
            "::",
            stringify!(ratelimit_us)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_scheduler_op {
    pub cpupool_id: u32,
    pub sched_id: u32,
    pub cmd: u32,
    pub u: xen_sysctl_scheduler_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_scheduler_op__bindgen_ty_1 {
    pub sched_arinc653: xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653,
    pub sched_credit: xen_sysctl_credit_schedule,
    pub sched_credit2: xen_sysctl_credit2_schedule,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653 {
    pub schedule: __guest_handle_64_xen_sysctl_arinc653_schedule_t,
}
#[test]
fn bindgen_test_layout_xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653>(
            )))
            .schedule as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_scheduler_op__bindgen_ty_1_xen_sysctl_sched_arinc653),
            "::",
            stringify!(schedule)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_sysctl_scheduler_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_scheduler_op__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_sysctl_scheduler_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_scheduler_op__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_scheduler_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_scheduler_op__bindgen_ty_1>())).sched_arinc653
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_scheduler_op__bindgen_ty_1),
            "::",
            stringify!(sched_arinc653)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_scheduler_op__bindgen_ty_1>())).sched_credit
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_scheduler_op__bindgen_ty_1),
            "::",
            stringify!(sched_credit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_scheduler_op__bindgen_ty_1>())).sched_credit2
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_scheduler_op__bindgen_ty_1),
            "::",
            stringify!(sched_credit2)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_sysctl_scheduler_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_scheduler_op>(),
        32usize,
        concat!("Size of: ", stringify!(xen_sysctl_scheduler_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_scheduler_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_scheduler_op))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_scheduler_op>())).cpupool_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_scheduler_op),
            "::",
            stringify!(cpupool_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_scheduler_op>())).sched_id as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_scheduler_op),
            "::",
            stringify!(sched_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_scheduler_op>())).cmd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_scheduler_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_scheduler_op>())).u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_scheduler_op),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_coverage_op {
    pub cmd: u32,
    pub size: u32,
    pub buffer: __guest_handle_64_char,
}
#[test]
fn bindgen_test_layout_xen_sysctl_coverage_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_coverage_op>(),
        16usize,
        concat!("Size of: ", stringify!(xen_sysctl_coverage_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_coverage_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_coverage_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_coverage_op>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_coverage_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_coverage_op>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_coverage_op),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_coverage_op>())).buffer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_coverage_op),
            "::",
            stringify!(buffer)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_psr_cmt_op {
    pub cmd: u32,
    pub flags: u32,
    pub u: xen_sysctl_psr_cmt_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_psr_cmt_op__bindgen_ty_1 {
    pub data: u64,
    pub l3_cache: xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1 {
    pub cpu: u32,
    pub rsvd: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1>())).cpu
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1>())).rsvd
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_cmt_op__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(rsvd)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_sysctl_psr_cmt_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_psr_cmt_op__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xen_sysctl_psr_cmt_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_psr_cmt_op__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_psr_cmt_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_psr_cmt_op__bindgen_ty_1>())).data as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_cmt_op__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_psr_cmt_op__bindgen_ty_1>())).l3_cache as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_cmt_op__bindgen_ty_1),
            "::",
            stringify!(l3_cache)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_sysctl_psr_cmt_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_psr_cmt_op>(),
        16usize,
        concat!("Size of: ", stringify!(xen_sysctl_psr_cmt_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_psr_cmt_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_psr_cmt_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_psr_cmt_op>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_cmt_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_psr_cmt_op>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_cmt_op),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_psr_cmt_op>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_cmt_op),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_pcitopoinfo {
    pub num_devs: u32,
    pub devs: __guest_handle_64_physdev_pci_device_t,
    pub nodes: __guest_handle_64_uint32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_pcitopoinfo() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_pcitopoinfo>(),
        24usize,
        concat!("Size of: ", stringify!(xen_sysctl_pcitopoinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_pcitopoinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_pcitopoinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_pcitopoinfo>())).num_devs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_pcitopoinfo),
            "::",
            stringify!(num_devs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_pcitopoinfo>())).devs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_pcitopoinfo),
            "::",
            stringify!(devs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_pcitopoinfo>())).nodes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_pcitopoinfo),
            "::",
            stringify!(nodes)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_psr_alloc {
    pub cmd: u32,
    pub target: u32,
    pub u: xen_sysctl_psr_alloc__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_psr_alloc__bindgen_ty_1 {
    pub cat_info: xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1,
    pub mba_info: xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1 {
    pub cbm_len: u32,
    pub cos_max: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1>())).cbm_len
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(cbm_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1>())).cos_max
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(cos_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1>())).flags
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2 {
    pub thrtl_max: u32,
    pub cos_max: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2>())).thrtl_max
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(thrtl_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2>())).cos_max
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(cos_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2>())).flags
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(flags)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_sysctl_psr_alloc__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_psr_alloc__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(xen_sysctl_psr_alloc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_psr_alloc__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_psr_alloc__bindgen_ty_1>())).cat_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1),
            "::",
            stringify!(cat_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_psr_alloc__bindgen_ty_1>())).mba_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_alloc__bindgen_ty_1),
            "::",
            stringify!(mba_info)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_sysctl_psr_alloc() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_psr_alloc>(),
        20usize,
        concat!("Size of: ", stringify!(xen_sysctl_psr_alloc))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_psr_alloc>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_sysctl_psr_alloc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_psr_alloc>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_alloc),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_psr_alloc>())).target as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_alloc),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_psr_alloc>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_psr_alloc),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_sysctl_cpu_levelling_caps {
    pub caps: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_cpu_levelling_caps() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_cpu_levelling_caps>(),
        4usize,
        concat!("Size of: ", stringify!(xen_sysctl_cpu_levelling_caps))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_cpu_levelling_caps>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_sysctl_cpu_levelling_caps))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_cpu_levelling_caps>())).caps as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cpu_levelling_caps),
            "::",
            stringify!(caps)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_cpu_featureset {
    pub index: u32,
    pub nr_features: u32,
    pub features: __guest_handle_64_uint32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_cpu_featureset() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_cpu_featureset>(),
        16usize,
        concat!("Size of: ", stringify!(xen_sysctl_cpu_featureset))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_cpu_featureset>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_cpu_featureset))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_cpu_featureset>())).index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cpu_featureset),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_cpu_featureset>())).nr_features as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cpu_featureset),
            "::",
            stringify!(nr_features)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_cpu_featureset>())).features as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_cpu_featureset),
            "::",
            stringify!(features)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_livepatch_name {
    pub name: __guest_handle_64_char,
    pub size: u16,
    pub pad: [u16; 3usize],
}
#[test]
fn bindgen_test_layout_xen_livepatch_name() {
    assert_eq!(
        ::std::mem::size_of::<xen_livepatch_name>(),
        16usize,
        concat!("Size of: ", stringify!(xen_livepatch_name))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_livepatch_name>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_livepatch_name))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_livepatch_name>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_livepatch_name),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_livepatch_name>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_livepatch_name),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_livepatch_name>())).pad as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_livepatch_name),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_livepatch_upload {
    pub name: xen_livepatch_name,
    pub size: u64,
    pub payload: __guest_handle_64_uint8,
}
#[test]
fn bindgen_test_layout_xen_sysctl_livepatch_upload() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_livepatch_upload>(),
        32usize,
        concat!("Size of: ", stringify!(xen_sysctl_livepatch_upload))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_livepatch_upload>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_livepatch_upload))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_livepatch_upload>())).name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_upload),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_livepatch_upload>())).size as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_upload),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_livepatch_upload>())).payload as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_upload),
            "::",
            stringify!(payload)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_livepatch_status {
    pub state: u32,
    pub rc: i32,
}
#[test]
fn bindgen_test_layout_xen_livepatch_status() {
    assert_eq!(
        ::std::mem::size_of::<xen_livepatch_status>(),
        8usize,
        concat!("Size of: ", stringify!(xen_livepatch_status))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_livepatch_status>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_livepatch_status))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_livepatch_status>())).state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_livepatch_status),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_livepatch_status>())).rc as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_livepatch_status),
            "::",
            stringify!(rc)
        )
    );
}
pub type xen_livepatch_status_t = xen_livepatch_status;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_livepatch_status_t {
    pub p: *mut xen_livepatch_status_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_livepatch_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_livepatch_status_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_livepatch_status_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_livepatch_status_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_livepatch_status_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_livepatch_status_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_livepatch_status_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_livepatch_status_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_livepatch_status_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_livepatch_status_t {
    pub p: *mut xen_livepatch_status_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_livepatch_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_livepatch_status_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_livepatch_status_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_livepatch_status_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_livepatch_status_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_livepatch_status_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_livepatch_status_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_livepatch_status_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_livepatch_status_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_livepatch_status_t {
    pub p: *const xen_livepatch_status_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_livepatch_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_livepatch_status_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_livepatch_status_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_livepatch_status_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_livepatch_status_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_livepatch_status_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_livepatch_status_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_livepatch_status_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_livepatch_status_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_livepatch_status_t {
    pub p: *const xen_livepatch_status_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_livepatch_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_livepatch_status_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_livepatch_status_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_livepatch_status_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_livepatch_status_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_livepatch_status_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_livepatch_status_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_livepatch_status_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_livepatch_status_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_livepatch_get {
    pub name: xen_livepatch_name,
    pub status: xen_livepatch_status,
}
#[test]
fn bindgen_test_layout_xen_sysctl_livepatch_get() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_livepatch_get>(),
        24usize,
        concat!("Size of: ", stringify!(xen_sysctl_livepatch_get))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_livepatch_get>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_livepatch_get))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_livepatch_get>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_get),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_livepatch_get>())).status as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_get),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_livepatch_list {
    pub version: u32,
    pub idx: u32,
    pub nr: u32,
    pub pad: u32,
    pub name_total_size: u32,
    pub metadata_total_size: u32,
    pub status: __guest_handle_64_xen_livepatch_status_t,
    pub name: __guest_handle_64_char,
    pub len: __guest_handle_64_uint32,
    pub metadata: __guest_handle_64_char,
    pub metadata_len: __guest_handle_64_uint32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_livepatch_list() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_livepatch_list>(),
        64usize,
        concat!("Size of: ", stringify!(xen_sysctl_livepatch_list))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_livepatch_list>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_livepatch_list))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_livepatch_list>())).version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_list),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_livepatch_list>())).idx as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_list),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_livepatch_list>())).nr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_list),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_livepatch_list>())).pad as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_list),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_livepatch_list>())).name_total_size as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_list),
            "::",
            stringify!(name_total_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_livepatch_list>())).metadata_total_size as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_list),
            "::",
            stringify!(metadata_total_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_livepatch_list>())).status as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_list),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_livepatch_list>())).name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_list),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_livepatch_list>())).len as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_list),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_livepatch_list>())).metadata as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_list),
            "::",
            stringify!(metadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_livepatch_list>())).metadata_len as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_list),
            "::",
            stringify!(metadata_len)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_livepatch_action {
    pub name: xen_livepatch_name,
    pub cmd: u32,
    pub timeout: u32,
    pub flags: u32,
    pub pad: u32,
}
#[test]
fn bindgen_test_layout_xen_sysctl_livepatch_action() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_livepatch_action>(),
        32usize,
        concat!("Size of: ", stringify!(xen_sysctl_livepatch_action))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_livepatch_action>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_livepatch_action))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_livepatch_action>())).name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_action),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_livepatch_action>())).cmd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_action),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_livepatch_action>())).timeout as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_action),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_livepatch_action>())).flags as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_action),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_livepatch_action>())).pad as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_action),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl_livepatch_op {
    pub cmd: u32,
    pub pad: u32,
    pub u: xen_sysctl_livepatch_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl_livepatch_op__bindgen_ty_1 {
    pub upload: xen_sysctl_livepatch_upload,
    pub list: xen_sysctl_livepatch_list,
    pub get: xen_sysctl_livepatch_get,
    pub action: xen_sysctl_livepatch_action,
}
#[test]
fn bindgen_test_layout_xen_sysctl_livepatch_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_livepatch_op__bindgen_ty_1>(),
        64usize,
        concat!(
            "Size of: ",
            stringify!(xen_sysctl_livepatch_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_livepatch_op__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_sysctl_livepatch_op__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_livepatch_op__bindgen_ty_1>())).upload as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_op__bindgen_ty_1),
            "::",
            stringify!(upload)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_livepatch_op__bindgen_ty_1>())).list as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_op__bindgen_ty_1),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_livepatch_op__bindgen_ty_1>())).get as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_op__bindgen_ty_1),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl_livepatch_op__bindgen_ty_1>())).action as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_op__bindgen_ty_1),
            "::",
            stringify!(action)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_sysctl_livepatch_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl_livepatch_op>(),
        72usize,
        concat!("Size of: ", stringify!(xen_sysctl_livepatch_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl_livepatch_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl_livepatch_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_livepatch_op>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_livepatch_op>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_op),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl_livepatch_op>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl_livepatch_op),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_sysctl {
    pub cmd: u32,
    pub interface_version: u32,
    pub u: xen_sysctl__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_sysctl__bindgen_ty_1 {
    pub readconsole: xen_sysctl_readconsole,
    pub tbuf_op: xen_sysctl_tbuf_op,
    pub physinfo: xen_sysctl_physinfo,
    pub cputopoinfo: xen_sysctl_cputopoinfo,
    pub pcitopoinfo: xen_sysctl_pcitopoinfo,
    pub numainfo: xen_sysctl_numainfo,
    pub sched_id: xen_sysctl_sched_id,
    pub perfc_op: xen_sysctl_perfc_op,
    pub getdomaininfolist: xen_sysctl_getdomaininfolist,
    pub debug_keys: xen_sysctl_debug_keys,
    pub getcpuinfo: xen_sysctl_getcpuinfo,
    pub availheap: xen_sysctl_availheap,
    pub get_pmstat: xen_sysctl_get_pmstat,
    pub cpu_hotplug: xen_sysctl_cpu_hotplug,
    pub pm_op: xen_sysctl_pm_op,
    pub page_offline: xen_sysctl_page_offline_op,
    pub lockprof_op: xen_sysctl_lockprof_op,
    pub cpupool_op: xen_sysctl_cpupool_op,
    pub scheduler_op: xen_sysctl_scheduler_op,
    pub coverage_op: xen_sysctl_coverage_op,
    pub psr_cmt_op: xen_sysctl_psr_cmt_op,
    pub psr_alloc: xen_sysctl_psr_alloc,
    pub cpu_levelling_caps: xen_sysctl_cpu_levelling_caps,
    pub cpu_featureset: xen_sysctl_cpu_featureset,
    pub livepatch: xen_sysctl_livepatch_op,
    pub pad: [u8; 128usize],
}
#[test]
fn bindgen_test_layout_xen_sysctl__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(xen_sysctl__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).readconsole as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(readconsole)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).tbuf_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(tbuf_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).physinfo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(physinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).cputopoinfo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(cputopoinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).pcitopoinfo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(pcitopoinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).numainfo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(numainfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).sched_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(sched_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).perfc_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(perfc_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).getdomaininfolist as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(getdomaininfolist)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).debug_keys as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(debug_keys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).getcpuinfo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(getcpuinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).availheap as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(availheap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).get_pmstat as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(get_pmstat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).cpu_hotplug as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(cpu_hotplug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).pm_op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(pm_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).page_offline as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(page_offline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).lockprof_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(lockprof_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).cpupool_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(cpupool_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).scheduler_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(scheduler_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).coverage_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(coverage_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).psr_cmt_op as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(psr_cmt_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).psr_alloc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(psr_alloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).cpu_levelling_caps as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(cpu_levelling_caps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).cpu_featureset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(cpu_featureset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).livepatch as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(livepatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl__bindgen_ty_1>())).pad as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl__bindgen_ty_1),
            "::",
            stringify!(pad)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_sysctl() {
    assert_eq!(
        ::std::mem::size_of::<xen_sysctl>(),
        136usize,
        concat!("Size of: ", stringify!(xen_sysctl))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_sysctl>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_sysctl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl>())).interface_version as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl),
            "::",
            stringify!(interface_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_sysctl>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_sysctl),
            "::",
            stringify!(u)
        )
    );
}
pub type xen_sysctl_t = xen_sysctl;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_sysctl_t {
    pub p: *mut xen_sysctl_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_sysctl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_sysctl_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_sysctl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_sysctl_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_sysctl_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_xen_sysctl_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_sysctl_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_xen_sysctl_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_sysctl_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_sysctl_t {
    pub p: *mut xen_sysctl_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_sysctl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_sysctl_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_sysctl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_sysctl_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_xen_sysctl_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_sysctl_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_sysctl_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_sysctl_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_sysctl_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_sysctl_t {
    pub p: *const xen_sysctl_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_sysctl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_sysctl_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_xen_sysctl_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_sysctl_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_sysctl_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_sysctl_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_sysctl_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_sysctl_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_sysctl_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_sysctl_t {
    pub p: *const xen_sysctl_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_sysctl_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_sysctl_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_sysctl_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_sysctl_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_sysctl_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_sysctl_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_sysctl_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_sysctl_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_sysctl_t),
            "::",
            stringify!(q)
        )
    );
}
pub type xen_extraversion_t = [::std::os::raw::c_char; 16usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_compile_info {
    pub compiler: [::std::os::raw::c_char; 64usize],
    pub compile_by: [::std::os::raw::c_char; 16usize],
    pub compile_domain: [::std::os::raw::c_char; 32usize],
    pub compile_date: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_xen_compile_info() {
    assert_eq!(
        ::std::mem::size_of::<xen_compile_info>(),
        144usize,
        concat!("Size of: ", stringify!(xen_compile_info))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_compile_info>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_compile_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_compile_info>())).compiler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_compile_info),
            "::",
            stringify!(compiler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_compile_info>())).compile_by as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_compile_info),
            "::",
            stringify!(compile_by)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_compile_info>())).compile_domain as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_compile_info),
            "::",
            stringify!(compile_domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_compile_info>())).compile_date as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_compile_info),
            "::",
            stringify!(compile_date)
        )
    );
}
pub type xen_compile_info_t = xen_compile_info;
pub type xen_capabilities_info_t = [::std::os::raw::c_char; 1024usize];
pub type xen_changeset_info_t = [::std::os::raw::c_char; 64usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_platform_parameters {
    pub virt_start: xen_ulong_t,
}
#[test]
fn bindgen_test_layout_xen_platform_parameters() {
    assert_eq!(
        ::std::mem::size_of::<xen_platform_parameters>(),
        8usize,
        concat!("Size of: ", stringify!(xen_platform_parameters))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_platform_parameters>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_platform_parameters))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_parameters>())).virt_start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_parameters),
            "::",
            stringify!(virt_start)
        )
    );
}
pub type xen_platform_parameters_t = xen_platform_parameters;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_feature_info {
    pub submap_idx: ::std::os::raw::c_uint,
    pub submap: u32,
}
#[test]
fn bindgen_test_layout_xen_feature_info() {
    assert_eq!(
        ::std::mem::size_of::<xen_feature_info>(),
        8usize,
        concat!("Size of: ", stringify!(xen_feature_info))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_feature_info>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_feature_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_feature_info>())).submap_idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_feature_info),
            "::",
            stringify!(submap_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_feature_info>())).submap as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_feature_info),
            "::",
            stringify!(submap)
        )
    );
}
pub type xen_feature_info_t = xen_feature_info;
pub type xen_commandline_t = [::std::os::raw::c_char; 1024usize];
#[repr(C)]
#[derive(Debug)]
pub struct xen_build_id {
    pub len: u32,
    pub buf: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_xen_build_id() {
    assert_eq!(
        ::std::mem::size_of::<xen_build_id>(),
        4usize,
        concat!("Size of: ", stringify!(xen_build_id))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_build_id>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_build_id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_build_id>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_build_id),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_build_id>())).buf as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_build_id),
            "::",
            stringify!(buf)
        )
    );
}
pub type xen_build_id_t = xen_build_id;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_shutdown {
    pub reason: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_sched_shutdown() {
    assert_eq!(
        ::std::mem::size_of::<sched_shutdown>(),
        4usize,
        concat!("Size of: ", stringify!(sched_shutdown))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_shutdown>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_shutdown))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_shutdown>())).reason as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_shutdown),
            "::",
            stringify!(reason)
        )
    );
}
pub type sched_shutdown_t = sched_shutdown;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_sched_shutdown_t {
    pub p: *mut sched_shutdown_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_sched_shutdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_sched_shutdown_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_sched_shutdown_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_sched_shutdown_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_sched_shutdown_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_sched_shutdown_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_sched_shutdown_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_sched_shutdown_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_sched_shutdown_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_sched_shutdown_t {
    pub p: *mut sched_shutdown_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_sched_shutdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_sched_shutdown_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_sched_shutdown_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_sched_shutdown_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_sched_shutdown_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_sched_shutdown_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_sched_shutdown_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_sched_shutdown_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_sched_shutdown_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_sched_shutdown_t {
    pub p: *const sched_shutdown_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_sched_shutdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_sched_shutdown_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_sched_shutdown_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_sched_shutdown_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_sched_shutdown_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_sched_shutdown_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_sched_shutdown_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_sched_shutdown_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_sched_shutdown_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_sched_shutdown_t {
    pub p: *const sched_shutdown_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_sched_shutdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_sched_shutdown_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_sched_shutdown_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_sched_shutdown_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_sched_shutdown_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_sched_shutdown_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_sched_shutdown_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_sched_shutdown_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_sched_shutdown_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sched_poll {
    pub ports: __guest_handle_64_evtchn_port_t,
    pub nr_ports: ::std::os::raw::c_uint,
    pub timeout: u64,
}
#[test]
fn bindgen_test_layout_sched_poll() {
    assert_eq!(
        ::std::mem::size_of::<sched_poll>(),
        24usize,
        concat!("Size of: ", stringify!(sched_poll))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_poll>(),
        8usize,
        concat!("Alignment of ", stringify!(sched_poll))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_poll>())).ports as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_poll),
            "::",
            stringify!(ports)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_poll>())).nr_ports as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_poll),
            "::",
            stringify!(nr_ports)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_poll>())).timeout as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_poll),
            "::",
            stringify!(timeout)
        )
    );
}
pub type sched_poll_t = sched_poll;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_sched_poll_t {
    pub p: *mut sched_poll_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_sched_poll_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_sched_poll_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_sched_poll_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_sched_poll_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_sched_poll_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_sched_poll_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_sched_poll_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_sched_poll_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_sched_poll_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_sched_poll_t {
    pub p: *mut sched_poll_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_sched_poll_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_sched_poll_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_sched_poll_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_sched_poll_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_64_sched_poll_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_sched_poll_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_sched_poll_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_sched_poll_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_sched_poll_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_sched_poll_t {
    pub p: *const sched_poll_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_sched_poll_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_sched_poll_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_sched_poll_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_sched_poll_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_sched_poll_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_sched_poll_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_sched_poll_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_sched_poll_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_sched_poll_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_sched_poll_t {
    pub p: *const sched_poll_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_sched_poll_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_sched_poll_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_sched_poll_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_sched_poll_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_sched_poll_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_sched_poll_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_sched_poll_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_sched_poll_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_sched_poll_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_remote_shutdown {
    pub domain_id: domid_t,
    pub reason: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_sched_remote_shutdown() {
    assert_eq!(
        ::std::mem::size_of::<sched_remote_shutdown>(),
        8usize,
        concat!("Size of: ", stringify!(sched_remote_shutdown))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_remote_shutdown>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_remote_shutdown))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_remote_shutdown>())).domain_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_remote_shutdown),
            "::",
            stringify!(domain_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_remote_shutdown>())).reason as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_remote_shutdown),
            "::",
            stringify!(reason)
        )
    );
}
pub type sched_remote_shutdown_t = sched_remote_shutdown;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_sched_remote_shutdown_t {
    pub p: *mut sched_remote_shutdown_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_sched_remote_shutdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_sched_remote_shutdown_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_sched_remote_shutdown_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_sched_remote_shutdown_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_sched_remote_shutdown_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_sched_remote_shutdown_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_sched_remote_shutdown_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_sched_remote_shutdown_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_sched_remote_shutdown_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_sched_remote_shutdown_t {
    pub p: *mut sched_remote_shutdown_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_sched_remote_shutdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_sched_remote_shutdown_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_sched_remote_shutdown_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_sched_remote_shutdown_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_sched_remote_shutdown_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_sched_remote_shutdown_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_sched_remote_shutdown_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_sched_remote_shutdown_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_sched_remote_shutdown_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_sched_remote_shutdown_t {
    pub p: *const sched_remote_shutdown_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_sched_remote_shutdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_sched_remote_shutdown_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_sched_remote_shutdown_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_sched_remote_shutdown_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_sched_remote_shutdown_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_sched_remote_shutdown_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_sched_remote_shutdown_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_sched_remote_shutdown_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_sched_remote_shutdown_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_sched_remote_shutdown_t {
    pub p: *const sched_remote_shutdown_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_sched_remote_shutdown_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_sched_remote_shutdown_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_sched_remote_shutdown_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_sched_remote_shutdown_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_sched_remote_shutdown_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_sched_remote_shutdown_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_sched_remote_shutdown_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_sched_remote_shutdown_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_sched_remote_shutdown_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_watchdog {
    pub id: u32,
    pub timeout: u32,
}
#[test]
fn bindgen_test_layout_sched_watchdog() {
    assert_eq!(
        ::std::mem::size_of::<sched_watchdog>(),
        8usize,
        concat!("Size of: ", stringify!(sched_watchdog))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_watchdog>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_watchdog))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_watchdog>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_watchdog),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_watchdog>())).timeout as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_watchdog),
            "::",
            stringify!(timeout)
        )
    );
}
pub type sched_watchdog_t = sched_watchdog;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_sched_watchdog_t {
    pub p: *mut sched_watchdog_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_sched_watchdog_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_sched_watchdog_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_sched_watchdog_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_sched_watchdog_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_sched_watchdog_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_sched_watchdog_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_sched_watchdog_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_sched_watchdog_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_sched_watchdog_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_sched_watchdog_t {
    pub p: *mut sched_watchdog_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_sched_watchdog_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_sched_watchdog_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_sched_watchdog_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_sched_watchdog_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_sched_watchdog_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_sched_watchdog_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_sched_watchdog_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_sched_watchdog_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_sched_watchdog_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_sched_watchdog_t {
    pub p: *const sched_watchdog_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_sched_watchdog_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_sched_watchdog_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_sched_watchdog_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_sched_watchdog_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_sched_watchdog_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_sched_watchdog_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_sched_watchdog_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_sched_watchdog_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_sched_watchdog_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_sched_watchdog_t {
    pub p: *const sched_watchdog_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_sched_watchdog_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_sched_watchdog_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_sched_watchdog_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_sched_watchdog_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_sched_watchdog_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_sched_watchdog_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_sched_watchdog_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_sched_watchdog_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_sched_watchdog_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_pin_override {
    pub pcpu: i32,
}
#[test]
fn bindgen_test_layout_sched_pin_override() {
    assert_eq!(
        ::std::mem::size_of::<sched_pin_override>(),
        4usize,
        concat!("Size of: ", stringify!(sched_pin_override))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_pin_override>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_pin_override))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_pin_override>())).pcpu as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_pin_override),
            "::",
            stringify!(pcpu)
        )
    );
}
pub type sched_pin_override_t = sched_pin_override;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_sched_pin_override_t {
    pub p: *mut sched_pin_override_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_sched_pin_override_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_sched_pin_override_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_sched_pin_override_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_sched_pin_override_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_sched_pin_override_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_sched_pin_override_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_sched_pin_override_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_sched_pin_override_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_sched_pin_override_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_sched_pin_override_t {
    pub p: *mut sched_pin_override_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_sched_pin_override_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_sched_pin_override_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_sched_pin_override_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_sched_pin_override_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_sched_pin_override_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_sched_pin_override_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_sched_pin_override_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_sched_pin_override_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_sched_pin_override_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_sched_pin_override_t {
    pub p: *const sched_pin_override_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_sched_pin_override_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_sched_pin_override_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_sched_pin_override_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_sched_pin_override_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_sched_pin_override_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_sched_pin_override_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_sched_pin_override_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_sched_pin_override_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_sched_pin_override_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_sched_pin_override_t {
    pub p: *const sched_pin_override_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_sched_pin_override_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_sched_pin_override_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_sched_pin_override_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_sched_pin_override_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_sched_pin_override_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_sched_pin_override_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_sched_pin_override_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_sched_pin_override_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_sched_pin_override_t),
            "::",
            stringify!(q)
        )
    );
}
pub type ioservid_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_create_ioreq_server {
    pub handle_bufioreq: u8,
    pub pad: [u8; 3usize],
    pub id: ioservid_t,
}
#[test]
fn bindgen_test_layout_xen_dm_op_create_ioreq_server() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_create_ioreq_server>(),
        6usize,
        concat!("Size of: ", stringify!(xen_dm_op_create_ioreq_server))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_create_ioreq_server>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_dm_op_create_ioreq_server))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_create_ioreq_server>())).handle_bufioreq as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_create_ioreq_server),
            "::",
            stringify!(handle_bufioreq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_create_ioreq_server>())).pad as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_create_ioreq_server),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_create_ioreq_server>())).id as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_create_ioreq_server),
            "::",
            stringify!(id)
        )
    );
}
pub type xen_dm_op_create_ioreq_server_t = xen_dm_op_create_ioreq_server;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_get_ioreq_server_info {
    pub id: ioservid_t,
    pub flags: u16,
    pub bufioreq_port: evtchn_port_t,
    pub ioreq_gfn: u64,
    pub bufioreq_gfn: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_get_ioreq_server_info() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_get_ioreq_server_info>(),
        24usize,
        concat!("Size of: ", stringify!(xen_dm_op_get_ioreq_server_info))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_get_ioreq_server_info>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_get_ioreq_server_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_get_ioreq_server_info>())).id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_get_ioreq_server_info),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_get_ioreq_server_info>())).flags as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_get_ioreq_server_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_get_ioreq_server_info>())).bufioreq_port as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_get_ioreq_server_info),
            "::",
            stringify!(bufioreq_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_get_ioreq_server_info>())).ioreq_gfn as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_get_ioreq_server_info),
            "::",
            stringify!(ioreq_gfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_get_ioreq_server_info>())).bufioreq_gfn as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_get_ioreq_server_info),
            "::",
            stringify!(bufioreq_gfn)
        )
    );
}
pub type xen_dm_op_get_ioreq_server_info_t = xen_dm_op_get_ioreq_server_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_ioreq_server_range {
    pub id: ioservid_t,
    pub pad: u16,
    pub type_: u32,
    pub start: u64,
    pub end: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_ioreq_server_range() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_ioreq_server_range>(),
        24usize,
        concat!("Size of: ", stringify!(xen_dm_op_ioreq_server_range))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_ioreq_server_range>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_ioreq_server_range))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_ioreq_server_range>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_ioreq_server_range),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_ioreq_server_range>())).pad as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_ioreq_server_range),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_ioreq_server_range>())).type_ as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_ioreq_server_range),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_ioreq_server_range>())).start as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_ioreq_server_range),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_ioreq_server_range>())).end as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_ioreq_server_range),
            "::",
            stringify!(end)
        )
    );
}
pub type xen_dm_op_ioreq_server_range_t = xen_dm_op_ioreq_server_range;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_ioreq_server_state {
    pub id: ioservid_t,
    pub enabled: u8,
    pub pad: u8,
}
#[test]
fn bindgen_test_layout_xen_dm_op_set_ioreq_server_state() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_set_ioreq_server_state>(),
        4usize,
        concat!("Size of: ", stringify!(xen_dm_op_set_ioreq_server_state))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_set_ioreq_server_state>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(xen_dm_op_set_ioreq_server_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_set_ioreq_server_state>())).id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_ioreq_server_state),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_set_ioreq_server_state>())).enabled as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_ioreq_server_state),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_set_ioreq_server_state>())).pad as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_ioreq_server_state),
            "::",
            stringify!(pad)
        )
    );
}
pub type xen_dm_op_set_ioreq_server_state_t = xen_dm_op_set_ioreq_server_state;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_destroy_ioreq_server {
    pub id: ioservid_t,
    pub pad: u16,
}
#[test]
fn bindgen_test_layout_xen_dm_op_destroy_ioreq_server() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_destroy_ioreq_server>(),
        4usize,
        concat!("Size of: ", stringify!(xen_dm_op_destroy_ioreq_server))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_destroy_ioreq_server>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_dm_op_destroy_ioreq_server))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_destroy_ioreq_server>())).id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_destroy_ioreq_server),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_destroy_ioreq_server>())).pad as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_destroy_ioreq_server),
            "::",
            stringify!(pad)
        )
    );
}
pub type xen_dm_op_destroy_ioreq_server_t = xen_dm_op_destroy_ioreq_server;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_track_dirty_vram {
    pub nr: u32,
    pub pad: u32,
    pub first_pfn: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_track_dirty_vram() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_track_dirty_vram>(),
        16usize,
        concat!("Size of: ", stringify!(xen_dm_op_track_dirty_vram))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_track_dirty_vram>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_track_dirty_vram))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_track_dirty_vram>())).nr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_track_dirty_vram),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_track_dirty_vram>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_track_dirty_vram),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_track_dirty_vram>())).first_pfn as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_track_dirty_vram),
            "::",
            stringify!(first_pfn)
        )
    );
}
pub type xen_dm_op_track_dirty_vram_t = xen_dm_op_track_dirty_vram;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_pci_intx_level {
    pub domain: u16,
    pub bus: u8,
    pub device: u8,
    pub intx: u8,
    pub level: u8,
}
#[test]
fn bindgen_test_layout_xen_dm_op_set_pci_intx_level() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_set_pci_intx_level>(),
        6usize,
        concat!("Size of: ", stringify!(xen_dm_op_set_pci_intx_level))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_set_pci_intx_level>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_dm_op_set_pci_intx_level))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_set_pci_intx_level>())).domain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_pci_intx_level),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_set_pci_intx_level>())).bus as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_pci_intx_level),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_set_pci_intx_level>())).device as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_pci_intx_level),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_set_pci_intx_level>())).intx as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_pci_intx_level),
            "::",
            stringify!(intx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_set_pci_intx_level>())).level as *const _ as usize
        },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_pci_intx_level),
            "::",
            stringify!(level)
        )
    );
}
pub type xen_dm_op_set_pci_intx_level_t = xen_dm_op_set_pci_intx_level;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_isa_irq_level {
    pub isa_irq: u8,
    pub level: u8,
}
#[test]
fn bindgen_test_layout_xen_dm_op_set_isa_irq_level() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_set_isa_irq_level>(),
        2usize,
        concat!("Size of: ", stringify!(xen_dm_op_set_isa_irq_level))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_set_isa_irq_level>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_dm_op_set_isa_irq_level))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_set_isa_irq_level>())).isa_irq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_isa_irq_level),
            "::",
            stringify!(isa_irq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_set_isa_irq_level>())).level as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_isa_irq_level),
            "::",
            stringify!(level)
        )
    );
}
pub type xen_dm_op_set_isa_irq_level_t = xen_dm_op_set_isa_irq_level;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_pci_link_route {
    pub link: u8,
    pub isa_irq: u8,
}
#[test]
fn bindgen_test_layout_xen_dm_op_set_pci_link_route() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_set_pci_link_route>(),
        2usize,
        concat!("Size of: ", stringify!(xen_dm_op_set_pci_link_route))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_set_pci_link_route>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_dm_op_set_pci_link_route))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_set_pci_link_route>())).link as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_pci_link_route),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_set_pci_link_route>())).isa_irq as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_pci_link_route),
            "::",
            stringify!(isa_irq)
        )
    );
}
pub type xen_dm_op_set_pci_link_route_t = xen_dm_op_set_pci_link_route;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_modified_memory {
    pub nr_extents: u32,
    pub opaque: u32,
}
#[test]
fn bindgen_test_layout_xen_dm_op_modified_memory() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_modified_memory>(),
        8usize,
        concat!("Size of: ", stringify!(xen_dm_op_modified_memory))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_modified_memory>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_dm_op_modified_memory))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_modified_memory>())).nr_extents as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_modified_memory),
            "::",
            stringify!(nr_extents)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_modified_memory>())).opaque as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_modified_memory),
            "::",
            stringify!(opaque)
        )
    );
}
pub type xen_dm_op_modified_memory_t = xen_dm_op_modified_memory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_modified_memory_extent {
    pub nr: u32,
    pub pad: u32,
    pub first_pfn: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_modified_memory_extent() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_modified_memory_extent>(),
        16usize,
        concat!("Size of: ", stringify!(xen_dm_op_modified_memory_extent))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_modified_memory_extent>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_dm_op_modified_memory_extent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_modified_memory_extent>())).nr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_modified_memory_extent),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_modified_memory_extent>())).pad as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_modified_memory_extent),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_modified_memory_extent>())).first_pfn as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_modified_memory_extent),
            "::",
            stringify!(first_pfn)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_mem_type {
    pub nr: u32,
    pub mem_type: u16,
    pub pad: u16,
    pub first_pfn: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_set_mem_type() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_set_mem_type>(),
        16usize,
        concat!("Size of: ", stringify!(xen_dm_op_set_mem_type))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_set_mem_type>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_set_mem_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_set_mem_type>())).nr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_mem_type),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_set_mem_type>())).mem_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_mem_type),
            "::",
            stringify!(mem_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_set_mem_type>())).pad as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_mem_type),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_set_mem_type>())).first_pfn as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_mem_type),
            "::",
            stringify!(first_pfn)
        )
    );
}
pub type xen_dm_op_set_mem_type_t = xen_dm_op_set_mem_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_inject_event {
    pub vcpuid: u32,
    pub vector: u8,
    pub type_: u8,
    pub insn_len: u8,
    pub pad0: u8,
    pub error_code: u32,
    pub pad1: u32,
    pub cr2: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_inject_event() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_inject_event>(),
        24usize,
        concat!("Size of: ", stringify!(xen_dm_op_inject_event))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_inject_event>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_inject_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_inject_event>())).vcpuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_inject_event),
            "::",
            stringify!(vcpuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_inject_event>())).vector as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_inject_event),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_inject_event>())).type_ as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_inject_event),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_inject_event>())).insn_len as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_inject_event),
            "::",
            stringify!(insn_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_inject_event>())).pad0 as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_inject_event),
            "::",
            stringify!(pad0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_inject_event>())).error_code as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_inject_event),
            "::",
            stringify!(error_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_inject_event>())).pad1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_inject_event),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_inject_event>())).cr2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_inject_event),
            "::",
            stringify!(cr2)
        )
    );
}
pub type xen_dm_op_inject_event_t = xen_dm_op_inject_event;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_inject_msi {
    pub data: u32,
    pub pad: u32,
    pub addr: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_inject_msi() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_inject_msi>(),
        16usize,
        concat!("Size of: ", stringify!(xen_dm_op_inject_msi))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_inject_msi>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_inject_msi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_inject_msi>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_inject_msi),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_inject_msi>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_inject_msi),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_inject_msi>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_inject_msi),
            "::",
            stringify!(addr)
        )
    );
}
pub type xen_dm_op_inject_msi_t = xen_dm_op_inject_msi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_map_mem_type_to_ioreq_server {
    pub id: ioservid_t,
    pub type_: u16,
    pub flags: u32,
    pub opaque: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_map_mem_type_to_ioreq_server() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_map_mem_type_to_ioreq_server>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xen_dm_op_map_mem_type_to_ioreq_server)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_map_mem_type_to_ioreq_server>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_dm_op_map_mem_type_to_ioreq_server)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_map_mem_type_to_ioreq_server>())).id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_map_mem_type_to_ioreq_server),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_map_mem_type_to_ioreq_server>())).type_ as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_map_mem_type_to_ioreq_server),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_map_mem_type_to_ioreq_server>())).flags as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_map_mem_type_to_ioreq_server),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_map_mem_type_to_ioreq_server>())).opaque as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_map_mem_type_to_ioreq_server),
            "::",
            stringify!(opaque)
        )
    );
}
pub type xen_dm_op_map_mem_type_to_ioreq_server_t = xen_dm_op_map_mem_type_to_ioreq_server;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_remote_shutdown {
    pub reason: u32,
}
#[test]
fn bindgen_test_layout_xen_dm_op_remote_shutdown() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_remote_shutdown>(),
        4usize,
        concat!("Size of: ", stringify!(xen_dm_op_remote_shutdown))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_remote_shutdown>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_dm_op_remote_shutdown))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_remote_shutdown>())).reason as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_remote_shutdown),
            "::",
            stringify!(reason)
        )
    );
}
pub type xen_dm_op_remote_shutdown_t = xen_dm_op_remote_shutdown;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_relocate_memory {
    pub size: u32,
    pub pad: u32,
    pub src_gfn: u64,
    pub dst_gfn: u64,
}
#[test]
fn bindgen_test_layout_xen_dm_op_relocate_memory() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_relocate_memory>(),
        24usize,
        concat!("Size of: ", stringify!(xen_dm_op_relocate_memory))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_relocate_memory>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_relocate_memory))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_relocate_memory>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_relocate_memory),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_relocate_memory>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_relocate_memory),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_relocate_memory>())).src_gfn as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_relocate_memory),
            "::",
            stringify!(src_gfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_relocate_memory>())).dst_gfn as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_relocate_memory),
            "::",
            stringify!(dst_gfn)
        )
    );
}
pub type xen_dm_op_relocate_memory_t = xen_dm_op_relocate_memory;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_pin_memory_cacheattr {
    pub start: u64,
    pub end: u64,
    pub type_: u32,
    pub pad: u32,
}
#[test]
fn bindgen_test_layout_xen_dm_op_pin_memory_cacheattr() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_pin_memory_cacheattr>(),
        24usize,
        concat!("Size of: ", stringify!(xen_dm_op_pin_memory_cacheattr))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_pin_memory_cacheattr>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_pin_memory_cacheattr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_pin_memory_cacheattr>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_pin_memory_cacheattr),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_pin_memory_cacheattr>())).end as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_pin_memory_cacheattr),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_pin_memory_cacheattr>())).type_ as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_pin_memory_cacheattr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op_pin_memory_cacheattr>())).pad as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_pin_memory_cacheattr),
            "::",
            stringify!(pad)
        )
    );
}
pub type xen_dm_op_pin_memory_cacheattr_t = xen_dm_op_pin_memory_cacheattr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_set_irq_level {
    pub irq: u32,
    pub level: u8,
    pub pad: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_xen_dm_op_set_irq_level() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_set_irq_level>(),
        8usize,
        concat!("Size of: ", stringify!(xen_dm_op_set_irq_level))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_set_irq_level>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_dm_op_set_irq_level))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_set_irq_level>())).irq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_irq_level),
            "::",
            stringify!(irq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_set_irq_level>())).level as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_irq_level),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_set_irq_level>())).pad as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_set_irq_level),
            "::",
            stringify!(pad)
        )
    );
}
pub type xen_dm_op_set_irq_level_t = xen_dm_op_set_irq_level;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_dm_op_nr_vcpus {
    pub vcpus: u32,
}
#[test]
fn bindgen_test_layout_xen_dm_op_nr_vcpus() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_nr_vcpus>(),
        4usize,
        concat!("Size of: ", stringify!(xen_dm_op_nr_vcpus))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_nr_vcpus>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_dm_op_nr_vcpus))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_nr_vcpus>())).vcpus as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_nr_vcpus),
            "::",
            stringify!(vcpus)
        )
    );
}
pub type xen_dm_op_nr_vcpus_t = xen_dm_op_nr_vcpus;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_dm_op {
    pub op: u32,
    pub pad: u32,
    pub u: xen_dm_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_dm_op__bindgen_ty_1 {
    pub create_ioreq_server: xen_dm_op_create_ioreq_server_t,
    pub get_ioreq_server_info: xen_dm_op_get_ioreq_server_info_t,
    pub map_io_range_to_ioreq_server: xen_dm_op_ioreq_server_range_t,
    pub unmap_io_range_from_ioreq_server: xen_dm_op_ioreq_server_range_t,
    pub set_ioreq_server_state: xen_dm_op_set_ioreq_server_state_t,
    pub destroy_ioreq_server: xen_dm_op_destroy_ioreq_server_t,
    pub track_dirty_vram: xen_dm_op_track_dirty_vram_t,
    pub set_pci_intx_level: xen_dm_op_set_pci_intx_level_t,
    pub set_isa_irq_level: xen_dm_op_set_isa_irq_level_t,
    pub set_irq_level: xen_dm_op_set_irq_level_t,
    pub set_pci_link_route: xen_dm_op_set_pci_link_route_t,
    pub modified_memory: xen_dm_op_modified_memory_t,
    pub set_mem_type: xen_dm_op_set_mem_type_t,
    pub inject_event: xen_dm_op_inject_event_t,
    pub inject_msi: xen_dm_op_inject_msi_t,
    pub map_mem_type_to_ioreq_server: xen_dm_op_map_mem_type_to_ioreq_server_t,
    pub remote_shutdown: xen_dm_op_remote_shutdown_t,
    pub relocate_memory: xen_dm_op_relocate_memory_t,
    pub pin_memory_cacheattr: xen_dm_op_pin_memory_cacheattr_t,
    pub nr_vcpus: xen_dm_op_nr_vcpus_t,
}
#[test]
fn bindgen_test_layout_xen_dm_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(xen_dm_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).create_ioreq_server as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(create_ioreq_server)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).get_ioreq_server_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(get_ioreq_server_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).map_io_range_to_ioreq_server
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(map_io_range_to_ioreq_server)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).unmap_io_range_from_ioreq_server
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(unmap_io_range_from_ioreq_server)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).set_ioreq_server_state as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(set_ioreq_server_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).destroy_ioreq_server as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(destroy_ioreq_server)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).track_dirty_vram as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(track_dirty_vram)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).set_pci_intx_level as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(set_pci_intx_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).set_isa_irq_level as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(set_isa_irq_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).set_irq_level as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(set_irq_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).set_pci_link_route as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(set_pci_link_route)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).modified_memory as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(modified_memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).set_mem_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(set_mem_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).inject_event as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(inject_event)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).inject_msi as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(inject_msi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).map_mem_type_to_ioreq_server
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(map_mem_type_to_ioreq_server)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).remote_shutdown as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(remote_shutdown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).relocate_memory as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(relocate_memory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).pin_memory_cacheattr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(pin_memory_cacheattr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_dm_op__bindgen_ty_1>())).nr_vcpus as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op__bindgen_ty_1),
            "::",
            stringify!(nr_vcpus)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_dm_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op>(),
        32usize,
        concat!("Size of: ", stringify!(xen_dm_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_dm_op_buf {
    pub h: __guest_handle_64_void,
    pub size: xen_ulong_t,
}
#[test]
fn bindgen_test_layout_xen_dm_op_buf() {
    assert_eq!(
        ::std::mem::size_of::<xen_dm_op_buf>(),
        16usize,
        concat!("Size of: ", stringify!(xen_dm_op_buf))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_dm_op_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_dm_op_buf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_buf>())).h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_buf),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_dm_op_buf>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_dm_op_buf),
            "::",
            stringify!(size)
        )
    );
}
pub type xen_dm_op_buf_t = xen_dm_op_buf;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_dm_op_buf_t {
    pub p: *mut xen_dm_op_buf_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_dm_op_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_dm_op_buf_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_dm_op_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_dm_op_buf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_dm_op_buf_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_dm_op_buf_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_dm_op_buf_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_dm_op_buf_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_dm_op_buf_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_dm_op_buf_t {
    pub p: *mut xen_dm_op_buf_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_dm_op_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_dm_op_buf_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_dm_op_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_dm_op_buf_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_dm_op_buf_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_dm_op_buf_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_dm_op_buf_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_dm_op_buf_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_dm_op_buf_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_dm_op_buf_t {
    pub p: *const xen_dm_op_buf_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_dm_op_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_dm_op_buf_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_dm_op_buf_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_dm_op_buf_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_dm_op_buf_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_dm_op_buf_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_dm_op_buf_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_dm_op_buf_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_dm_op_buf_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_dm_op_buf_t {
    pub p: *const xen_dm_op_buf_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_dm_op_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_dm_op_buf_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_dm_op_buf_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_dm_op_buf_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_dm_op_buf_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_dm_op_buf_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_dm_op_buf_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_dm_op_buf_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_dm_op_buf_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct t_rec {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub u: t_rec__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union t_rec__bindgen_ty_1 {
    pub cycles: t_rec__bindgen_ty_1__bindgen_ty_1,
    pub nocycles: t_rec__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_rec__bindgen_ty_1__bindgen_ty_1 {
    pub cycles_lo: u32,
    pub cycles_hi: u32,
    pub extra_u32: [u32; 7usize],
}
#[test]
fn bindgen_test_layout_t_rec__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<t_rec__bindgen_ty_1__bindgen_ty_1>(),
        36usize,
        concat!("Size of: ", stringify!(t_rec__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<t_rec__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(t_rec__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_rec__bindgen_ty_1__bindgen_ty_1>())).cycles_lo as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_rec__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(cycles_lo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_rec__bindgen_ty_1__bindgen_ty_1>())).cycles_hi as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(t_rec__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(cycles_hi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_rec__bindgen_ty_1__bindgen_ty_1>())).extra_u32 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_rec__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(extra_u32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_rec__bindgen_ty_1__bindgen_ty_2 {
    pub extra_u32: [u32; 7usize],
}
#[test]
fn bindgen_test_layout_t_rec__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<t_rec__bindgen_ty_1__bindgen_ty_2>(),
        28usize,
        concat!("Size of: ", stringify!(t_rec__bindgen_ty_1__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<t_rec__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(t_rec__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<t_rec__bindgen_ty_1__bindgen_ty_2>())).extra_u32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_rec__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(extra_u32)
        )
    );
}
#[test]
fn bindgen_test_layout_t_rec__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<t_rec__bindgen_ty_1>(),
        36usize,
        concat!("Size of: ", stringify!(t_rec__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<t_rec__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(t_rec__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_rec__bindgen_ty_1>())).cycles as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_rec__bindgen_ty_1),
            "::",
            stringify!(cycles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_rec__bindgen_ty_1>())).nocycles as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_rec__bindgen_ty_1),
            "::",
            stringify!(nocycles)
        )
    );
}
#[test]
fn bindgen_test_layout_t_rec() {
    assert_eq!(
        ::std::mem::size_of::<t_rec>(),
        40usize,
        concat!("Size of: ", stringify!(t_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<t_rec>(),
        4usize,
        concat!("Alignment of ", stringify!(t_rec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_rec>())).u as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(t_rec), "::", stringify!(u))
    );
}
impl t_rec {
    #[inline]
    pub fn event(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_event(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub fn extra_u32(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_extra_u32(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn cycles_included(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cycles_included(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        event: u32,
        extra_u32: u32,
        cycles_included: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 28u8, {
            let event: u32 = unsafe { ::std::mem::transmute(event) };
            event as u64
        });
        __bindgen_bitfield_unit.set(28usize, 3u8, {
            let extra_u32: u32 = unsafe { ::std::mem::transmute(extra_u32) };
            extra_u32 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let cycles_included: u32 = unsafe { ::std::mem::transmute(cycles_included) };
            cycles_included as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_buf {
    pub cons: u32,
    pub prod: u32,
}
#[test]
fn bindgen_test_layout_t_buf() {
    assert_eq!(
        ::std::mem::size_of::<t_buf>(),
        8usize,
        concat!("Size of: ", stringify!(t_buf))
    );
    assert_eq!(
        ::std::mem::align_of::<t_buf>(),
        4usize,
        concat!("Alignment of ", stringify!(t_buf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_buf>())).cons as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_buf),
            "::",
            stringify!(cons)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_buf>())).prod as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(t_buf),
            "::",
            stringify!(prod)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct t_info {
    pub tbuf_size: u16,
    pub mfn_offset: __IncompleteArrayField<u16>,
}
#[test]
fn bindgen_test_layout_t_info() {
    assert_eq!(
        ::std::mem::size_of::<t_info>(),
        2usize,
        concat!("Size of: ", stringify!(t_info))
    );
    assert_eq!(
        ::std::mem::align_of::<t_info>(),
        2usize,
        concat!("Alignment of ", stringify!(t_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_info>())).tbuf_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_info),
            "::",
            stringify!(tbuf_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<t_info>())).mfn_offset as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(t_info),
            "::",
            stringify!(mfn_offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_param {
    pub domid: domid_t,
    pub pad: u16,
    pub index: u32,
    pub value: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_param() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_param>(),
        16usize,
        concat!("Size of: ", stringify!(xen_hvm_param))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_param>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_param>())).domid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_param),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_param>())).pad as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_param),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_param>())).index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_param),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_param>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_param),
            "::",
            stringify!(value)
        )
    );
}
pub type xen_hvm_param_t = xen_hvm_param;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_param_t {
    pub p: *mut xen_hvm_param_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_param_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_param_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_hvm_param_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_param_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_hvm_param_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_param_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_param_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_param_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_param_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_param_t {
    pub p: *mut xen_hvm_param_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_param_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_param_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_hvm_param_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_param_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_param_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_param_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_param_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_param_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_param_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_param_t {
    pub p: *const xen_hvm_param_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_param_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_param_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_param_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_param_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_param_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_param_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_param_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_param_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_param_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_param_t {
    pub p: *const xen_hvm_param_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_param_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_param_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_param_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_param_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_param_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_param_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_param_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_param_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_param_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_suppress_ve {
    pub view: u16,
    pub suppress_ve: u8,
    pub pad1: u8,
    pub pad2: u32,
    pub gfn: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_suppress_ve() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_suppress_ve>(),
        16usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_suppress_ve))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_suppress_ve>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_suppress_ve))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_altp2m_suppress_ve>())).view as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_suppress_ve),
            "::",
            stringify!(view)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_suppress_ve>())).suppress_ve as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_suppress_ve),
            "::",
            stringify!(suppress_ve)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_altp2m_suppress_ve>())).pad1 as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_suppress_ve),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_altp2m_suppress_ve>())).pad2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_suppress_ve),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_altp2m_suppress_ve>())).gfn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_suppress_ve),
            "::",
            stringify!(gfn)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_suppress_ve_multi {
    pub view: u16,
    pub suppress_ve: u8,
    pub pad1: u8,
    pub first_error: i32,
    pub first_gfn: u64,
    pub last_gfn: u64,
    pub first_error_gfn: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_suppress_ve_multi() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_suppress_ve_multi>(),
        32usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_suppress_ve_multi))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_suppress_ve_multi>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_hvm_altp2m_suppress_ve_multi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_suppress_ve_multi>())).view as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_suppress_ve_multi),
            "::",
            stringify!(view)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_suppress_ve_multi>())).suppress_ve as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_suppress_ve_multi),
            "::",
            stringify!(suppress_ve)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_suppress_ve_multi>())).pad1 as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_suppress_ve_multi),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_suppress_ve_multi>())).first_error as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_suppress_ve_multi),
            "::",
            stringify!(first_error)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_suppress_ve_multi>())).first_gfn as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_suppress_ve_multi),
            "::",
            stringify!(first_gfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_suppress_ve_multi>())).last_gfn as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_suppress_ve_multi),
            "::",
            stringify!(last_gfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_suppress_ve_multi>())).first_error_gfn as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_suppress_ve_multi),
            "::",
            stringify!(first_error_gfn)
        )
    );
}
pub const hvmmem_type_t_HVMMEM_ram_rw: hvmmem_type_t = 0;
pub const hvmmem_type_t_HVMMEM_ram_ro: hvmmem_type_t = 1;
pub const hvmmem_type_t_HVMMEM_mmio_dm: hvmmem_type_t = 2;
pub const hvmmem_type_t_HVMMEM_unused: hvmmem_type_t = 3;
pub const hvmmem_type_t_HVMMEM_ioreq_server: hvmmem_type_t = 4;
pub type hvmmem_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_pagetable_dying {
    pub domid: domid_t,
    pub pad: [u16; 3usize],
    pub gpa: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_pagetable_dying() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_pagetable_dying>(),
        16usize,
        concat!("Size of: ", stringify!(xen_hvm_pagetable_dying))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_pagetable_dying>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_pagetable_dying))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_pagetable_dying>())).domid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_pagetable_dying),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_pagetable_dying>())).pad as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_pagetable_dying),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_pagetable_dying>())).gpa as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_pagetable_dying),
            "::",
            stringify!(gpa)
        )
    );
}
pub type xen_hvm_pagetable_dying_t = xen_hvm_pagetable_dying;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_pagetable_dying_t {
    pub p: *mut xen_hvm_pagetable_dying_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_pagetable_dying_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_pagetable_dying_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_hvm_pagetable_dying_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_pagetable_dying_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_pagetable_dying_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_pagetable_dying_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_pagetable_dying_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_pagetable_dying_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_pagetable_dying_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_pagetable_dying_t {
    pub p: *mut xen_hvm_pagetable_dying_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_pagetable_dying_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_pagetable_dying_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_pagetable_dying_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_pagetable_dying_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_pagetable_dying_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_pagetable_dying_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_pagetable_dying_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_pagetable_dying_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_pagetable_dying_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_pagetable_dying_t {
    pub p: *const xen_hvm_pagetable_dying_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_pagetable_dying_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_pagetable_dying_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_pagetable_dying_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_pagetable_dying_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_pagetable_dying_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_pagetable_dying_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_pagetable_dying_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_pagetable_dying_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_pagetable_dying_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_pagetable_dying_t {
    pub p: *const xen_hvm_pagetable_dying_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_pagetable_dying_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_pagetable_dying_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_pagetable_dying_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_pagetable_dying_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_pagetable_dying_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_pagetable_dying_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_pagetable_dying_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_pagetable_dying_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_pagetable_dying_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_get_time {
    pub now: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_get_time() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_get_time>(),
        8usize,
        concat!("Size of: ", stringify!(xen_hvm_get_time))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_get_time>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_get_time))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_get_time>())).now as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_get_time),
            "::",
            stringify!(now)
        )
    );
}
pub type xen_hvm_get_time_t = xen_hvm_get_time;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_get_time_t {
    pub p: *mut xen_hvm_get_time_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_get_time_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_get_time_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_hvm_get_time_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_get_time_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_get_time_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_get_time_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_get_time_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_get_time_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_get_time_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_get_time_t {
    pub p: *mut xen_hvm_get_time_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_get_time_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_get_time_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_get_time_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_get_time_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_get_time_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_get_time_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_get_time_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_get_time_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_get_time_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_get_time_t {
    pub p: *const xen_hvm_get_time_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_get_time_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_get_time_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_get_time_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_get_time_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_get_time_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_get_time_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_get_time_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_get_time_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_get_time_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_get_time_t {
    pub p: *const xen_hvm_get_time_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_get_time_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_get_time_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_get_time_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_get_time_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_get_time_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_get_time_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_get_time_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_get_time_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_get_time_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_xentrace {
    pub event: u16,
    pub extra_bytes: u16,
    pub extra: [u8; 28usize],
}
#[test]
fn bindgen_test_layout_xen_hvm_xentrace() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_xentrace>(),
        32usize,
        concat!("Size of: ", stringify!(xen_hvm_xentrace))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_xentrace>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_hvm_xentrace))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_xentrace>())).event as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_xentrace),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_xentrace>())).extra_bytes as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_xentrace),
            "::",
            stringify!(extra_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_xentrace>())).extra as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_xentrace),
            "::",
            stringify!(extra)
        )
    );
}
pub type xen_hvm_xentrace_t = xen_hvm_xentrace;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_xentrace_t {
    pub p: *mut xen_hvm_xentrace_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_xentrace_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_xentrace_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_hvm_xentrace_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_xentrace_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_xentrace_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_xentrace_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_xentrace_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_xentrace_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_xentrace_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_xentrace_t {
    pub p: *mut xen_hvm_xentrace_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_xentrace_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_xentrace_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_xentrace_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_xentrace_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_xentrace_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_xentrace_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_xentrace_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_xentrace_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_xentrace_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_xentrace_t {
    pub p: *const xen_hvm_xentrace_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_xentrace_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_xentrace_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_xentrace_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_xentrace_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_xentrace_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_xentrace_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_xentrace_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_xentrace_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_xentrace_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_xentrace_t {
    pub p: *const xen_hvm_xentrace_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_xentrace_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_xentrace_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_xentrace_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_xentrace_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_xentrace_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_xentrace_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_xentrace_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_xentrace_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_xentrace_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_get_mem_type {
    pub domid: domid_t,
    pub mem_type: u16,
    pub pad: [u16; 2usize],
    pub pfn: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_get_mem_type() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_get_mem_type>(),
        16usize,
        concat!("Size of: ", stringify!(xen_hvm_get_mem_type))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_get_mem_type>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_get_mem_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_get_mem_type>())).domid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_get_mem_type),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_get_mem_type>())).mem_type as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_get_mem_type),
            "::",
            stringify!(mem_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_get_mem_type>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_get_mem_type),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_get_mem_type>())).pfn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_get_mem_type),
            "::",
            stringify!(pfn)
        )
    );
}
pub type xen_hvm_get_mem_type_t = xen_hvm_get_mem_type;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_get_mem_type_t {
    pub p: *mut xen_hvm_get_mem_type_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_get_mem_type_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_get_mem_type_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_hvm_get_mem_type_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_get_mem_type_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_get_mem_type_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_get_mem_type_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_get_mem_type_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_get_mem_type_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_get_mem_type_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_get_mem_type_t {
    pub p: *mut xen_hvm_get_mem_type_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_get_mem_type_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_get_mem_type_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_get_mem_type_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_get_mem_type_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_get_mem_type_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_get_mem_type_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_get_mem_type_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_get_mem_type_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_get_mem_type_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_get_mem_type_t {
    pub p: *const xen_hvm_get_mem_type_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_get_mem_type_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_get_mem_type_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_get_mem_type_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_get_mem_type_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_get_mem_type_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_get_mem_type_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_get_mem_type_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_get_mem_type_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_get_mem_type_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_get_mem_type_t {
    pub p: *const xen_hvm_get_mem_type_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_get_mem_type_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_get_mem_type_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_get_mem_type_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_get_mem_type_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_get_mem_type_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_get_mem_type_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_get_mem_type_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_get_mem_type_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_get_mem_type_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_domain_state {
    pub state: u8,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_domain_state() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_domain_state>(),
        1usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_domain_state))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_domain_state>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_domain_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_domain_state>())).state as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_domain_state),
            "::",
            stringify!(state)
        )
    );
}
pub type xen_hvm_altp2m_domain_state_t = xen_hvm_altp2m_domain_state;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_altp2m_domain_state_t {
    pub p: *mut xen_hvm_altp2m_domain_state_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_altp2m_domain_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_domain_state_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_hvm_altp2m_domain_state_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_domain_state_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_altp2m_domain_state_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_altp2m_domain_state_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_altp2m_domain_state_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_altp2m_domain_state_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_altp2m_domain_state_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_altp2m_domain_state_t {
    pub p: *mut xen_hvm_altp2m_domain_state_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_altp2m_domain_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_altp2m_domain_state_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_domain_state_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_altp2m_domain_state_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_domain_state_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_altp2m_domain_state_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_domain_state_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_altp2m_domain_state_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_domain_state_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_altp2m_domain_state_t {
    pub p: *const xen_hvm_altp2m_domain_state_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_altp2m_domain_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_domain_state_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_domain_state_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_domain_state_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_domain_state_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_altp2m_domain_state_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_domain_state_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_altp2m_domain_state_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_domain_state_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_altp2m_domain_state_t {
    pub p: *const xen_hvm_altp2m_domain_state_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_altp2m_domain_state_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_altp2m_domain_state_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_domain_state_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_altp2m_domain_state_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_domain_state_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_altp2m_domain_state_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_domain_state_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_altp2m_domain_state_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_domain_state_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_vcpu_enable_notify {
    pub vcpu_id: u32,
    pub pad: u32,
    pub gfn: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_vcpu_enable_notify() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_vcpu_enable_notify>(),
        16usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_vcpu_enable_notify))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_vcpu_enable_notify>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_hvm_altp2m_vcpu_enable_notify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_vcpu_enable_notify>())).vcpu_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_vcpu_enable_notify),
            "::",
            stringify!(vcpu_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_vcpu_enable_notify>())).pad as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_vcpu_enable_notify),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_vcpu_enable_notify>())).gfn as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_vcpu_enable_notify),
            "::",
            stringify!(gfn)
        )
    );
}
pub type xen_hvm_altp2m_vcpu_enable_notify_t = xen_hvm_altp2m_vcpu_enable_notify;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t {
    pub p: *mut xen_hvm_altp2m_vcpu_enable_notify_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_altp2m_vcpu_enable_notify_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t {
    pub p: *mut xen_hvm_altp2m_vcpu_enable_notify_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_vcpu_enable_notify_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t {
    pub p: *const xen_hvm_altp2m_vcpu_enable_notify_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_vcpu_enable_notify_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t {
    pub p: *const xen_hvm_altp2m_vcpu_enable_notify_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t>()))
                .p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t>()))
                .q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_vcpu_enable_notify_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_vcpu_disable_notify {
    pub vcpu_id: u32,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_vcpu_disable_notify() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_vcpu_disable_notify>(),
        4usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_vcpu_disable_notify))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_vcpu_disable_notify>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xen_hvm_altp2m_vcpu_disable_notify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_vcpu_disable_notify>())).vcpu_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_vcpu_disable_notify),
            "::",
            stringify!(vcpu_id)
        )
    );
}
pub type xen_hvm_altp2m_vcpu_disable_notify_t = xen_hvm_altp2m_vcpu_disable_notify;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t {
    pub p: *mut xen_hvm_altp2m_vcpu_disable_notify_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_altp2m_vcpu_disable_notify_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t {
    pub p: *mut xen_hvm_altp2m_vcpu_disable_notify_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_vcpu_disable_notify_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t {
    pub p: *const xen_hvm_altp2m_vcpu_disable_notify_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_vcpu_disable_notify_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t {
    pub p: *const xen_hvm_altp2m_vcpu_disable_notify_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t>()))
                .p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t>()))
                .q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_vcpu_disable_notify_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_view {
    pub view: u16,
    pub hvmmem_default_access: u16,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_view() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_view>(),
        4usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_view))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_view>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_view))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_altp2m_view>())).view as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_view),
            "::",
            stringify!(view)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_view>())).hvmmem_default_access as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_view),
            "::",
            stringify!(hvmmem_default_access)
        )
    );
}
pub type xen_hvm_altp2m_view_t = xen_hvm_altp2m_view;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_altp2m_view_t {
    pub p: *mut xen_hvm_altp2m_view_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_altp2m_view_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_view_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_hvm_altp2m_view_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_view_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_altp2m_view_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_altp2m_view_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_altp2m_view_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_altp2m_view_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_altp2m_view_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_altp2m_view_t {
    pub p: *mut xen_hvm_altp2m_view_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_altp2m_view_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_altp2m_view_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_view_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_altp2m_view_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_view_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_altp2m_view_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_view_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_altp2m_view_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_view_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_altp2m_view_t {
    pub p: *const xen_hvm_altp2m_view_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_altp2m_view_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_view_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_view_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_view_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_view_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_altp2m_view_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_view_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_altp2m_view_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_view_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_altp2m_view_t {
    pub p: *const xen_hvm_altp2m_view_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_altp2m_view_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_altp2m_view_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_view_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_altp2m_view_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_view_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_altp2m_view_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_view_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_altp2m_view_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_view_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_mem_access {
    pub view: u16,
    pub access: u16,
    pub pad: u32,
    pub gfn: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_mem_access() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_mem_access>(),
        16usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_mem_access))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_mem_access>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_mem_access))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_altp2m_mem_access>())).view as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_mem_access),
            "::",
            stringify!(view)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_mem_access>())).access as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_mem_access),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_altp2m_mem_access>())).pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_mem_access),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_altp2m_mem_access>())).gfn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_mem_access),
            "::",
            stringify!(gfn)
        )
    );
}
pub type xen_hvm_altp2m_mem_access_t = xen_hvm_altp2m_mem_access;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_altp2m_mem_access_t {
    pub p: *mut xen_hvm_altp2m_mem_access_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_altp2m_mem_access_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_mem_access_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_hvm_altp2m_mem_access_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_mem_access_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_altp2m_mem_access_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_altp2m_mem_access_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_altp2m_mem_access_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_altp2m_mem_access_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_altp2m_mem_access_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_altp2m_mem_access_t {
    pub p: *mut xen_hvm_altp2m_mem_access_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_altp2m_mem_access_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_altp2m_mem_access_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_mem_access_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_altp2m_mem_access_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_mem_access_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_altp2m_mem_access_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_mem_access_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_altp2m_mem_access_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_mem_access_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_altp2m_mem_access_t {
    pub p: *const xen_hvm_altp2m_mem_access_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_altp2m_mem_access_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_mem_access_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_mem_access_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_mem_access_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_mem_access_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_altp2m_mem_access_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_mem_access_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_altp2m_mem_access_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_mem_access_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_altp2m_mem_access_t {
    pub p: *const xen_hvm_altp2m_mem_access_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_altp2m_mem_access_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_altp2m_mem_access_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_mem_access_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_altp2m_mem_access_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_mem_access_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_altp2m_mem_access_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_mem_access_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_altp2m_mem_access_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_mem_access_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_hvm_altp2m_set_mem_access_multi {
    pub view: u16,
    pub pad: u16,
    pub nr: u32,
    pub opaque: u64,
    pub pfn_list: __guest_handle_64_const_uint64,
    pub access_list: __guest_handle_64_const_uint8,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_set_mem_access_multi() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_set_mem_access_multi>(),
        32usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_set_mem_access_multi))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_set_mem_access_multi>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xen_hvm_altp2m_set_mem_access_multi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_set_mem_access_multi>())).view as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_set_mem_access_multi),
            "::",
            stringify!(view)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_set_mem_access_multi>())).pad as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_set_mem_access_multi),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_set_mem_access_multi>())).nr as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_set_mem_access_multi),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_set_mem_access_multi>())).opaque as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_set_mem_access_multi),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_set_mem_access_multi>())).pfn_list as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_set_mem_access_multi),
            "::",
            stringify!(pfn_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_set_mem_access_multi>())).access_list as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_set_mem_access_multi),
            "::",
            stringify!(access_list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_change_gfn {
    pub view: u16,
    pub pad1: u16,
    pub pad2: u32,
    pub old_gfn: u64,
    pub new_gfn: u64,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_change_gfn() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_change_gfn>(),
        24usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_change_gfn))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_change_gfn>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_change_gfn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_altp2m_change_gfn>())).view as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_change_gfn),
            "::",
            stringify!(view)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_altp2m_change_gfn>())).pad1 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_change_gfn),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_altp2m_change_gfn>())).pad2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_change_gfn),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_change_gfn>())).old_gfn as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_change_gfn),
            "::",
            stringify!(old_gfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_change_gfn>())).new_gfn as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_change_gfn),
            "::",
            stringify!(new_gfn)
        )
    );
}
pub type xen_hvm_altp2m_change_gfn_t = xen_hvm_altp2m_change_gfn;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_altp2m_change_gfn_t {
    pub p: *mut xen_hvm_altp2m_change_gfn_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_altp2m_change_gfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_change_gfn_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_hvm_altp2m_change_gfn_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_change_gfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_altp2m_change_gfn_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_altp2m_change_gfn_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_altp2m_change_gfn_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_altp2m_change_gfn_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_altp2m_change_gfn_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_altp2m_change_gfn_t {
    pub p: *mut xen_hvm_altp2m_change_gfn_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_altp2m_change_gfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_altp2m_change_gfn_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_change_gfn_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_altp2m_change_gfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_change_gfn_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_altp2m_change_gfn_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_change_gfn_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_altp2m_change_gfn_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_change_gfn_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_altp2m_change_gfn_t {
    pub p: *const xen_hvm_altp2m_change_gfn_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_altp2m_change_gfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_change_gfn_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_change_gfn_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_change_gfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_change_gfn_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_altp2m_change_gfn_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_change_gfn_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_altp2m_change_gfn_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_change_gfn_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_altp2m_change_gfn_t {
    pub p: *const xen_hvm_altp2m_change_gfn_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_altp2m_change_gfn_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_altp2m_change_gfn_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_change_gfn_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_altp2m_change_gfn_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_change_gfn_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_altp2m_change_gfn_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_change_gfn_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_altp2m_change_gfn_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_change_gfn_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_get_vcpu_p2m_idx {
    pub vcpu_id: u32,
    pub altp2m_idx: u16,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_get_vcpu_p2m_idx() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_get_vcpu_p2m_idx>(),
        8usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_get_vcpu_p2m_idx))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_get_vcpu_p2m_idx>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_get_vcpu_p2m_idx))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_get_vcpu_p2m_idx>())).vcpu_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_get_vcpu_p2m_idx),
            "::",
            stringify!(vcpu_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_get_vcpu_p2m_idx>())).altp2m_idx as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_get_vcpu_p2m_idx),
            "::",
            stringify!(altp2m_idx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_hvm_altp2m_set_visibility {
    pub altp2m_idx: u16,
    pub visible: u8,
    pub pad: u8,
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_set_visibility() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_set_visibility>(),
        4usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_set_visibility))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_set_visibility>(),
        2usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_set_visibility))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_set_visibility>())).altp2m_idx as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_set_visibility),
            "::",
            stringify!(altp2m_idx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_set_visibility>())).visible as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_set_visibility),
            "::",
            stringify!(visible)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_set_visibility>())).pad as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_set_visibility),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_hvm_altp2m_op {
    pub version: u32,
    pub cmd: u32,
    pub domain: domid_t,
    pub pad1: u16,
    pub pad2: u32,
    pub u: xen_hvm_altp2m_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_hvm_altp2m_op__bindgen_ty_1 {
    pub domain_state: xen_hvm_altp2m_domain_state,
    pub enable_notify: xen_hvm_altp2m_vcpu_enable_notify,
    pub view: xen_hvm_altp2m_view,
    pub mem_access: xen_hvm_altp2m_mem_access,
    pub change_gfn: xen_hvm_altp2m_change_gfn,
    pub set_mem_access_multi: xen_hvm_altp2m_set_mem_access_multi,
    pub suppress_ve: xen_hvm_altp2m_suppress_ve,
    pub suppress_ve_multi: xen_hvm_altp2m_suppress_ve_multi,
    pub disable_notify: xen_hvm_altp2m_vcpu_disable_notify,
    pub get_vcpu_p2m_idx: xen_hvm_altp2m_get_vcpu_p2m_idx,
    pub set_visibility: xen_hvm_altp2m_set_visibility,
    pub pad: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_op__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_op__bindgen_ty_1>())).domain_state as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
            "::",
            stringify!(domain_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_op__bindgen_ty_1>())).enable_notify as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
            "::",
            stringify!(enable_notify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_op__bindgen_ty_1>())).view as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
            "::",
            stringify!(view)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_op__bindgen_ty_1>())).mem_access as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
            "::",
            stringify!(mem_access)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_op__bindgen_ty_1>())).change_gfn as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
            "::",
            stringify!(change_gfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_op__bindgen_ty_1>())).set_mem_access_multi
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
            "::",
            stringify!(set_mem_access_multi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_op__bindgen_ty_1>())).suppress_ve as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
            "::",
            stringify!(suppress_ve)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_op__bindgen_ty_1>())).suppress_ve_multi
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
            "::",
            stringify!(suppress_ve_multi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_op__bindgen_ty_1>())).disable_notify as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
            "::",
            stringify!(disable_notify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_op__bindgen_ty_1>())).get_vcpu_p2m_idx as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
            "::",
            stringify!(get_vcpu_p2m_idx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_op__bindgen_ty_1>())).set_visibility as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
            "::",
            stringify!(set_visibility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_hvm_altp2m_op__bindgen_ty_1>())).pad as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op__bindgen_ty_1),
            "::",
            stringify!(pad)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_hvm_altp2m_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_hvm_altp2m_op>(),
        80usize,
        concat!("Size of: ", stringify!(xen_hvm_altp2m_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_hvm_altp2m_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_hvm_altp2m_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_altp2m_op>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_altp2m_op>())).cmd as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_altp2m_op>())).domain as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_altp2m_op>())).pad1 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_altp2m_op>())).pad2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_hvm_altp2m_op>())).u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_hvm_altp2m_op),
            "::",
            stringify!(u)
        )
    );
}
pub type xen_hvm_altp2m_op_t = xen_hvm_altp2m_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_hvm_altp2m_op_t {
    pub p: *mut xen_hvm_altp2m_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_hvm_altp2m_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_hvm_altp2m_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_hvm_altp2m_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_hvm_altp2m_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_hvm_altp2m_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_altp2m_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_altp2m_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_hvm_altp2m_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_hvm_altp2m_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_hvm_altp2m_op_t {
    pub p: *mut xen_hvm_altp2m_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_hvm_altp2m_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_hvm_altp2m_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_hvm_altp2m_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_altp2m_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_hvm_altp2m_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_hvm_altp2m_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_hvm_altp2m_op_t {
    pub p: *const xen_hvm_altp2m_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_hvm_altp2m_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_hvm_altp2m_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_hvm_altp2m_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_altp2m_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_hvm_altp2m_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_hvm_altp2m_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_hvm_altp2m_op_t {
    pub p: *const xen_hvm_altp2m_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_hvm_altp2m_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_hvm_altp2m_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_hvm_altp2m_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_altp2m_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_hvm_altp2m_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_hvm_altp2m_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_flask_load {
    pub buffer: __guest_handle_64_char,
    pub size: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_load() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_load>(),
        16usize,
        concat!("Size of: ", stringify!(xen_flask_load))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_load>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_flask_load))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_load>())).buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_load),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_load>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_load),
            "::",
            stringify!(size)
        )
    );
}
pub type xen_flask_load_t = xen_flask_load;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_setenforce {
    pub enforcing: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_setenforce() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_setenforce>(),
        4usize,
        concat!("Size of: ", stringify!(xen_flask_setenforce))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_setenforce>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_flask_setenforce))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_setenforce>())).enforcing as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_setenforce),
            "::",
            stringify!(enforcing)
        )
    );
}
pub type xen_flask_setenforce_t = xen_flask_setenforce;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_flask_sid_context {
    pub sid: u32,
    pub size: u32,
    pub context: __guest_handle_64_char,
}
#[test]
fn bindgen_test_layout_xen_flask_sid_context() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_sid_context>(),
        16usize,
        concat!("Size of: ", stringify!(xen_flask_sid_context))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_sid_context>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_flask_sid_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_sid_context>())).sid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_sid_context),
            "::",
            stringify!(sid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_sid_context>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_sid_context),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_sid_context>())).context as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_sid_context),
            "::",
            stringify!(context)
        )
    );
}
pub type xen_flask_sid_context_t = xen_flask_sid_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_access {
    pub ssid: u32,
    pub tsid: u32,
    pub tclass: u32,
    pub req: u32,
    pub allowed: u32,
    pub audit_allow: u32,
    pub audit_deny: u32,
    pub seqno: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_access() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_access>(),
        32usize,
        concat!("Size of: ", stringify!(xen_flask_access))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_access>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_flask_access))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_access>())).ssid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_access),
            "::",
            stringify!(ssid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_access>())).tsid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_access),
            "::",
            stringify!(tsid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_access>())).tclass as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_access),
            "::",
            stringify!(tclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_access>())).req as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_access),
            "::",
            stringify!(req)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_access>())).allowed as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_access),
            "::",
            stringify!(allowed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_access>())).audit_allow as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_access),
            "::",
            stringify!(audit_allow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_access>())).audit_deny as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_access),
            "::",
            stringify!(audit_deny)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_access>())).seqno as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_access),
            "::",
            stringify!(seqno)
        )
    );
}
pub type xen_flask_access_t = xen_flask_access;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_transition {
    pub ssid: u32,
    pub tsid: u32,
    pub tclass: u32,
    pub newsid: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_transition() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_transition>(),
        16usize,
        concat!("Size of: ", stringify!(xen_flask_transition))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_transition>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_flask_transition))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_transition>())).ssid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_transition),
            "::",
            stringify!(ssid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_transition>())).tsid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_transition),
            "::",
            stringify!(tsid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_transition>())).tclass as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_transition),
            "::",
            stringify!(tclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_transition>())).newsid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_transition),
            "::",
            stringify!(newsid)
        )
    );
}
pub type xen_flask_transition_t = xen_flask_transition;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_flask_boolean {
    pub bool_id: u32,
    pub enforcing: u8,
    pub pending: u8,
    pub new_value: u8,
    pub commit: u8,
    pub size: u32,
    pub name: __guest_handle_64_char,
}
#[test]
fn bindgen_test_layout_xen_flask_boolean() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_boolean>(),
        24usize,
        concat!("Size of: ", stringify!(xen_flask_boolean))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_boolean>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_flask_boolean))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_boolean>())).bool_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_boolean),
            "::",
            stringify!(bool_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_boolean>())).enforcing as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_boolean),
            "::",
            stringify!(enforcing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_boolean>())).pending as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_boolean),
            "::",
            stringify!(pending)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_boolean>())).new_value as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_boolean),
            "::",
            stringify!(new_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_boolean>())).commit as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_boolean),
            "::",
            stringify!(commit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_boolean>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_boolean),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_boolean>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_boolean),
            "::",
            stringify!(name)
        )
    );
}
pub type xen_flask_boolean_t = xen_flask_boolean;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_setavc_threshold {
    pub threshold: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_setavc_threshold() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_setavc_threshold>(),
        4usize,
        concat!("Size of: ", stringify!(xen_flask_setavc_threshold))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_setavc_threshold>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_flask_setavc_threshold))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_setavc_threshold>())).threshold as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_setavc_threshold),
            "::",
            stringify!(threshold)
        )
    );
}
pub type xen_flask_setavc_threshold_t = xen_flask_setavc_threshold;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_hash_stats {
    pub entries: u32,
    pub buckets_used: u32,
    pub buckets_total: u32,
    pub max_chain_len: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_hash_stats() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_hash_stats>(),
        16usize,
        concat!("Size of: ", stringify!(xen_flask_hash_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_hash_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_flask_hash_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_hash_stats>())).entries as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_hash_stats),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_hash_stats>())).buckets_used as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_hash_stats),
            "::",
            stringify!(buckets_used)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_hash_stats>())).buckets_total as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_hash_stats),
            "::",
            stringify!(buckets_total)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_hash_stats>())).max_chain_len as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_hash_stats),
            "::",
            stringify!(max_chain_len)
        )
    );
}
pub type xen_flask_hash_stats_t = xen_flask_hash_stats;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_cache_stats {
    pub cpu: u32,
    pub lookups: u32,
    pub hits: u32,
    pub misses: u32,
    pub allocations: u32,
    pub reclaims: u32,
    pub frees: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_cache_stats() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_cache_stats>(),
        28usize,
        concat!("Size of: ", stringify!(xen_flask_cache_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_cache_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_flask_cache_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_cache_stats>())).cpu as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_cache_stats),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_cache_stats>())).lookups as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_cache_stats),
            "::",
            stringify!(lookups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_cache_stats>())).hits as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_cache_stats),
            "::",
            stringify!(hits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_cache_stats>())).misses as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_cache_stats),
            "::",
            stringify!(misses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_cache_stats>())).allocations as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_cache_stats),
            "::",
            stringify!(allocations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_cache_stats>())).reclaims as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_cache_stats),
            "::",
            stringify!(reclaims)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_cache_stats>())).frees as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_cache_stats),
            "::",
            stringify!(frees)
        )
    );
}
pub type xen_flask_cache_stats_t = xen_flask_cache_stats;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_ocontext {
    pub ocon: u32,
    pub sid: u32,
    pub low: u64,
    pub high: u64,
}
#[test]
fn bindgen_test_layout_xen_flask_ocontext() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_ocontext>(),
        24usize,
        concat!("Size of: ", stringify!(xen_flask_ocontext))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_ocontext>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_flask_ocontext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_ocontext>())).ocon as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_ocontext),
            "::",
            stringify!(ocon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_ocontext>())).sid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_ocontext),
            "::",
            stringify!(sid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_ocontext>())).low as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_ocontext),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_ocontext>())).high as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_ocontext),
            "::",
            stringify!(high)
        )
    );
}
pub type xen_flask_ocontext_t = xen_flask_ocontext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_peersid {
    pub evtchn: evtchn_port_t,
    pub sid: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_peersid() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_peersid>(),
        8usize,
        concat!("Size of: ", stringify!(xen_flask_peersid))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_peersid>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_flask_peersid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_peersid>())).evtchn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_peersid),
            "::",
            stringify!(evtchn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_peersid>())).sid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_peersid),
            "::",
            stringify!(sid)
        )
    );
}
pub type xen_flask_peersid_t = xen_flask_peersid;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_flask_relabel {
    pub domid: u32,
    pub sid: u32,
}
#[test]
fn bindgen_test_layout_xen_flask_relabel() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_relabel>(),
        8usize,
        concat!("Size of: ", stringify!(xen_flask_relabel))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_relabel>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_flask_relabel))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_relabel>())).domid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_relabel),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_relabel>())).sid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_relabel),
            "::",
            stringify!(sid)
        )
    );
}
pub type xen_flask_relabel_t = xen_flask_relabel;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_flask_devicetree_label {
    pub sid: u32,
    pub length: u32,
    pub path: __guest_handle_64_char,
}
#[test]
fn bindgen_test_layout_xen_flask_devicetree_label() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_devicetree_label>(),
        16usize,
        concat!("Size of: ", stringify!(xen_flask_devicetree_label))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_devicetree_label>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_flask_devicetree_label))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_devicetree_label>())).sid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_devicetree_label),
            "::",
            stringify!(sid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_devicetree_label>())).length as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_devicetree_label),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_devicetree_label>())).path as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_devicetree_label),
            "::",
            stringify!(path)
        )
    );
}
pub type xen_flask_devicetree_label_t = xen_flask_devicetree_label;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_flask_op {
    pub cmd: u32,
    pub interface_version: u32,
    pub u: xen_flask_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_flask_op__bindgen_ty_1 {
    pub load: xen_flask_load_t,
    pub enforce: xen_flask_setenforce_t,
    pub sid_context: xen_flask_sid_context_t,
    pub access: xen_flask_access_t,
    pub transition: xen_flask_transition_t,
    pub boolean: xen_flask_boolean_t,
    pub setavc_threshold: xen_flask_setavc_threshold_t,
    pub hash_stats: xen_flask_hash_stats_t,
    pub cache_stats: xen_flask_cache_stats_t,
    pub ocontext: xen_flask_ocontext_t,
    pub peersid: xen_flask_peersid_t,
    pub relabel: xen_flask_relabel_t,
    pub devicetree_label: xen_flask_devicetree_label_t,
}
#[test]
fn bindgen_test_layout_xen_flask_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_op__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(xen_flask_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_flask_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_op__bindgen_ty_1>())).load as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_op__bindgen_ty_1),
            "::",
            stringify!(load)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_op__bindgen_ty_1>())).enforce as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_op__bindgen_ty_1),
            "::",
            stringify!(enforce)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_op__bindgen_ty_1>())).sid_context as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_op__bindgen_ty_1),
            "::",
            stringify!(sid_context)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_op__bindgen_ty_1>())).access as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_op__bindgen_ty_1),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_op__bindgen_ty_1>())).transition as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_op__bindgen_ty_1),
            "::",
            stringify!(transition)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_op__bindgen_ty_1>())).boolean as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_op__bindgen_ty_1),
            "::",
            stringify!(boolean)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_op__bindgen_ty_1>())).setavc_threshold as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_op__bindgen_ty_1),
            "::",
            stringify!(setavc_threshold)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_op__bindgen_ty_1>())).hash_stats as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_op__bindgen_ty_1),
            "::",
            stringify!(hash_stats)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_op__bindgen_ty_1>())).cache_stats as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_op__bindgen_ty_1),
            "::",
            stringify!(cache_stats)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_op__bindgen_ty_1>())).ocontext as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_op__bindgen_ty_1),
            "::",
            stringify!(ocontext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_op__bindgen_ty_1>())).peersid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_op__bindgen_ty_1),
            "::",
            stringify!(peersid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_op__bindgen_ty_1>())).relabel as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_op__bindgen_ty_1),
            "::",
            stringify!(relabel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_flask_op__bindgen_ty_1>())).devicetree_label as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_op__bindgen_ty_1),
            "::",
            stringify!(devicetree_label)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_flask_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_flask_op>(),
        40usize,
        concat!("Size of: ", stringify!(xen_flask_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_flask_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_flask_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_op>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_op>())).interface_version as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_op),
            "::",
            stringify!(interface_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_flask_op>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_flask_op),
            "::",
            stringify!(u)
        )
    );
}
pub type xen_flask_op_t = xen_flask_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_flask_op_t {
    pub p: *mut xen_flask_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_flask_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_flask_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_flask_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_flask_op_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_flask_op_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_xen_flask_op_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_flask_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_xen_flask_op_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_flask_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_flask_op_t {
    pub p: *mut xen_flask_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_flask_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_flask_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_flask_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_flask_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_flask_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_flask_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_flask_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_flask_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_flask_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_flask_op_t {
    pub p: *const xen_flask_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_flask_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_flask_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_xen_flask_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_flask_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_flask_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_flask_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_flask_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_flask_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_flask_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_flask_op_t {
    pub p: *const xen_flask_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_flask_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_flask_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_flask_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_flask_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_flask_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_flask_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_flask_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_flask_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_flask_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_image {
    pub indirection_page: ::std::os::raw::c_ulong,
    pub start_address: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_xen_kexec_image() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_image>(),
        16usize,
        concat!("Size of: ", stringify!(xen_kexec_image))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_image>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_kexec_image))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_kexec_image>())).indirection_page as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_image),
            "::",
            stringify!(indirection_page)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_image>())).start_address as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_image),
            "::",
            stringify!(start_address)
        )
    );
}
pub type xen_kexec_image_t = xen_kexec_image;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_exec {
    pub type_: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_xen_kexec_exec() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_exec>(),
        4usize,
        concat!("Size of: ", stringify!(xen_kexec_exec))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_exec>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_kexec_exec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_exec>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_exec),
            "::",
            stringify!(type_)
        )
    );
}
pub type xen_kexec_exec_t = xen_kexec_exec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_load_v1 {
    pub type_: ::std::os::raw::c_int,
    pub image: xen_kexec_image_t,
}
#[test]
fn bindgen_test_layout_xen_kexec_load_v1() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_load_v1>(),
        24usize,
        concat!("Size of: ", stringify!(xen_kexec_load_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_load_v1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_kexec_load_v1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_load_v1>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_load_v1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_load_v1>())).image as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_load_v1),
            "::",
            stringify!(image)
        )
    );
}
pub type xen_kexec_load_v1_t = xen_kexec_load_v1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_range {
    pub range: ::std::os::raw::c_int,
    pub nr: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_ulong,
    pub start: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_xen_kexec_range() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_range>(),
        24usize,
        concat!("Size of: ", stringify!(xen_kexec_range))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_range>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_kexec_range))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_range>())).range as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_range),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_range>())).nr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_range),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_range>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_range),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_range>())).start as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_range),
            "::",
            stringify!(start)
        )
    );
}
pub type xen_kexec_range_t = xen_kexec_range;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_kexec_segment {
    pub buf: xen_kexec_segment__bindgen_ty_1,
    pub buf_size: u64,
    pub dest_maddr: u64,
    pub dest_size: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_kexec_segment__bindgen_ty_1 {
    pub h: __guest_handle_64_const_void,
    pub _pad: u64,
}
#[test]
fn bindgen_test_layout_xen_kexec_segment__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_segment__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xen_kexec_segment__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_segment__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_kexec_segment__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_kexec_segment__bindgen_ty_1>())).h as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_segment__bindgen_ty_1),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_kexec_segment__bindgen_ty_1>()))._pad as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_segment__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_kexec_segment() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_segment>(),
        32usize,
        concat!("Size of: ", stringify!(xen_kexec_segment))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_segment>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_kexec_segment))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_segment>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_segment),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_segment>())).buf_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_segment),
            "::",
            stringify!(buf_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_segment>())).dest_maddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_segment),
            "::",
            stringify!(dest_maddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_segment>())).dest_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_segment),
            "::",
            stringify!(dest_size)
        )
    );
}
pub type xen_kexec_segment_t = xen_kexec_segment;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_kexec_segment_t {
    pub p: *mut xen_kexec_segment_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_kexec_segment_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_kexec_segment_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_kexec_segment_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_kexec_segment_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_kexec_segment_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_kexec_segment_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_kexec_segment_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_kexec_segment_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_kexec_segment_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_kexec_segment_t {
    pub p: *mut xen_kexec_segment_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_kexec_segment_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_kexec_segment_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_kexec_segment_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_kexec_segment_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_kexec_segment_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_kexec_segment_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_kexec_segment_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_kexec_segment_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_kexec_segment_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_kexec_segment_t {
    pub p: *const xen_kexec_segment_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_kexec_segment_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_kexec_segment_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_kexec_segment_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_kexec_segment_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_kexec_segment_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_kexec_segment_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_kexec_segment_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_kexec_segment_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_kexec_segment_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_kexec_segment_t {
    pub p: *const xen_kexec_segment_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_kexec_segment_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_kexec_segment_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_kexec_segment_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_kexec_segment_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_kexec_segment_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_kexec_segment_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_kexec_segment_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_kexec_segment_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_kexec_segment_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_kexec_load {
    pub type_: u8,
    pub _pad: u8,
    pub arch: u16,
    pub nr_segments: u32,
    pub segments: xen_kexec_load__bindgen_ty_1,
    pub entry_maddr: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_kexec_load__bindgen_ty_1 {
    pub h: __guest_handle_64_xen_kexec_segment_t,
    pub _pad: u64,
}
#[test]
fn bindgen_test_layout_xen_kexec_load__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_load__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(xen_kexec_load__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_load__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_kexec_load__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_load__bindgen_ty_1>())).h as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_load__bindgen_ty_1),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_kexec_load__bindgen_ty_1>()))._pad as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_load__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_kexec_load() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_load>(),
        24usize,
        concat!("Size of: ", stringify!(xen_kexec_load))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_load>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_kexec_load))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_load>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_load),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_load>()))._pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_load),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_load>())).arch as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_load),
            "::",
            stringify!(arch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_load>())).nr_segments as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_load),
            "::",
            stringify!(nr_segments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_load>())).segments as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_load),
            "::",
            stringify!(segments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_load>())).entry_maddr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_load),
            "::",
            stringify!(entry_maddr)
        )
    );
}
pub type xen_kexec_load_t = xen_kexec_load;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_kexec_load_t {
    pub p: *mut xen_kexec_load_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_kexec_load_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_kexec_load_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_kexec_load_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_kexec_load_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xen_kexec_load_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_kexec_load_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_kexec_load_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_kexec_load_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_kexec_load_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_kexec_load_t {
    pub p: *mut xen_kexec_load_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_kexec_load_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_kexec_load_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_kexec_load_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_kexec_load_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_kexec_load_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_kexec_load_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_kexec_load_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_kexec_load_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_kexec_load_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_kexec_load_t {
    pub p: *const xen_kexec_load_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_kexec_load_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_kexec_load_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_kexec_load_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_kexec_load_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_kexec_load_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_kexec_load_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_kexec_load_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_kexec_load_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_kexec_load_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_kexec_load_t {
    pub p: *const xen_kexec_load_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_kexec_load_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_kexec_load_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_kexec_load_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_kexec_load_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_kexec_load_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_kexec_load_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_kexec_load_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_kexec_load_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_kexec_load_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_unload {
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_xen_kexec_unload() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_unload>(),
        1usize,
        concat!("Size of: ", stringify!(xen_kexec_unload))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_unload>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_kexec_unload))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_unload>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_unload),
            "::",
            stringify!(type_)
        )
    );
}
pub type xen_kexec_unload_t = xen_kexec_unload;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_kexec_unload_t {
    pub p: *mut xen_kexec_unload_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_kexec_unload_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_kexec_unload_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_kexec_unload_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_kexec_unload_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_kexec_unload_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_kexec_unload_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_kexec_unload_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_kexec_unload_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_kexec_unload_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_kexec_unload_t {
    pub p: *mut xen_kexec_unload_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_kexec_unload_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_kexec_unload_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_kexec_unload_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_kexec_unload_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_kexec_unload_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_kexec_unload_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_kexec_unload_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_kexec_unload_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_kexec_unload_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_kexec_unload_t {
    pub p: *const xen_kexec_unload_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_kexec_unload_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_kexec_unload_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_kexec_unload_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_kexec_unload_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_kexec_unload_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_kexec_unload_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_kexec_unload_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_kexec_unload_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_kexec_unload_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_kexec_unload_t {
    pub p: *const xen_kexec_unload_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_kexec_unload_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_kexec_unload_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_kexec_unload_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_kexec_unload_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_kexec_unload_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_kexec_unload_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_kexec_unload_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_kexec_unload_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_kexec_unload_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_kexec_status {
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_xen_kexec_status() {
    assert_eq!(
        ::std::mem::size_of::<xen_kexec_status>(),
        1usize,
        concat!("Size of: ", stringify!(xen_kexec_status))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_kexec_status>(),
        1usize,
        concat!("Alignment of ", stringify!(xen_kexec_status))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_kexec_status>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_kexec_status),
            "::",
            stringify!(type_)
        )
    );
}
pub type xen_kexec_status_t = xen_kexec_status;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_kexec_status_t {
    pub p: *mut xen_kexec_status_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_kexec_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_kexec_status_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_kexec_status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_kexec_status_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_kexec_status_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_kexec_status_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_kexec_status_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_kexec_status_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_kexec_status_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_kexec_status_t {
    pub p: *mut xen_kexec_status_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_kexec_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_kexec_status_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_kexec_status_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_kexec_status_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_kexec_status_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_kexec_status_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_kexec_status_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_kexec_status_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_kexec_status_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_kexec_status_t {
    pub p: *const xen_kexec_status_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_kexec_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_kexec_status_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_kexec_status_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_kexec_status_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_kexec_status_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_kexec_status_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_kexec_status_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_kexec_status_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_kexec_status_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_kexec_status_t {
    pub p: *const xen_kexec_status_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_kexec_status_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_kexec_status_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_kexec_status_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_kexec_status_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_kexec_status_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_kexec_status_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_kexec_status_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_kexec_status_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_kexec_status_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_settime32 {
    pub secs: u32,
    pub nsecs: u32,
    pub system_time: u64,
}
#[test]
fn bindgen_test_layout_xenpf_settime32() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_settime32>(),
        16usize,
        concat!("Size of: ", stringify!(xenpf_settime32))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_settime32>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_settime32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_settime32>())).secs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_settime32),
            "::",
            stringify!(secs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_settime32>())).nsecs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_settime32),
            "::",
            stringify!(nsecs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_settime32>())).system_time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_settime32),
            "::",
            stringify!(system_time)
        )
    );
}
pub type xenpf_settime32_t = xenpf_settime32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_settime64 {
    pub secs: u64,
    pub nsecs: u32,
    pub mbz: u32,
    pub system_time: u64,
}
#[test]
fn bindgen_test_layout_xenpf_settime64() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_settime64>(),
        24usize,
        concat!("Size of: ", stringify!(xenpf_settime64))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_settime64>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_settime64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_settime64>())).secs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_settime64),
            "::",
            stringify!(secs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_settime64>())).nsecs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_settime64),
            "::",
            stringify!(nsecs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_settime64>())).mbz as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_settime64),
            "::",
            stringify!(mbz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_settime64>())).system_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_settime64),
            "::",
            stringify!(system_time)
        )
    );
}
pub type xenpf_settime64_t = xenpf_settime64;
pub type xenpf_settime_t = xenpf_settime64;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_settime_t {
    pub p: *mut xenpf_settime_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_settime_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_settime_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_settime_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_settime_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xenpf_settime_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_settime_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_settime_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_settime_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_settime_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_settime_t {
    pub p: *mut xenpf_settime_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_settime_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_settime_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xenpf_settime_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_settime_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_settime_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_settime_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_settime_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_settime_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_settime_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_settime_t {
    pub p: *const xenpf_settime_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_settime_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_settime_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_settime_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_settime_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_settime_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_settime_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_settime_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_settime_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_settime_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_settime_t {
    pub p: *const xenpf_settime_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_settime_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_settime_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_settime_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_settime_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_settime_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_settime_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_settime_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_settime_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_settime_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_add_memtype {
    pub mfn: xen_pfn_t,
    pub nr_mfns: u64,
    pub type_: u32,
    pub handle: u32,
    pub reg: u32,
}
#[test]
fn bindgen_test_layout_xenpf_add_memtype() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_add_memtype>(),
        32usize,
        concat!("Size of: ", stringify!(xenpf_add_memtype))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_add_memtype>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_add_memtype))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_add_memtype>())).mfn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_add_memtype),
            "::",
            stringify!(mfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_add_memtype>())).nr_mfns as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_add_memtype),
            "::",
            stringify!(nr_mfns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_add_memtype>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_add_memtype),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_add_memtype>())).handle as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_add_memtype),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_add_memtype>())).reg as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_add_memtype),
            "::",
            stringify!(reg)
        )
    );
}
pub type xenpf_add_memtype_t = xenpf_add_memtype;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_add_memtype_t {
    pub p: *mut xenpf_add_memtype_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_add_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_add_memtype_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_add_memtype_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_add_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_add_memtype_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_add_memtype_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_add_memtype_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_add_memtype_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_add_memtype_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_add_memtype_t {
    pub p: *mut xenpf_add_memtype_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_add_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_add_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_add_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_add_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_add_memtype_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_add_memtype_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_add_memtype_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_add_memtype_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_add_memtype_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_add_memtype_t {
    pub p: *const xenpf_add_memtype_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_add_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_add_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_add_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_add_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_add_memtype_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_add_memtype_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_add_memtype_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_add_memtype_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_add_memtype_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_add_memtype_t {
    pub p: *const xenpf_add_memtype_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_add_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_add_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_add_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_add_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_add_memtype_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_add_memtype_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_add_memtype_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_add_memtype_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_add_memtype_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_del_memtype {
    pub handle: u32,
    pub reg: u32,
}
#[test]
fn bindgen_test_layout_xenpf_del_memtype() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_del_memtype>(),
        8usize,
        concat!("Size of: ", stringify!(xenpf_del_memtype))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_del_memtype>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_del_memtype))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_del_memtype>())).handle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_del_memtype),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_del_memtype>())).reg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_del_memtype),
            "::",
            stringify!(reg)
        )
    );
}
pub type xenpf_del_memtype_t = xenpf_del_memtype;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_del_memtype_t {
    pub p: *mut xenpf_del_memtype_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_del_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_del_memtype_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_del_memtype_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_del_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_del_memtype_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_del_memtype_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_del_memtype_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_del_memtype_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_del_memtype_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_del_memtype_t {
    pub p: *mut xenpf_del_memtype_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_del_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_del_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_del_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_del_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_del_memtype_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_del_memtype_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_del_memtype_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_del_memtype_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_del_memtype_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_del_memtype_t {
    pub p: *const xenpf_del_memtype_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_del_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_del_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_del_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_del_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_del_memtype_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_del_memtype_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_del_memtype_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_del_memtype_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_del_memtype_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_del_memtype_t {
    pub p: *const xenpf_del_memtype_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_del_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_del_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_del_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_del_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_del_memtype_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_del_memtype_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_del_memtype_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_del_memtype_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_del_memtype_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_read_memtype {
    pub reg: u32,
    pub mfn: xen_pfn_t,
    pub nr_mfns: u64,
    pub type_: u32,
}
#[test]
fn bindgen_test_layout_xenpf_read_memtype() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_read_memtype>(),
        32usize,
        concat!("Size of: ", stringify!(xenpf_read_memtype))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_read_memtype>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_read_memtype))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_read_memtype>())).reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_read_memtype),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_read_memtype>())).mfn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_read_memtype),
            "::",
            stringify!(mfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_read_memtype>())).nr_mfns as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_read_memtype),
            "::",
            stringify!(nr_mfns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_read_memtype>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_read_memtype),
            "::",
            stringify!(type_)
        )
    );
}
pub type xenpf_read_memtype_t = xenpf_read_memtype;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_read_memtype_t {
    pub p: *mut xenpf_read_memtype_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_read_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_read_memtype_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_read_memtype_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_read_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_read_memtype_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_read_memtype_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_read_memtype_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_read_memtype_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_read_memtype_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_read_memtype_t {
    pub p: *mut xenpf_read_memtype_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_read_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_read_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_read_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_read_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_read_memtype_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_read_memtype_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_read_memtype_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_read_memtype_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_read_memtype_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_read_memtype_t {
    pub p: *const xenpf_read_memtype_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_read_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_read_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_read_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_read_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_read_memtype_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_read_memtype_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_read_memtype_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_read_memtype_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_read_memtype_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_read_memtype_t {
    pub p: *const xenpf_read_memtype_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_read_memtype_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_read_memtype_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_read_memtype_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_read_memtype_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_read_memtype_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_read_memtype_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_read_memtype_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_read_memtype_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_read_memtype_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_microcode_update {
    pub data: __guest_handle_64_const_void,
    pub length: u32,
}
#[test]
fn bindgen_test_layout_xenpf_microcode_update() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_microcode_update>(),
        16usize,
        concat!("Size of: ", stringify!(xenpf_microcode_update))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_microcode_update>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_microcode_update))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_microcode_update>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_microcode_update),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_microcode_update>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_microcode_update),
            "::",
            stringify!(length)
        )
    );
}
pub type xenpf_microcode_update_t = xenpf_microcode_update;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_microcode_update_t {
    pub p: *mut xenpf_microcode_update_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_microcode_update_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_microcode_update_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xenpf_microcode_update_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_microcode_update_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_microcode_update_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_microcode_update_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_microcode_update_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_microcode_update_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_microcode_update_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_microcode_update_t {
    pub p: *mut xenpf_microcode_update_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_microcode_update_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_microcode_update_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_microcode_update_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_microcode_update_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_microcode_update_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_microcode_update_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_microcode_update_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_microcode_update_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_microcode_update_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_microcode_update_t {
    pub p: *const xenpf_microcode_update_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_microcode_update_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_microcode_update_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_microcode_update_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_microcode_update_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_microcode_update_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_microcode_update_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_microcode_update_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_microcode_update_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_microcode_update_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_microcode_update_t {
    pub p: *const xenpf_microcode_update_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_microcode_update_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_microcode_update_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_microcode_update_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_microcode_update_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_microcode_update_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_microcode_update_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_microcode_update_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_microcode_update_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_microcode_update_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_platform_quirk {
    pub quirk_id: u32,
}
#[test]
fn bindgen_test_layout_xenpf_platform_quirk() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_platform_quirk>(),
        4usize,
        concat!("Size of: ", stringify!(xenpf_platform_quirk))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_platform_quirk>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_platform_quirk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_platform_quirk>())).quirk_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_platform_quirk),
            "::",
            stringify!(quirk_id)
        )
    );
}
pub type xenpf_platform_quirk_t = xenpf_platform_quirk;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_platform_quirk_t {
    pub p: *mut xenpf_platform_quirk_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_platform_quirk_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_platform_quirk_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xenpf_platform_quirk_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_platform_quirk_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_platform_quirk_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_platform_quirk_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_platform_quirk_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_platform_quirk_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_platform_quirk_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_platform_quirk_t {
    pub p: *mut xenpf_platform_quirk_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_platform_quirk_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_platform_quirk_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_platform_quirk_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_platform_quirk_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_platform_quirk_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_platform_quirk_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_platform_quirk_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_platform_quirk_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_platform_quirk_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_platform_quirk_t {
    pub p: *const xenpf_platform_quirk_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_platform_quirk_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_platform_quirk_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_platform_quirk_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_platform_quirk_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_platform_quirk_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_platform_quirk_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_platform_quirk_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_platform_quirk_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_platform_quirk_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_platform_quirk_t {
    pub p: *const xenpf_platform_quirk_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_platform_quirk_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_platform_quirk_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_platform_quirk_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_platform_quirk_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_platform_quirk_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_platform_quirk_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_platform_quirk_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_platform_quirk_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_platform_quirk_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_time {
    pub year: u16,
    pub month: u8,
    pub day: u8,
    pub hour: u8,
    pub min: u8,
    pub sec: u8,
    pub ns: u32,
    pub tz: i16,
    pub daylight: u8,
}
#[test]
fn bindgen_test_layout_xenpf_efi_time() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_time>(),
        16usize,
        concat!("Size of: ", stringify!(xenpf_efi_time))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_time>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_efi_time))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_efi_time>())).year as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_time),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_efi_time>())).month as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_time),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_efi_time>())).day as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_time),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_efi_time>())).hour as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_time),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_efi_time>())).min as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_time),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_efi_time>())).sec as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_time),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_efi_time>())).ns as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_time),
            "::",
            stringify!(ns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_efi_time>())).tz as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_time),
            "::",
            stringify!(tz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_efi_time>())).daylight as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_time),
            "::",
            stringify!(daylight)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_guid {
    pub data1: u32,
    pub data2: u16,
    pub data3: u16,
    pub data4: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_xenpf_efi_guid() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_guid>(),
        16usize,
        concat!("Size of: ", stringify!(xenpf_efi_guid))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_guid>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_efi_guid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_efi_guid>())).data1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_guid),
            "::",
            stringify!(data1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_efi_guid>())).data2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_guid),
            "::",
            stringify!(data2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_efi_guid>())).data3 as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_guid),
            "::",
            stringify!(data3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_efi_guid>())).data4 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_guid),
            "::",
            stringify!(data4)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_efi_runtime_call {
    pub function: u32,
    pub misc: u32,
    pub status: xen_ulong_t,
    pub u: xenpf_efi_runtime_call__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_efi_runtime_call__bindgen_ty_1 {
    pub get_time: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1,
    pub set_time: xenpf_efi_time,
    pub get_wakeup_time: xenpf_efi_time,
    pub set_wakeup_time: xenpf_efi_time,
    pub get_variable: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2,
    pub set_variable: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2,
    pub get_next_variable_name: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3,
    pub query_variable_info: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4,
    pub query_capsule_capabilities: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5,
    pub update_capsule: xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1 {
    pub time: xenpf_efi_time,
    pub resolution: u32,
    pub accuracy: u32,
}
#[test]
fn bindgen_test_layout_xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1>())).time
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1>()))
                .resolution as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(resolution)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1>())).accuracy
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(accuracy)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2 {
    pub name: __guest_handle_64_void,
    pub size: xen_ulong_t,
    pub data: __guest_handle_64_void,
    pub vendor_guid: xenpf_efi_guid,
}
#[test]
fn bindgen_test_layout_xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2>())).name
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2>())).size
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2>())).data
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2>()))
                .vendor_guid as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(vendor_guid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3 {
    pub size: xen_ulong_t,
    pub name: __guest_handle_64_void,
    pub vendor_guid: xenpf_efi_guid,
}
#[test]
fn bindgen_test_layout_xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3>())).size
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3>())).name
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3>()))
                .vendor_guid as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(vendor_guid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4 {
    pub attr: u32,
    pub max_store_size: u64,
    pub remain_store_size: u64,
    pub max_size: u64,
}
#[test]
fn bindgen_test_layout_xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4>())).attr
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4>()))
                .max_store_size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(max_store_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4>()))
                .remain_store_size as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(remain_store_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4>())).max_size
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(max_size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5 {
    pub capsule_header_array: __guest_handle_64_void,
    pub capsule_count: xen_ulong_t,
    pub max_capsule_size: u64,
    pub reset_type: u32,
}
#[test]
fn bindgen_test_layout_xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5>()))
                .capsule_header_array as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(capsule_header_array)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5>()))
                .capsule_count as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(capsule_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5>()))
                .max_capsule_size as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(max_capsule_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5>()))
                .reset_type as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(reset_type)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6 {
    pub capsule_header_array: __guest_handle_64_void,
    pub capsule_count: xen_ulong_t,
    pub sg_list: u64,
}
#[test]
fn bindgen_test_layout_xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6>()))
                .capsule_header_array as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(capsule_header_array)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6>()))
                .capsule_count as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(capsule_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6>())).sg_list
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(sg_list)
        )
    );
}
#[test]
fn bindgen_test_layout_xenpf_efi_runtime_call__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_runtime_call__bindgen_ty_1>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_runtime_call__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1>())).get_time as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
            "::",
            stringify!(get_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1>())).set_time as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
            "::",
            stringify!(set_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1>())).get_wakeup_time
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
            "::",
            stringify!(get_wakeup_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1>())).set_wakeup_time
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
            "::",
            stringify!(set_wakeup_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1>())).get_variable
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
            "::",
            stringify!(get_variable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1>())).set_variable
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
            "::",
            stringify!(set_variable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1>())).get_next_variable_name
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
            "::",
            stringify!(get_next_variable_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1>())).query_variable_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
            "::",
            stringify!(query_variable_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1>()))
                .query_capsule_capabilities as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
            "::",
            stringify!(query_capsule_capabilities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_efi_runtime_call__bindgen_ty_1>())).update_capsule
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call__bindgen_ty_1),
            "::",
            stringify!(update_capsule)
        )
    );
}
#[test]
fn bindgen_test_layout_xenpf_efi_runtime_call() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_efi_runtime_call>(),
        56usize,
        concat!("Size of: ", stringify!(xenpf_efi_runtime_call))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_efi_runtime_call>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_efi_runtime_call))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_efi_runtime_call>())).function as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_efi_runtime_call>())).misc as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call),
            "::",
            stringify!(misc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_efi_runtime_call>())).status as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_efi_runtime_call>())).u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_efi_runtime_call),
            "::",
            stringify!(u)
        )
    );
}
pub type xenpf_efi_runtime_call_t = xenpf_efi_runtime_call;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_efi_runtime_call_t {
    pub p: *mut xenpf_efi_runtime_call_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_efi_runtime_call_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_efi_runtime_call_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xenpf_efi_runtime_call_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_efi_runtime_call_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_efi_runtime_call_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_efi_runtime_call_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_efi_runtime_call_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_efi_runtime_call_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_efi_runtime_call_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_efi_runtime_call_t {
    pub p: *mut xenpf_efi_runtime_call_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_efi_runtime_call_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_efi_runtime_call_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_efi_runtime_call_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_efi_runtime_call_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_efi_runtime_call_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_efi_runtime_call_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_efi_runtime_call_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_efi_runtime_call_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_efi_runtime_call_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_efi_runtime_call_t {
    pub p: *const xenpf_efi_runtime_call_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_efi_runtime_call_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_efi_runtime_call_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_efi_runtime_call_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_efi_runtime_call_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_efi_runtime_call_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_efi_runtime_call_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_efi_runtime_call_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_efi_runtime_call_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_efi_runtime_call_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_efi_runtime_call_t {
    pub p: *const xenpf_efi_runtime_call_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_efi_runtime_call_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_efi_runtime_call_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_efi_runtime_call_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_efi_runtime_call_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_efi_runtime_call_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_efi_runtime_call_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_efi_runtime_call_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_efi_runtime_call_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_efi_runtime_call_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_firmware_info {
    pub type_: u32,
    pub index: u32,
    pub u: xenpf_firmware_info__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_firmware_info__bindgen_ty_1 {
    pub disk_info: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1,
    pub disk_mbr_signature: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2,
    pub vbeddc_info: xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3,
    pub efi_info: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info,
    pub kbd_shift_flags: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1 {
    pub device: u8,
    pub version: u8,
    pub interface_support: u16,
    pub legacy_max_cylinder: u16,
    pub legacy_max_head: u8,
    pub legacy_sectors_per_track: u8,
    pub edd_params: __guest_handle_64_void,
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1>())).device
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1>())).version
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1>()))
                .interface_support as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(interface_support)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1>()))
                .legacy_max_cylinder as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(legacy_max_cylinder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1>()))
                .legacy_max_head as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(legacy_max_head)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1>()))
                .legacy_sectors_per_track as *const _ as usize
        },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(legacy_sectors_per_track)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1>())).edd_params
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(edd_params)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2 {
    pub device: u8,
    pub mbr_signature: u32,
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2>())).device
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2>()))
                .mbr_signature as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(mbr_signature)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3 {
    pub capabilities: u8,
    pub edid_transfer_time: u8,
    pub edid: __guest_handle_64_uint8,
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3>())).capabilities
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(capabilities)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3>()))
                .edid_transfer_time as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(edid_transfer_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3>())).edid
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(edid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info {
    pub version: u32,
    pub cfg: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1,
    pub vendor: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2,
    pub mem: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3,
    pub pci_rom: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4,
    pub apple_properties: xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1 {
    pub addr: u64,
    pub nent: u32,
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1>(
            )))
            .addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1>(
            )))
            .nent as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_1),
            "::",
            stringify!(nent)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2 {
    pub revision: u32,
    pub bufsz: u32,
    pub name: __guest_handle_64_void,
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2>(
            )))
            .revision as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2),
            "::",
            stringify!(revision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2>(
            )))
            .bufsz as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2),
            "::",
            stringify!(bufsz)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2>(
            )))
            .name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_2),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3 {
    pub addr: u64,
    pub size: u64,
    pub attr: u64,
    pub type_: u32,
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3>(
            )))
            .addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3>(
            )))
            .size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3>(
            )))
            .attr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3>(
            )))
            .type_ as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_3),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4 {
    pub segment: u16,
    pub bus: u8,
    pub devfn: u8,
    pub vendor: u16,
    pub devid: u16,
    pub address: u64,
    pub size: xen_ulong_t,
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4>(
            )))
            .segment as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4),
            "::",
            stringify!(segment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4>(
            )))
            .bus as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4),
            "::",
            stringify!(bus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4>(
            )))
            .devfn as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4),
            "::",
            stringify!(devfn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4>(
            )))
            .vendor as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4),
            "::",
            stringify!(vendor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4>(
            )))
            .devid as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4),
            "::",
            stringify!(devid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4>(
            )))
            .address as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4>(
            )))
            .size as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_4),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5 {
    pub address: u64,
    pub size: xen_ulong_t,
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5>(
            )))
            .address as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5>(
            )))
            .size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info__bindgen_ty_5),
            "::",
            stringify!(size)
        )
    );
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info>())).version
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info>())).cfg
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info),
            "::",
            stringify!(cfg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info>())).vendor
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info),
            "::",
            stringify!(vendor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info>())).mem
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info>())).pci_rom
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info),
            "::",
            stringify!(pci_rom)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info>()))
                .apple_properties as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1_xenpf_efi_info),
            "::",
            stringify!(apple_properties)
        )
    );
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(xenpf_firmware_info__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_firmware_info__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1>())).disk_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1),
            "::",
            stringify!(disk_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1>())).disk_mbr_signature
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1),
            "::",
            stringify!(disk_mbr_signature)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1>())).vbeddc_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1),
            "::",
            stringify!(vbeddc_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1>())).efi_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1),
            "::",
            stringify!(efi_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_firmware_info__bindgen_ty_1>())).kbd_shift_flags
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info__bindgen_ty_1),
            "::",
            stringify!(kbd_shift_flags)
        )
    );
}
#[test]
fn bindgen_test_layout_xenpf_firmware_info() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_firmware_info>(),
        40usize,
        concat!("Size of: ", stringify!(xenpf_firmware_info))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_firmware_info>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_firmware_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_firmware_info>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_firmware_info>())).index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_firmware_info>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_firmware_info),
            "::",
            stringify!(u)
        )
    );
}
pub type xenpf_firmware_info_t = xenpf_firmware_info;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_firmware_info_t {
    pub p: *mut xenpf_firmware_info_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_firmware_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_firmware_info_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xenpf_firmware_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_firmware_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_firmware_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_firmware_info_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_firmware_info_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_firmware_info_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_firmware_info_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_firmware_info_t {
    pub p: *mut xenpf_firmware_info_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_firmware_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_firmware_info_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_firmware_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_firmware_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_firmware_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_firmware_info_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_firmware_info_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_firmware_info_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_firmware_info_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_firmware_info_t {
    pub p: *const xenpf_firmware_info_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_firmware_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_firmware_info_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_firmware_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_firmware_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_firmware_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_firmware_info_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_firmware_info_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_firmware_info_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_firmware_info_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_firmware_info_t {
    pub p: *const xenpf_firmware_info_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_firmware_info_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_firmware_info_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_firmware_info_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_firmware_info_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_firmware_info_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_firmware_info_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_firmware_info_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_firmware_info_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_firmware_info_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_enter_acpi_sleep {
    pub val_a: u16,
    pub val_b: u16,
    pub sleep_state: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_xenpf_enter_acpi_sleep() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_enter_acpi_sleep>(),
        12usize,
        concat!("Size of: ", stringify!(xenpf_enter_acpi_sleep))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_enter_acpi_sleep>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_enter_acpi_sleep))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_enter_acpi_sleep>())).val_a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_enter_acpi_sleep),
            "::",
            stringify!(val_a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_enter_acpi_sleep>())).val_b as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_enter_acpi_sleep),
            "::",
            stringify!(val_b)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_enter_acpi_sleep>())).sleep_state as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_enter_acpi_sleep),
            "::",
            stringify!(sleep_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_enter_acpi_sleep>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_enter_acpi_sleep),
            "::",
            stringify!(flags)
        )
    );
}
pub type xenpf_enter_acpi_sleep_t = xenpf_enter_acpi_sleep;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_enter_acpi_sleep_t {
    pub p: *mut xenpf_enter_acpi_sleep_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_enter_acpi_sleep_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_enter_acpi_sleep_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xenpf_enter_acpi_sleep_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_enter_acpi_sleep_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_enter_acpi_sleep_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_enter_acpi_sleep_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_enter_acpi_sleep_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_enter_acpi_sleep_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_enter_acpi_sleep_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_enter_acpi_sleep_t {
    pub p: *mut xenpf_enter_acpi_sleep_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_enter_acpi_sleep_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_enter_acpi_sleep_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_enter_acpi_sleep_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_enter_acpi_sleep_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_enter_acpi_sleep_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_enter_acpi_sleep_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_enter_acpi_sleep_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_enter_acpi_sleep_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_enter_acpi_sleep_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_enter_acpi_sleep_t {
    pub p: *const xenpf_enter_acpi_sleep_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_enter_acpi_sleep_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_enter_acpi_sleep_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_enter_acpi_sleep_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_enter_acpi_sleep_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_enter_acpi_sleep_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_enter_acpi_sleep_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_enter_acpi_sleep_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_enter_acpi_sleep_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_enter_acpi_sleep_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_enter_acpi_sleep_t {
    pub p: *const xenpf_enter_acpi_sleep_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_enter_acpi_sleep_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_enter_acpi_sleep_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_enter_acpi_sleep_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_enter_acpi_sleep_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_enter_acpi_sleep_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_enter_acpi_sleep_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_enter_acpi_sleep_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_enter_acpi_sleep_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_enter_acpi_sleep_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_change_freq {
    pub flags: u32,
    pub cpu: u32,
    pub freq: u64,
}
#[test]
fn bindgen_test_layout_xenpf_change_freq() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_change_freq>(),
        16usize,
        concat!("Size of: ", stringify!(xenpf_change_freq))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_change_freq>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_change_freq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_change_freq>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_change_freq),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_change_freq>())).cpu as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_change_freq),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_change_freq>())).freq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_change_freq),
            "::",
            stringify!(freq)
        )
    );
}
pub type xenpf_change_freq_t = xenpf_change_freq;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_change_freq_t {
    pub p: *mut xenpf_change_freq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_change_freq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_change_freq_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_change_freq_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_change_freq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_change_freq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_change_freq_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_change_freq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_change_freq_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_change_freq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_change_freq_t {
    pub p: *mut xenpf_change_freq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_change_freq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_change_freq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_change_freq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_change_freq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_change_freq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_change_freq_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_change_freq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_change_freq_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_change_freq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_change_freq_t {
    pub p: *const xenpf_change_freq_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_change_freq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_change_freq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_change_freq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_change_freq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_change_freq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_change_freq_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_change_freq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_change_freq_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_change_freq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_change_freq_t {
    pub p: *const xenpf_change_freq_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_change_freq_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_change_freq_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_change_freq_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_change_freq_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_change_freq_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_change_freq_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_change_freq_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_change_freq_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_change_freq_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_getidletime {
    pub cpumap_bitmap: __guest_handle_64_uint8,
    pub cpumap_nr_cpus: u32,
    pub idletime: __guest_handle_64_uint64,
    pub now: u64,
}
#[test]
fn bindgen_test_layout_xenpf_getidletime() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_getidletime>(),
        32usize,
        concat!("Size of: ", stringify!(xenpf_getidletime))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_getidletime>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_getidletime))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_getidletime>())).cpumap_bitmap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_getidletime),
            "::",
            stringify!(cpumap_bitmap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_getidletime>())).cpumap_nr_cpus as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_getidletime),
            "::",
            stringify!(cpumap_nr_cpus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_getidletime>())).idletime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_getidletime),
            "::",
            stringify!(idletime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_getidletime>())).now as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_getidletime),
            "::",
            stringify!(now)
        )
    );
}
pub type xenpf_getidletime_t = xenpf_getidletime;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_getidletime_t {
    pub p: *mut xenpf_getidletime_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_getidletime_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_getidletime_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_getidletime_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_getidletime_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_getidletime_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_getidletime_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_getidletime_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_getidletime_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_getidletime_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_getidletime_t {
    pub p: *mut xenpf_getidletime_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_getidletime_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_getidletime_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_getidletime_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_getidletime_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_getidletime_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_getidletime_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_getidletime_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_getidletime_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_getidletime_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_getidletime_t {
    pub p: *const xenpf_getidletime_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_getidletime_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_getidletime_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_getidletime_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_getidletime_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_getidletime_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_getidletime_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_getidletime_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_getidletime_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_getidletime_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_getidletime_t {
    pub p: *const xenpf_getidletime_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_getidletime_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_getidletime_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_getidletime_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_getidletime_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_getidletime_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_getidletime_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_getidletime_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_getidletime_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_getidletime_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_power_register {
    pub space_id: u32,
    pub bit_width: u32,
    pub bit_offset: u32,
    pub access_size: u32,
    pub address: u64,
}
#[test]
fn bindgen_test_layout_xen_power_register() {
    assert_eq!(
        ::std::mem::size_of::<xen_power_register>(),
        24usize,
        concat!("Size of: ", stringify!(xen_power_register))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_power_register>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_power_register))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_power_register>())).space_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_power_register),
            "::",
            stringify!(space_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_power_register>())).bit_width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_power_register),
            "::",
            stringify!(bit_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_power_register>())).bit_offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_power_register),
            "::",
            stringify!(bit_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_power_register>())).access_size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_power_register),
            "::",
            stringify!(access_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_power_register>())).address as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_power_register),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_processor_csd {
    pub domain: u32,
    pub coord_type: u32,
    pub num: u32,
}
#[test]
fn bindgen_test_layout_xen_processor_csd() {
    assert_eq!(
        ::std::mem::size_of::<xen_processor_csd>(),
        12usize,
        concat!("Size of: ", stringify!(xen_processor_csd))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_processor_csd>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_processor_csd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_processor_csd>())).domain as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_csd),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_processor_csd>())).coord_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_csd),
            "::",
            stringify!(coord_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_processor_csd>())).num as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_csd),
            "::",
            stringify!(num)
        )
    );
}
pub type xen_processor_csd_t = xen_processor_csd;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_processor_csd_t {
    pub p: *mut xen_processor_csd_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_processor_csd_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_processor_csd_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_processor_csd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_processor_csd_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_processor_csd_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_processor_csd_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_processor_csd_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_processor_csd_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_processor_csd_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_processor_csd_t {
    pub p: *mut xen_processor_csd_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_processor_csd_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_processor_csd_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_processor_csd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_processor_csd_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_processor_csd_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_processor_csd_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_processor_csd_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_processor_csd_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_processor_csd_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_processor_csd_t {
    pub p: *const xen_processor_csd_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_processor_csd_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_processor_csd_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_processor_csd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_processor_csd_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_processor_csd_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_processor_csd_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_processor_csd_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_processor_csd_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_processor_csd_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_processor_csd_t {
    pub p: *const xen_processor_csd_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_processor_csd_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_processor_csd_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_processor_csd_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_processor_csd_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_processor_csd_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_processor_csd_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_processor_csd_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_processor_csd_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_processor_csd_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_processor_cx {
    pub reg: xen_power_register,
    pub type_: u8,
    pub latency: u32,
    pub power: u32,
    pub dpcnt: u32,
    pub dp: __guest_handle_64_xen_processor_csd_t,
}
#[test]
fn bindgen_test_layout_xen_processor_cx() {
    assert_eq!(
        ::std::mem::size_of::<xen_processor_cx>(),
        48usize,
        concat!("Size of: ", stringify!(xen_processor_cx))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_processor_cx>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_processor_cx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_processor_cx>())).reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_cx),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_processor_cx>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_cx),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_processor_cx>())).latency as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_cx),
            "::",
            stringify!(latency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_processor_cx>())).power as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_cx),
            "::",
            stringify!(power)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_processor_cx>())).dpcnt as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_cx),
            "::",
            stringify!(dpcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_processor_cx>())).dp as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_cx),
            "::",
            stringify!(dp)
        )
    );
}
pub type xen_processor_cx_t = xen_processor_cx;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_processor_cx_t {
    pub p: *mut xen_processor_cx_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_processor_cx_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_processor_cx_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_processor_cx_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_processor_cx_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_processor_cx_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_processor_cx_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_processor_cx_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_processor_cx_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_processor_cx_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_processor_cx_t {
    pub p: *mut xen_processor_cx_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_processor_cx_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_processor_cx_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_processor_cx_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_processor_cx_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_processor_cx_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_processor_cx_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_processor_cx_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_processor_cx_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_processor_cx_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_processor_cx_t {
    pub p: *const xen_processor_cx_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_processor_cx_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_processor_cx_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_processor_cx_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_processor_cx_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_processor_cx_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_processor_cx_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_processor_cx_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_processor_cx_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_processor_cx_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_processor_cx_t {
    pub p: *const xen_processor_cx_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_processor_cx_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_processor_cx_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_processor_cx_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_processor_cx_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_processor_cx_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_processor_cx_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_processor_cx_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_processor_cx_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_processor_cx_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct xen_processor_flags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_xen_processor_flags() {
    assert_eq!(
        ::std::mem::size_of::<xen_processor_flags>(),
        4usize,
        concat!("Size of: ", stringify!(xen_processor_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_processor_flags>(),
        4usize,
        concat!("Alignment of ", stringify!(xen_processor_flags))
    );
}
impl xen_processor_flags {
    #[inline]
    pub fn bm_control(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bm_control(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bm_check(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bm_check(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_cst(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_cst(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn power_setup_done(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_power_setup_done(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bm_rld_set(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bm_rld_set(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bm_control: u32,
        bm_check: u32,
        has_cst: u32,
        power_setup_done: u32,
        bm_rld_set: u32,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bm_control: u32 = unsafe { ::std::mem::transmute(bm_control) };
            bm_control as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bm_check: u32 = unsafe { ::std::mem::transmute(bm_check) };
            bm_check as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let has_cst: u32 = unsafe { ::std::mem::transmute(has_cst) };
            has_cst as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let power_setup_done: u32 = unsafe { ::std::mem::transmute(power_setup_done) };
            power_setup_done as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bm_rld_set: u32 = unsafe { ::std::mem::transmute(bm_rld_set) };
            bm_rld_set as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_processor_power {
    pub count: u32,
    pub flags: xen_processor_flags,
    pub states: __guest_handle_64_xen_processor_cx_t,
}
#[test]
fn bindgen_test_layout_xen_processor_power() {
    assert_eq!(
        ::std::mem::size_of::<xen_processor_power>(),
        16usize,
        concat!("Size of: ", stringify!(xen_processor_power))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_processor_power>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_processor_power))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_processor_power>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_power),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_processor_power>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_power),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_processor_power>())).states as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_power),
            "::",
            stringify!(states)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_pct_register {
    pub descriptor: u8,
    pub length: u16,
    pub space_id: u8,
    pub bit_width: u8,
    pub bit_offset: u8,
    pub reserved: u8,
    pub address: u64,
}
#[test]
fn bindgen_test_layout_xen_pct_register() {
    assert_eq!(
        ::std::mem::size_of::<xen_pct_register>(),
        16usize,
        concat!("Size of: ", stringify!(xen_pct_register))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_pct_register>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_pct_register))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_pct_register>())).descriptor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_pct_register),
            "::",
            stringify!(descriptor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_pct_register>())).length as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_pct_register),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_pct_register>())).space_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_pct_register),
            "::",
            stringify!(space_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_pct_register>())).bit_width as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_pct_register),
            "::",
            stringify!(bit_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_pct_register>())).bit_offset as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_pct_register),
            "::",
            stringify!(bit_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_pct_register>())).reserved as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_pct_register),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_pct_register>())).address as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_pct_register),
            "::",
            stringify!(address)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_processor_px {
    pub core_frequency: u64,
    pub power: u64,
    pub transition_latency: u64,
    pub bus_master_latency: u64,
    pub control: u64,
    pub status: u64,
}
#[test]
fn bindgen_test_layout_xen_processor_px() {
    assert_eq!(
        ::std::mem::size_of::<xen_processor_px>(),
        48usize,
        concat!("Size of: ", stringify!(xen_processor_px))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_processor_px>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_processor_px))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_processor_px>())).core_frequency as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_px),
            "::",
            stringify!(core_frequency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_processor_px>())).power as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_px),
            "::",
            stringify!(power)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_processor_px>())).transition_latency as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_px),
            "::",
            stringify!(transition_latency)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_processor_px>())).bus_master_latency as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_px),
            "::",
            stringify!(bus_master_latency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_processor_px>())).control as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_px),
            "::",
            stringify!(control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_processor_px>())).status as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_px),
            "::",
            stringify!(status)
        )
    );
}
pub type xen_processor_px_t = xen_processor_px;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_processor_px_t {
    pub p: *mut xen_processor_px_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_processor_px_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_processor_px_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_processor_px_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_processor_px_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_processor_px_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_processor_px_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_processor_px_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_processor_px_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_processor_px_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_processor_px_t {
    pub p: *mut xen_processor_px_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_processor_px_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_processor_px_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_processor_px_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_processor_px_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_processor_px_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_processor_px_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_processor_px_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_processor_px_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_processor_px_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_processor_px_t {
    pub p: *const xen_processor_px_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_processor_px_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_processor_px_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_processor_px_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_processor_px_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_processor_px_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_processor_px_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_processor_px_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_processor_px_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_processor_px_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_processor_px_t {
    pub p: *const xen_processor_px_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_processor_px_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_processor_px_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_processor_px_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_processor_px_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_processor_px_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_processor_px_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_processor_px_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_processor_px_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_processor_px_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xen_psd_package {
    pub num_entries: u64,
    pub revision: u64,
    pub domain: u64,
    pub coord_type: u64,
    pub num_processors: u64,
}
#[test]
fn bindgen_test_layout_xen_psd_package() {
    assert_eq!(
        ::std::mem::size_of::<xen_psd_package>(),
        40usize,
        concat!("Size of: ", stringify!(xen_psd_package))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_psd_package>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_psd_package))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_psd_package>())).num_entries as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_psd_package),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_psd_package>())).revision as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_psd_package),
            "::",
            stringify!(revision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_psd_package>())).domain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_psd_package),
            "::",
            stringify!(domain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_psd_package>())).coord_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_psd_package),
            "::",
            stringify!(coord_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_psd_package>())).num_processors as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_psd_package),
            "::",
            stringify!(num_processors)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_processor_performance {
    pub flags: u32,
    pub platform_limit: u32,
    pub control_register: xen_pct_register,
    pub status_register: xen_pct_register,
    pub state_count: u32,
    pub states: __guest_handle_64_xen_processor_px_t,
    pub domain_info: xen_psd_package,
    pub shared_type: u32,
}
#[test]
fn bindgen_test_layout_xen_processor_performance() {
    assert_eq!(
        ::std::mem::size_of::<xen_processor_performance>(),
        104usize,
        concat!("Size of: ", stringify!(xen_processor_performance))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_processor_performance>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_processor_performance))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_processor_performance>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_performance),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_processor_performance>())).platform_limit as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_performance),
            "::",
            stringify!(platform_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_processor_performance>())).control_register as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_performance),
            "::",
            stringify!(control_register)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_processor_performance>())).status_register as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_performance),
            "::",
            stringify!(status_register)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_processor_performance>())).state_count as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_performance),
            "::",
            stringify!(state_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_processor_performance>())).states as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_performance),
            "::",
            stringify!(states)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_processor_performance>())).domain_info as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_performance),
            "::",
            stringify!(domain_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_processor_performance>())).shared_type as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_processor_performance),
            "::",
            stringify!(shared_type)
        )
    );
}
pub type xen_processor_performance_t = xen_processor_performance;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_processor_performance_t {
    pub p: *mut xen_processor_performance_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_processor_performance_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_processor_performance_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xen_processor_performance_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_processor_performance_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_processor_performance_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_processor_performance_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_processor_performance_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_processor_performance_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_processor_performance_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_processor_performance_t {
    pub p: *mut xen_processor_performance_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_processor_performance_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_processor_performance_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xen_processor_performance_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_processor_performance_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_processor_performance_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_processor_performance_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_processor_performance_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_processor_performance_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_processor_performance_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_processor_performance_t {
    pub p: *const xen_processor_performance_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_processor_performance_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_processor_performance_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_processor_performance_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_processor_performance_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_processor_performance_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_processor_performance_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_processor_performance_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_processor_performance_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_processor_performance_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_processor_performance_t {
    pub p: *const xen_processor_performance_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_processor_performance_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_processor_performance_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_processor_performance_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_processor_performance_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_processor_performance_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_processor_performance_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_processor_performance_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_processor_performance_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_processor_performance_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_set_processor_pminfo {
    pub id: u32,
    pub type_: u32,
    pub u: xenpf_set_processor_pminfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_set_processor_pminfo__bindgen_ty_1 {
    pub power: xen_processor_power,
    pub perf: xen_processor_performance,
    pub pdc: __guest_handle_64_uint32,
}
#[test]
fn bindgen_test_layout_xenpf_set_processor_pminfo__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_set_processor_pminfo__bindgen_ty_1>(),
        104usize,
        concat!(
            "Size of: ",
            stringify!(xenpf_set_processor_pminfo__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_set_processor_pminfo__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_set_processor_pminfo__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_set_processor_pminfo__bindgen_ty_1>())).power as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_set_processor_pminfo__bindgen_ty_1),
            "::",
            stringify!(power)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_set_processor_pminfo__bindgen_ty_1>())).perf as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_set_processor_pminfo__bindgen_ty_1),
            "::",
            stringify!(perf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_set_processor_pminfo__bindgen_ty_1>())).pdc as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_set_processor_pminfo__bindgen_ty_1),
            "::",
            stringify!(pdc)
        )
    );
}
#[test]
fn bindgen_test_layout_xenpf_set_processor_pminfo() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_set_processor_pminfo>(),
        112usize,
        concat!("Size of: ", stringify!(xenpf_set_processor_pminfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_set_processor_pminfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_set_processor_pminfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_set_processor_pminfo>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_set_processor_pminfo),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_set_processor_pminfo>())).type_ as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_set_processor_pminfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_set_processor_pminfo>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_set_processor_pminfo),
            "::",
            stringify!(u)
        )
    );
}
pub type xenpf_set_processor_pminfo_t = xenpf_set_processor_pminfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_set_processor_pminfo_t {
    pub p: *mut xenpf_set_processor_pminfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_set_processor_pminfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_set_processor_pminfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xenpf_set_processor_pminfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_set_processor_pminfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_set_processor_pminfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_set_processor_pminfo_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_set_processor_pminfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_set_processor_pminfo_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_set_processor_pminfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_set_processor_pminfo_t {
    pub p: *mut xenpf_set_processor_pminfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_set_processor_pminfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_set_processor_pminfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_set_processor_pminfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_set_processor_pminfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_set_processor_pminfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_set_processor_pminfo_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_set_processor_pminfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_set_processor_pminfo_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_set_processor_pminfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_set_processor_pminfo_t {
    pub p: *const xenpf_set_processor_pminfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_set_processor_pminfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_set_processor_pminfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_set_processor_pminfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_set_processor_pminfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_set_processor_pminfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_set_processor_pminfo_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_set_processor_pminfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_set_processor_pminfo_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_set_processor_pminfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_set_processor_pminfo_t {
    pub p: *const xenpf_set_processor_pminfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_set_processor_pminfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_set_processor_pminfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_set_processor_pminfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_set_processor_pminfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_set_processor_pminfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_set_processor_pminfo_t>())).p
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_set_processor_pminfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_set_processor_pminfo_t>())).q
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_set_processor_pminfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_pcpuinfo {
    pub xen_cpuid: u32,
    pub max_present: u32,
    pub flags: u32,
    pub apic_id: u32,
    pub acpi_id: u32,
}
#[test]
fn bindgen_test_layout_xenpf_pcpuinfo() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_pcpuinfo>(),
        20usize,
        concat!("Size of: ", stringify!(xenpf_pcpuinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_pcpuinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_pcpuinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_pcpuinfo>())).xen_cpuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_pcpuinfo),
            "::",
            stringify!(xen_cpuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_pcpuinfo>())).max_present as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_pcpuinfo),
            "::",
            stringify!(max_present)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_pcpuinfo>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_pcpuinfo),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_pcpuinfo>())).apic_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_pcpuinfo),
            "::",
            stringify!(apic_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_pcpuinfo>())).acpi_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_pcpuinfo),
            "::",
            stringify!(acpi_id)
        )
    );
}
pub type xenpf_pcpuinfo_t = xenpf_pcpuinfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_pcpuinfo_t {
    pub p: *mut xenpf_pcpuinfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_pcpuinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_pcpuinfo_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_pcpuinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_pcpuinfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xenpf_pcpuinfo_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_pcpuinfo_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_pcpuinfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_pcpuinfo_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_pcpuinfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_pcpuinfo_t {
    pub p: *mut xenpf_pcpuinfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_pcpuinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_pcpuinfo_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xenpf_pcpuinfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_pcpuinfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_pcpuinfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_pcpuinfo_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_pcpuinfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_pcpuinfo_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_pcpuinfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_pcpuinfo_t {
    pub p: *const xenpf_pcpuinfo_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_pcpuinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_pcpuinfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_pcpuinfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_pcpuinfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_pcpuinfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_pcpuinfo_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_pcpuinfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_pcpuinfo_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_pcpuinfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_pcpuinfo_t {
    pub p: *const xenpf_pcpuinfo_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_pcpuinfo_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_pcpuinfo_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_pcpuinfo_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_pcpuinfo_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_pcpuinfo_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_pcpuinfo_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_pcpuinfo_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_pcpuinfo_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_pcpuinfo_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_pcpu_version {
    pub xen_cpuid: u32,
    pub max_present: u32,
    pub vendor_id: [::std::os::raw::c_char; 12usize],
    pub family: u32,
    pub model: u32,
    pub stepping: u32,
}
#[test]
fn bindgen_test_layout_xenpf_pcpu_version() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_pcpu_version>(),
        32usize,
        concat!("Size of: ", stringify!(xenpf_pcpu_version))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_pcpu_version>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_pcpu_version))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_pcpu_version>())).xen_cpuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_pcpu_version),
            "::",
            stringify!(xen_cpuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_pcpu_version>())).max_present as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_pcpu_version),
            "::",
            stringify!(max_present)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_pcpu_version>())).vendor_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_pcpu_version),
            "::",
            stringify!(vendor_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_pcpu_version>())).family as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_pcpu_version),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_pcpu_version>())).model as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_pcpu_version),
            "::",
            stringify!(model)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_pcpu_version>())).stepping as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_pcpu_version),
            "::",
            stringify!(stepping)
        )
    );
}
pub type xenpf_pcpu_version_t = xenpf_pcpu_version;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_pcpu_version_t {
    pub p: *mut xenpf_pcpu_version_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_pcpu_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_pcpu_version_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_pcpu_version_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_pcpu_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_pcpu_version_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_pcpu_version_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_pcpu_version_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_pcpu_version_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_pcpu_version_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_pcpu_version_t {
    pub p: *mut xenpf_pcpu_version_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_pcpu_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_pcpu_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_pcpu_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_pcpu_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_pcpu_version_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_pcpu_version_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_pcpu_version_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_pcpu_version_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_pcpu_version_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_pcpu_version_t {
    pub p: *const xenpf_pcpu_version_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_pcpu_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_pcpu_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_pcpu_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_pcpu_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_pcpu_version_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_pcpu_version_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_pcpu_version_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_pcpu_version_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_pcpu_version_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_pcpu_version_t {
    pub p: *const xenpf_pcpu_version_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_pcpu_version_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_pcpu_version_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_pcpu_version_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_pcpu_version_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_pcpu_version_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_pcpu_version_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_pcpu_version_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_pcpu_version_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_pcpu_version_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_cpu_ol {
    pub cpuid: u32,
}
#[test]
fn bindgen_test_layout_xenpf_cpu_ol() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_cpu_ol>(),
        4usize,
        concat!("Size of: ", stringify!(xenpf_cpu_ol))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_cpu_ol>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_cpu_ol))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_cpu_ol>())).cpuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_cpu_ol),
            "::",
            stringify!(cpuid)
        )
    );
}
pub type xenpf_cpu_ol_t = xenpf_cpu_ol;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_cpu_ol_t {
    pub p: *mut xenpf_cpu_ol_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_cpu_ol_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_cpu_ol_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_cpu_ol_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_cpu_ol_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xenpf_cpu_ol_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_xenpf_cpu_ol_t>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_cpu_ol_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__guest_handle_xenpf_cpu_ol_t>())).q as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_cpu_ol_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_cpu_ol_t {
    pub p: *mut xenpf_cpu_ol_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_cpu_ol_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_cpu_ol_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xenpf_cpu_ol_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_cpu_ol_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_cpu_ol_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_cpu_ol_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_cpu_ol_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_cpu_ol_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_cpu_ol_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_cpu_ol_t {
    pub p: *const xenpf_cpu_ol_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_cpu_ol_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_cpu_ol_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_const_xenpf_cpu_ol_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_cpu_ol_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_cpu_ol_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_cpu_ol_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_cpu_ol_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_cpu_ol_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_cpu_ol_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_cpu_ol_t {
    pub p: *const xenpf_cpu_ol_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_cpu_ol_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_cpu_ol_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_cpu_ol_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_cpu_ol_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_cpu_ol_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_cpu_ol_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_cpu_ol_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_cpu_ol_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_cpu_ol_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_cpu_hotadd {
    pub apic_id: u32,
    pub acpi_id: u32,
    pub pxm: u32,
}
#[test]
fn bindgen_test_layout_xenpf_cpu_hotadd() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_cpu_hotadd>(),
        12usize,
        concat!("Size of: ", stringify!(xenpf_cpu_hotadd))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_cpu_hotadd>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_cpu_hotadd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_cpu_hotadd>())).apic_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_cpu_hotadd),
            "::",
            stringify!(apic_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_cpu_hotadd>())).acpi_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_cpu_hotadd),
            "::",
            stringify!(acpi_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_cpu_hotadd>())).pxm as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_cpu_hotadd),
            "::",
            stringify!(pxm)
        )
    );
}
pub type xenpf_cpu_hotadd_t = xenpf_cpu_hotadd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_mem_hotadd {
    pub spfn: u64,
    pub epfn: u64,
    pub pxm: u32,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_xenpf_mem_hotadd() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_mem_hotadd>(),
        24usize,
        concat!("Size of: ", stringify!(xenpf_mem_hotadd))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_mem_hotadd>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_mem_hotadd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_mem_hotadd>())).spfn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_mem_hotadd),
            "::",
            stringify!(spfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_mem_hotadd>())).epfn as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_mem_hotadd),
            "::",
            stringify!(epfn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_mem_hotadd>())).pxm as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_mem_hotadd),
            "::",
            stringify!(pxm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_mem_hotadd>())).flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_mem_hotadd),
            "::",
            stringify!(flags)
        )
    );
}
pub type xenpf_mem_hotadd_t = xenpf_mem_hotadd;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenpf_core_parking {
    pub type_: u32,
    pub idle_nums: u32,
}
#[test]
fn bindgen_test_layout_xenpf_core_parking() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_core_parking>(),
        8usize,
        concat!("Size of: ", stringify!(xenpf_core_parking))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_core_parking>(),
        4usize,
        concat!("Alignment of ", stringify!(xenpf_core_parking))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_core_parking>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_core_parking),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_core_parking>())).idle_nums as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_core_parking),
            "::",
            stringify!(idle_nums)
        )
    );
}
pub type xenpf_core_parking_t = xenpf_core_parking;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_core_parking_t {
    pub p: *mut xenpf_core_parking_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_core_parking_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_core_parking_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_core_parking_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_core_parking_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_core_parking_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_core_parking_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_core_parking_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_core_parking_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_core_parking_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_core_parking_t {
    pub p: *mut xenpf_core_parking_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_core_parking_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_core_parking_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_core_parking_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_core_parking_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_core_parking_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_core_parking_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_core_parking_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_core_parking_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_core_parking_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_core_parking_t {
    pub p: *const xenpf_core_parking_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_core_parking_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_core_parking_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_core_parking_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_core_parking_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_core_parking_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_core_parking_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_core_parking_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_core_parking_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_core_parking_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_core_parking_t {
    pub p: *const xenpf_core_parking_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_core_parking_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_core_parking_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_core_parking_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_core_parking_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_core_parking_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_core_parking_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_core_parking_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_core_parking_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_core_parking_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_resource_entry {
    pub u: xenpf_resource_entry__bindgen_ty_1,
    pub rsvd: u32,
    pub idx: u64,
    pub val: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xenpf_resource_entry__bindgen_ty_1 {
    pub cmd: u32,
    pub ret: i32,
}
#[test]
fn bindgen_test_layout_xenpf_resource_entry__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_resource_entry__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(xenpf_resource_entry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_resource_entry__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xenpf_resource_entry__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_resource_entry__bindgen_ty_1>())).cmd as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_resource_entry__bindgen_ty_1),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenpf_resource_entry__bindgen_ty_1>())).ret as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_resource_entry__bindgen_ty_1),
            "::",
            stringify!(ret)
        )
    );
}
#[test]
fn bindgen_test_layout_xenpf_resource_entry() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_resource_entry>(),
        24usize,
        concat!("Size of: ", stringify!(xenpf_resource_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_resource_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_resource_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_resource_entry>())).u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_resource_entry),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_resource_entry>())).rsvd as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_resource_entry),
            "::",
            stringify!(rsvd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_resource_entry>())).idx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_resource_entry),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_resource_entry>())).val as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_resource_entry),
            "::",
            stringify!(val)
        )
    );
}
pub type xenpf_resource_entry_t = xenpf_resource_entry;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_resource_entry_t {
    pub p: *mut xenpf_resource_entry_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_resource_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_resource_entry_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_xenpf_resource_entry_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_resource_entry_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_resource_entry_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_resource_entry_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_resource_entry_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_resource_entry_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_resource_entry_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_resource_entry_t {
    pub p: *mut xenpf_resource_entry_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_resource_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_resource_entry_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_resource_entry_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_resource_entry_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_resource_entry_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_resource_entry_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_resource_entry_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_resource_entry_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_resource_entry_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_resource_entry_t {
    pub p: *const xenpf_resource_entry_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_resource_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_resource_entry_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_resource_entry_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_resource_entry_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_resource_entry_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_resource_entry_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_resource_entry_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_resource_entry_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_resource_entry_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_resource_entry_t {
    pub p: *const xenpf_resource_entry_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_resource_entry_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_resource_entry_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_resource_entry_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_resource_entry_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_resource_entry_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_resource_entry_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_resource_entry_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_resource_entry_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_resource_entry_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_resource_op {
    pub nr_entries: u32,
    pub cpu: u32,
    pub entries: __guest_handle_64_xenpf_resource_entry_t,
}
#[test]
fn bindgen_test_layout_xenpf_resource_op() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_resource_op>(),
        16usize,
        concat!("Size of: ", stringify!(xenpf_resource_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_resource_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_resource_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_resource_op>())).nr_entries as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_resource_op),
            "::",
            stringify!(nr_entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_resource_op>())).cpu as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_resource_op),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_resource_op>())).entries as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_resource_op),
            "::",
            stringify!(entries)
        )
    );
}
pub type xenpf_resource_op_t = xenpf_resource_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_resource_op_t {
    pub p: *mut xenpf_resource_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_resource_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_resource_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_resource_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_resource_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xenpf_resource_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_resource_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_resource_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_resource_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_resource_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_resource_op_t {
    pub p: *mut xenpf_resource_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_resource_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_resource_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_xenpf_resource_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_resource_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_resource_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_resource_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_resource_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_resource_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_resource_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_resource_op_t {
    pub p: *const xenpf_resource_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_resource_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_resource_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_resource_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_resource_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_resource_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_resource_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_resource_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_resource_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_resource_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_resource_op_t {
    pub p: *const xenpf_resource_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_resource_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_resource_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_resource_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_resource_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_resource_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_resource_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_resource_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_resource_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_resource_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xenpf_symdata {
    pub namelen: u32,
    pub symnum: u32,
    pub name: __guest_handle_64_char,
    pub address: u64,
    pub type_: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_xenpf_symdata() {
    assert_eq!(
        ::std::mem::size_of::<xenpf_symdata>(),
        32usize,
        concat!("Size of: ", stringify!(xenpf_symdata))
    );
    assert_eq!(
        ::std::mem::align_of::<xenpf_symdata>(),
        8usize,
        concat!("Alignment of ", stringify!(xenpf_symdata))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_symdata>())).namelen as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_symdata),
            "::",
            stringify!(namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_symdata>())).symnum as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_symdata),
            "::",
            stringify!(symnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_symdata>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_symdata),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_symdata>())).address as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_symdata),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenpf_symdata>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xenpf_symdata),
            "::",
            stringify!(type_)
        )
    );
}
pub type xenpf_symdata_t = xenpf_symdata;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xenpf_symdata_t {
    pub p: *mut xenpf_symdata_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xenpf_symdata_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xenpf_symdata_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xenpf_symdata_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xenpf_symdata_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__guest_handle_xenpf_symdata_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_symdata_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_symdata_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xenpf_symdata_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xenpf_symdata_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xenpf_symdata_t {
    pub p: *mut xenpf_symdata_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xenpf_symdata_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xenpf_symdata_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xenpf_symdata_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xenpf_symdata_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xenpf_symdata_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_symdata_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_symdata_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xenpf_symdata_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xenpf_symdata_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xenpf_symdata_t {
    pub p: *const xenpf_symdata_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xenpf_symdata_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xenpf_symdata_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xenpf_symdata_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xenpf_symdata_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xenpf_symdata_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_symdata_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_symdata_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xenpf_symdata_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xenpf_symdata_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xenpf_symdata_t {
    pub p: *const xenpf_symdata_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xenpf_symdata_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xenpf_symdata_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xenpf_symdata_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xenpf_symdata_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xenpf_symdata_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_symdata_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_symdata_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xenpf_symdata_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xenpf_symdata_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xen_platform_op {
    pub cmd: u32,
    pub interface_version: u32,
    pub u: xen_platform_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xen_platform_op__bindgen_ty_1 {
    pub settime: xenpf_settime_t,
    pub settime32: xenpf_settime32_t,
    pub settime64: xenpf_settime64_t,
    pub add_memtype: xenpf_add_memtype_t,
    pub del_memtype: xenpf_del_memtype_t,
    pub read_memtype: xenpf_read_memtype_t,
    pub microcode: xenpf_microcode_update_t,
    pub platform_quirk: xenpf_platform_quirk_t,
    pub efi_runtime_call: xenpf_efi_runtime_call_t,
    pub firmware_info: xenpf_firmware_info_t,
    pub enter_acpi_sleep: xenpf_enter_acpi_sleep_t,
    pub change_freq: xenpf_change_freq_t,
    pub getidletime: xenpf_getidletime_t,
    pub set_pminfo: xenpf_set_processor_pminfo_t,
    pub pcpu_info: xenpf_pcpuinfo_t,
    pub pcpu_version: xenpf_pcpu_version_t,
    pub cpu_ol: xenpf_cpu_ol_t,
    pub cpu_add: xenpf_cpu_hotadd_t,
    pub mem_add: xenpf_mem_hotadd_t,
    pub core_parking: xenpf_core_parking_t,
    pub resource_op: xenpf_resource_op_t,
    pub symdata: xenpf_symdata_t,
    pub pad: [u8; 128usize],
}
#[test]
fn bindgen_test_layout_xen_platform_op__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xen_platform_op__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(xen_platform_op__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_platform_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_platform_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).settime as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(settime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).settime32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(settime32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).settime64 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(settime64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).add_memtype as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(add_memtype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).del_memtype as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(del_memtype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).read_memtype as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(read_memtype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).microcode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(microcode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).platform_quirk as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(platform_quirk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).efi_runtime_call as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(efi_runtime_call)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).firmware_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(firmware_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).enter_acpi_sleep as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(enter_acpi_sleep)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).change_freq as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(change_freq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).getidletime as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(getidletime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).set_pminfo as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(set_pminfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).pcpu_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(pcpu_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).pcpu_version as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(pcpu_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).cpu_ol as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(cpu_ol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).cpu_add as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(cpu_add)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).mem_add as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(mem_add)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).core_parking as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(core_parking)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).resource_op as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(resource_op)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).symdata as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(symdata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op__bindgen_ty_1>())).pad as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op__bindgen_ty_1),
            "::",
            stringify!(pad)
        )
    );
}
#[test]
fn bindgen_test_layout_xen_platform_op() {
    assert_eq!(
        ::std::mem::size_of::<xen_platform_op>(),
        136usize,
        concat!("Size of: ", stringify!(xen_platform_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xen_platform_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xen_platform_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_platform_op>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xen_platform_op>())).interface_version as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op),
            "::",
            stringify!(interface_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xen_platform_op>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xen_platform_op),
            "::",
            stringify!(u)
        )
    );
}
pub type xen_platform_op_t = xen_platform_op;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_xen_platform_op_t {
    pub p: *mut xen_platform_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_xen_platform_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_xen_platform_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_xen_platform_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_xen_platform_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_xen_platform_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_platform_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_platform_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_xen_platform_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_xen_platform_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_xen_platform_op_t {
    pub p: *mut xen_platform_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_xen_platform_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_xen_platform_op_t>(),
        8usize,
        concat!("Size of: ", stringify!(__guest_handle_64_xen_platform_op_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_xen_platform_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_xen_platform_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_platform_op_t>())).p as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_platform_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_xen_platform_op_t>())).q as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_xen_platform_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_const_xen_platform_op_t {
    pub p: *const xen_platform_op_t,
    pub q: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout___guest_handle_const_xen_platform_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_const_xen_platform_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_const_xen_platform_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_const_xen_platform_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_const_xen_platform_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_platform_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_platform_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_const_xen_platform_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_const_xen_platform_op_t),
            "::",
            stringify!(q)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __guest_handle_64_const_xen_platform_op_t {
    pub p: *const xen_platform_op_t,
    pub q: u64,
}
#[test]
fn bindgen_test_layout___guest_handle_64_const_xen_platform_op_t() {
    assert_eq!(
        ::std::mem::size_of::<__guest_handle_64_const_xen_platform_op_t>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__guest_handle_64_const_xen_platform_op_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__guest_handle_64_const_xen_platform_op_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__guest_handle_64_const_xen_platform_op_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_platform_op_t>())).p as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_platform_op_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__guest_handle_64_const_xen_platform_op_t>())).q as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__guest_handle_64_const_xen_platform_op_t),
            "::",
            stringify!(q)
        )
    );
}
pub const xentoollog_level_XTL_NONE: xentoollog_level = 0;
pub const xentoollog_level_XTL_DEBUG: xentoollog_level = 1;
pub const xentoollog_level_XTL_VERBOSE: xentoollog_level = 2;
pub const xentoollog_level_XTL_DETAIL: xentoollog_level = 3;
pub const xentoollog_level_XTL_PROGRESS: xentoollog_level = 4;
pub const xentoollog_level_XTL_INFO: xentoollog_level = 5;
pub const xentoollog_level_XTL_NOTICE: xentoollog_level = 6;
pub const xentoollog_level_XTL_WARN: xentoollog_level = 7;
pub const xentoollog_level_XTL_ERROR: xentoollog_level = 8;
pub const xentoollog_level_XTL_CRITICAL: xentoollog_level = 9;
pub const xentoollog_level_XTL_NUM_LEVELS: xentoollog_level = 10;
pub type xentoollog_level = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xentoollog_logger {
    pub vmessage: ::std::option::Option<
        unsafe extern "C" fn(
            logger: *mut xentoollog_logger,
            level: xentoollog_level,
            errnoval: ::std::os::raw::c_int,
            context: *const ::std::os::raw::c_char,
            format: *const ::std::os::raw::c_char,
            al: va_list,
        ),
    >,
    pub progress: ::std::option::Option<
        unsafe extern "C" fn(
            logger: *mut xentoollog_logger,
            context: *const ::std::os::raw::c_char,
            doing_what: *const ::std::os::raw::c_char,
            percent: ::std::os::raw::c_int,
            done: ::std::os::raw::c_ulong,
            total: ::std::os::raw::c_ulong,
        ),
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(logger: *mut xentoollog_logger)>,
}
#[test]
fn bindgen_test_layout_xentoollog_logger() {
    assert_eq!(
        ::std::mem::size_of::<xentoollog_logger>(),
        24usize,
        concat!("Size of: ", stringify!(xentoollog_logger))
    );
    assert_eq!(
        ::std::mem::align_of::<xentoollog_logger>(),
        8usize,
        concat!("Alignment of ", stringify!(xentoollog_logger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xentoollog_logger>())).vmessage as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xentoollog_logger),
            "::",
            stringify!(vmessage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xentoollog_logger>())).progress as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xentoollog_logger),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xentoollog_logger>())).destroy as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xentoollog_logger),
            "::",
            stringify!(destroy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xentoollog_logger_stdiostream {
    _unused: [u8; 0],
}
extern "C" {
    pub fn xtl_createlogger_stdiostream(
        f: *mut FILE,
        min_level: xentoollog_level,
        flags: ::std::os::raw::c_uint,
    ) -> *mut xentoollog_logger_stdiostream;
}
extern "C" {
    pub fn xtl_stdiostream_set_minlevel(
        arg1: *mut xentoollog_logger_stdiostream,
        min_level: xentoollog_level,
    );
}
extern "C" {
    pub fn xtl_stdiostream_adjust_flags(
        arg1: *mut xentoollog_logger_stdiostream,
        set_flags: ::std::os::raw::c_uint,
        clear_flags: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn xtl_logger_destroy(logger: *mut xentoollog_logger);
}
extern "C" {
    pub fn xtl_logv(
        logger: *mut xentoollog_logger,
        level: xentoollog_level,
        errnoval: ::std::os::raw::c_int,
        context: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        arg1: va_list,
    );
}
extern "C" {
    pub fn xtl_log(
        logger: *mut xentoollog_logger,
        level: xentoollog_level,
        errnoval: ::std::os::raw::c_int,
        context: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn xtl_progress(
        logger: *mut xentoollog_logger,
        context: *const ::std::os::raw::c_char,
        doing_what: *const ::std::os::raw::c_char,
        done: ::std::os::raw::c_ulong,
        total: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn xtl_level_to_string(arg1: xentoollog_level) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_interface_core {
    _unused: [u8; 0],
}
pub type xc_interface = xc_interface_core;
pub const xc_error_code_XC_ERROR_NONE: xc_error_code = 0;
pub const xc_error_code_XC_INTERNAL_ERROR: xc_error_code = 1;
pub const xc_error_code_XC_INVALID_KERNEL: xc_error_code = 2;
pub const xc_error_code_XC_INVALID_PARAM: xc_error_code = 3;
pub const xc_error_code_XC_OUT_OF_MEMORY: xc_error_code = 4;
pub type xc_error_code = ::std::os::raw::c_uint;
extern "C" {
    pub fn xc_interface_open(
        logger: *mut xentoollog_logger,
        dombuild_logger: *mut xentoollog_logger,
        open_flags: ::std::os::raw::c_uint,
    ) -> *mut xc_interface;
}
pub const xc_open_flags_XC_OPENFLAG_DUMMY: xc_open_flags = 1;
pub const xc_open_flags_XC_OPENFLAG_NON_REENTRANT: xc_open_flags = 2;
pub type xc_open_flags = ::std::os::raw::c_uint;
extern "C" {
    pub fn xc_interface_close(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xencall_handle {
    _unused: [u8; 0],
}
extern "C" {
    pub fn xc_interface_xcall_handle(xch: *mut xc_interface) -> *mut xencall_handle;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenforeignmemory_handle {
    _unused: [u8; 0],
}
extern "C" {
    pub fn xc_interface_fmem_handle(xch: *mut xc_interface) -> *mut xenforeignmemory_handle;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xendevicemodel_handle {
    _unused: [u8; 0],
}
extern "C" {
    pub fn xc_interface_dmod_handle(xch: *mut xc_interface) -> *mut xendevicemodel_handle;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_hypercall_buffer {
    pub hbuf: *mut ::std::os::raw::c_void,
    pub param_shadow: *mut xc_hypercall_buffer,
    pub dir: ::std::os::raw::c_int,
    pub ubuf: *mut ::std::os::raw::c_void,
    pub sz: size_t,
}
#[test]
fn bindgen_test_layout_xc_hypercall_buffer() {
    assert_eq!(
        ::std::mem::size_of::<xc_hypercall_buffer>(),
        40usize,
        concat!("Size of: ", stringify!(xc_hypercall_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_hypercall_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_hypercall_buffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_hypercall_buffer>())).hbuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_hypercall_buffer),
            "::",
            stringify!(hbuf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xc_hypercall_buffer>())).param_shadow as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_hypercall_buffer),
            "::",
            stringify!(param_shadow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_hypercall_buffer>())).dir as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_hypercall_buffer),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_hypercall_buffer>())).ubuf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_hypercall_buffer),
            "::",
            stringify!(ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_hypercall_buffer>())).sz as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_hypercall_buffer),
            "::",
            stringify!(sz)
        )
    );
}
pub type xc_hypercall_buffer_t = xc_hypercall_buffer;
extern "C" {
    pub static mut xc__hypercall_buffer_HYPERCALL_BUFFER_NULL: xc_hypercall_buffer_t;
}
extern "C" {
    pub fn xc__hypercall_buffer_alloc(
        xch: *mut xc_interface,
        b: *mut xc_hypercall_buffer_t,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xc__hypercall_buffer_free(xch: *mut xc_interface, b: *mut xc_hypercall_buffer_t);
}
extern "C" {
    pub fn xc__hypercall_buffer_alloc_pages(
        xch: *mut xc_interface,
        b: *mut xc_hypercall_buffer_t,
        nr_pages: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xc__hypercall_buffer_free_pages(
        xch: *mut xc_interface,
        b: *mut xc_hypercall_buffer_t,
        nr_pages: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_hypercall_buffer_array {
    _unused: [u8; 0],
}
pub type xc_hypercall_buffer_array_t = xc_hypercall_buffer_array;
extern "C" {
    pub fn xc_hypercall_buffer_array_create(
        xch: *mut xc_interface,
        n: ::std::os::raw::c_uint,
    ) -> *mut xc_hypercall_buffer_array_t;
}
extern "C" {
    pub fn xc__hypercall_buffer_array_alloc(
        xch: *mut xc_interface,
        array: *mut xc_hypercall_buffer_array_t,
        index: ::std::os::raw::c_uint,
        hbuf: *mut xc_hypercall_buffer_t,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xc__hypercall_buffer_array_get(
        xch: *mut xc_interface,
        array: *mut xc_hypercall_buffer_array_t,
        index: ::std::os::raw::c_uint,
        hbuf: *mut xc_hypercall_buffer_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xc_hypercall_buffer_array_destroy(
        xc: *mut xc_interface,
        array: *mut xc_hypercall_buffer_array_t,
    );
}
pub type xc_cpumap_t = *mut u8;
extern "C" {
    pub fn xc_get_max_cpus(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_online_cpus(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_cpumap_size(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cpumap_alloc(xch: *mut xc_interface) -> xc_cpumap_t;
}
extern "C" {
    pub fn xc_cpumap_clearcpu(cpu: ::std::os::raw::c_int, map: xc_cpumap_t);
}
extern "C" {
    pub fn xc_cpumap_setcpu(cpu: ::std::os::raw::c_int, map: xc_cpumap_t);
}
extern "C" {
    pub fn xc_cpumap_testcpu(cpu: ::std::os::raw::c_int, map: xc_cpumap_t)
        -> ::std::os::raw::c_int;
}
pub type xc_nodemap_t = *mut u8;
extern "C" {
    pub fn xc_get_max_nodes(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_nodemap_size(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_nodemap_alloc(xch: *mut xc_interface) -> xc_nodemap_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_core_header {
    pub xch_magic: ::std::os::raw::c_uint,
    pub xch_nr_vcpus: ::std::os::raw::c_uint,
    pub xch_nr_pages: ::std::os::raw::c_uint,
    pub xch_ctxt_offset: ::std::os::raw::c_uint,
    pub xch_index_offset: ::std::os::raw::c_uint,
    pub xch_pages_offset: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_xc_core_header() {
    assert_eq!(
        ::std::mem::size_of::<xc_core_header>(),
        24usize,
        concat!("Size of: ", stringify!(xc_core_header))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_core_header>(),
        4usize,
        concat!("Alignment of ", stringify!(xc_core_header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_core_header>())).xch_magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_core_header),
            "::",
            stringify!(xch_magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_core_header>())).xch_nr_vcpus as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_core_header),
            "::",
            stringify!(xch_nr_vcpus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_core_header>())).xch_nr_pages as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_core_header),
            "::",
            stringify!(xch_nr_pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_core_header>())).xch_ctxt_offset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_core_header),
            "::",
            stringify!(xch_ctxt_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_core_header>())).xch_index_offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_core_header),
            "::",
            stringify!(xch_index_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_core_header>())).xch_pages_offset as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_core_header),
            "::",
            stringify!(xch_pages_offset)
        )
    );
}
pub type xc_core_header_t = xc_core_header;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_dominfo {
    pub domid: u32,
    pub ssidref: u32,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub shutdown_reason: ::std::os::raw::c_uint,
    pub nr_pages: ::std::os::raw::c_ulong,
    pub nr_outstanding_pages: ::std::os::raw::c_ulong,
    pub nr_shared_pages: ::std::os::raw::c_ulong,
    pub nr_paged_pages: ::std::os::raw::c_ulong,
    pub shared_info_frame: ::std::os::raw::c_ulong,
    pub cpu_time: u64,
    pub max_memkb: ::std::os::raw::c_ulong,
    pub nr_online_vcpus: ::std::os::raw::c_uint,
    pub max_vcpu_id: ::std::os::raw::c_uint,
    pub handle: xen_domain_handle_t,
    pub cpupool: ::std::os::raw::c_uint,
    pub gpaddr_bits: u8,
    pub arch_config: xen_arch_domainconfig,
}
#[test]
fn bindgen_test_layout_xc_dominfo() {
    assert_eq!(
        ::std::mem::size_of::<xc_dominfo>(),
        120usize,
        concat!("Size of: ", stringify!(xc_dominfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_dominfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_dominfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dominfo>())).domid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dominfo),
            "::",
            stringify!(domid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dominfo>())).ssidref as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dominfo),
            "::",
            stringify!(ssidref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dominfo>())).shutdown_reason as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dominfo),
            "::",
            stringify!(shutdown_reason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dominfo>())).nr_pages as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dominfo),
            "::",
            stringify!(nr_pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dominfo>())).nr_outstanding_pages as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dominfo),
            "::",
            stringify!(nr_outstanding_pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dominfo>())).nr_shared_pages as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dominfo),
            "::",
            stringify!(nr_shared_pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dominfo>())).nr_paged_pages as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dominfo),
            "::",
            stringify!(nr_paged_pages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dominfo>())).shared_info_frame as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dominfo),
            "::",
            stringify!(shared_info_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dominfo>())).cpu_time as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dominfo),
            "::",
            stringify!(cpu_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dominfo>())).max_memkb as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dominfo),
            "::",
            stringify!(max_memkb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dominfo>())).nr_online_vcpus as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dominfo),
            "::",
            stringify!(nr_online_vcpus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dominfo>())).max_vcpu_id as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dominfo),
            "::",
            stringify!(max_vcpu_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dominfo>())).handle as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dominfo),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dominfo>())).cpupool as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dominfo),
            "::",
            stringify!(cpupool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dominfo>())).gpaddr_bits as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dominfo),
            "::",
            stringify!(gpaddr_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_dominfo>())).arch_config as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_dominfo),
            "::",
            stringify!(arch_config)
        )
    );
}
impl xc_dominfo {
    #[inline]
    pub fn dying(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dying(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn crashed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_crashed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn shutdown(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_shutdown(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn paused(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_paused(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn blocked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_blocked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn running(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_running(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hvm(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hvm(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn debugged(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_debugged(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn xenstore(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_xenstore(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hap(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hap(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        dying: ::std::os::raw::c_uint,
        crashed: ::std::os::raw::c_uint,
        shutdown: ::std::os::raw::c_uint,
        paused: ::std::os::raw::c_uint,
        blocked: ::std::os::raw::c_uint,
        running: ::std::os::raw::c_uint,
        hvm: ::std::os::raw::c_uint,
        debugged: ::std::os::raw::c_uint,
        xenstore: ::std::os::raw::c_uint,
        hap: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let dying: u32 = unsafe { ::std::mem::transmute(dying) };
            dying as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let crashed: u32 = unsafe { ::std::mem::transmute(crashed) };
            crashed as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let shutdown: u32 = unsafe { ::std::mem::transmute(shutdown) };
            shutdown as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let paused: u32 = unsafe { ::std::mem::transmute(paused) };
            paused as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let blocked: u32 = unsafe { ::std::mem::transmute(blocked) };
            blocked as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let running: u32 = unsafe { ::std::mem::transmute(running) };
            running as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let hvm: u32 = unsafe { ::std::mem::transmute(hvm) };
            hvm as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let debugged: u32 = unsafe { ::std::mem::transmute(debugged) };
            debugged as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let xenstore: u32 = unsafe { ::std::mem::transmute(xenstore) };
            xenstore as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let hap: u32 = unsafe { ::std::mem::transmute(hap) };
            hap as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type xc_dominfo_t = xc_dominfo;
pub type xc_domaininfo_t = xen_domctl_getdomaininfo_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union vcpu_guest_context_any_t {
    pub c: vcpu_guest_context_t,
}
#[test]
fn bindgen_test_layout_vcpu_guest_context_any_t() {
    assert_eq!(
        ::std::mem::size_of::<vcpu_guest_context_any_t>(),
        352usize,
        concat!("Size of: ", stringify!(vcpu_guest_context_any_t))
    );
    assert_eq!(
        ::std::mem::align_of::<vcpu_guest_context_any_t>(),
        8usize,
        concat!("Alignment of ", stringify!(vcpu_guest_context_any_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vcpu_guest_context_any_t>())).c as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vcpu_guest_context_any_t),
            "::",
            stringify!(c)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union shared_info_any_t {
    pub s: shared_info_t,
}
#[test]
fn bindgen_test_layout_shared_info_any_t() {
    assert_eq!(
        ::std::mem::size_of::<shared_info_any_t>(),
        1088usize,
        concat!("Size of: ", stringify!(shared_info_any_t))
    );
    assert_eq!(
        ::std::mem::align_of::<shared_info_any_t>(),
        8usize,
        concat!("Alignment of ", stringify!(shared_info_any_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shared_info_any_t>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(shared_info_any_t),
            "::",
            stringify!(s)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_vcpu_extstate {
    pub xfeature_mask: u64,
    pub size: u64,
    pub buffer: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_xc_vcpu_extstate() {
    assert_eq!(
        ::std::mem::size_of::<xc_vcpu_extstate>(),
        24usize,
        concat!("Size of: ", stringify!(xc_vcpu_extstate))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_vcpu_extstate>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_vcpu_extstate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_vcpu_extstate>())).xfeature_mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_vcpu_extstate),
            "::",
            stringify!(xfeature_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_vcpu_extstate>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_vcpu_extstate),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_vcpu_extstate>())).buffer as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_vcpu_extstate),
            "::",
            stringify!(buffer)
        )
    );
}
pub type xc_vcpu_extstate_t = xc_vcpu_extstate;
extern "C" {
    pub fn xc_domain_create(
        xch: *mut xc_interface,
        pdomid: *mut u32,
        config: *mut xen_domctl_createdomain,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_dumpcore(
        xch: *mut xc_interface,
        domid: u32,
        corename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type dumpcore_rtn_t = ::std::option::Option<
    unsafe extern "C" fn(
        xch: *mut xc_interface,
        arg: *mut ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_char,
        length: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn xc_domain_dumpcore_via_callback(
        xch: *mut xc_interface,
        domid: u32,
        arg: *mut ::std::os::raw::c_void,
        dump_rtn: dumpcore_rtn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_max_vcpus(
        xch: *mut xc_interface,
        domid: u32,
        max: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_pause(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_unpause(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_destroy(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_shutdown(
        xch: *mut xc_interface,
        domid: u32,
        reason: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_watchdog(xch: *mut xc_interface, id: u32, timeout: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_node_setaffinity(
        xch: *mut xc_interface,
        domind: u32,
        nodemap: xc_nodemap_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_node_getaffinity(
        xch: *mut xc_interface,
        domind: u32,
        nodemap: xc_nodemap_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vcpu_setaffinity(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: ::std::os::raw::c_int,
        cpumap_hard_inout: xc_cpumap_t,
        cpumap_soft_inout: xc_cpumap_t,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vcpu_getaffinity(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: ::std::os::raw::c_int,
        cpumap_hard: xc_cpumap_t,
        cpumap_soft: xc_cpumap_t,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_get_guest_width(
        xch: *mut xc_interface,
        domid: u32,
        guest_width: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_getinfo(
        xch: *mut xc_interface,
        first_domid: u32,
        max_doms: ::std::os::raw::c_uint,
        info: *mut xc_dominfo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vcpu_setcontext(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
        ctxt: *mut vcpu_guest_context_any_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_getinfolist(
        xch: *mut xc_interface,
        first_domain: u32,
        max_domains: ::std::os::raw::c_uint,
        info: *mut xc_domaininfo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_broken_page_p2m(
        xch: *mut xc_interface,
        domid: u32,
        pfn: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_hvm_getcontext(
        xch: *mut xc_interface,
        domid: u32,
        ctxt_buf: *mut u8,
        size: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_hvm_getcontext_partial(
        xch: *mut xc_interface,
        domid: u32,
        typecode: u16,
        instance: u16,
        ctxt_buf: *mut ::std::os::raw::c_void,
        size: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_hvm_setcontext(
        xch: *mut xc_interface,
        domid: u32,
        hvm_ctxt: *mut u8,
        size: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_get_native_protocol(
        xch: *mut xc_interface,
        domid: u32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xc_vcpu_getcontext(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
        ctxt: *mut vcpu_guest_context_any_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_dom_vuart_init(
        xch: *mut xc_interface,
        type_: u32,
        domid: u32,
        console_domid: u32,
        gfn: xen_pfn_t,
        evtchn: *mut evtchn_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vcpu_get_extstate(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
        extstate: *mut xc_vcpu_extstate_t,
    ) -> ::std::os::raw::c_int;
}
pub type xc_vcpuinfo_t = xen_domctl_getvcpuinfo;
extern "C" {
    pub fn xc_vcpu_getinfo(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
        info: *mut xc_vcpuinfo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_get_cpu_usage(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn xc_domain_sethandle(
        xch: *mut xc_interface,
        domid: u32,
        handle: *mut u8,
    ) -> ::std::os::raw::c_int;
}
pub type xc_shadow_op_stats_t = xen_domctl_shadow_op_stats;
extern "C" {
    pub fn xc_shadow_control(
        xch: *mut xc_interface,
        domid: u32,
        sop: ::std::os::raw::c_uint,
        mb: *mut ::std::os::raw::c_uint,
        mode: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_logdirty_control(
        xch: *mut xc_interface,
        domid: u32,
        sop: ::std::os::raw::c_uint,
        dirty_bitmap: *mut xc_hypercall_buffer_t,
        pages: ::std::os::raw::c_ulong,
        mode: ::std::os::raw::c_uint,
        stats: *mut xc_shadow_op_stats_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn xc_sched_credit_domain_set(
        xch: *mut xc_interface,
        domid: u32,
        sdom: *mut xen_domctl_sched_credit,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_credit_domain_get(
        xch: *mut xc_interface,
        domid: u32,
        sdom: *mut xen_domctl_sched_credit,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_credit_params_set(
        xch: *mut xc_interface,
        cpupool_id: u32,
        schedule: *mut xen_sysctl_credit_schedule,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_credit_params_get(
        xch: *mut xc_interface,
        cpupool_id: u32,
        schedule: *mut xen_sysctl_credit_schedule,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_credit2_params_set(
        xch: *mut xc_interface,
        cpupool_id: u32,
        schedule: *mut xen_sysctl_credit2_schedule,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_credit2_params_get(
        xch: *mut xc_interface,
        cpupool_id: u32,
        schedule: *mut xen_sysctl_credit2_schedule,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_credit2_domain_set(
        xch: *mut xc_interface,
        domid: u32,
        sdom: *mut xen_domctl_sched_credit2,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_credit2_domain_get(
        xch: *mut xc_interface,
        domid: u32,
        sdom: *mut xen_domctl_sched_credit2,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_rtds_domain_set(
        xch: *mut xc_interface,
        domid: u32,
        sdom: *mut xen_domctl_sched_rtds,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_rtds_domain_get(
        xch: *mut xc_interface,
        domid: u32,
        sdom: *mut xen_domctl_sched_rtds,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_rtds_vcpu_set(
        xch: *mut xc_interface,
        domid: u32,
        vcpus: *mut xen_domctl_schedparam_vcpu,
        num_vcpus: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_rtds_vcpu_get(
        xch: *mut xc_interface,
        domid: u32,
        vcpus: *mut xen_domctl_schedparam_vcpu,
        num_vcpus: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_arinc653_schedule_set(
        xch: *mut xc_interface,
        cpupool_id: u32,
        schedule: *mut xen_sysctl_arinc653_schedule,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_arinc653_schedule_get(
        xch: *mut xc_interface,
        cpupool_id: u32,
        schedule: *mut xen_sysctl_arinc653_schedule,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_send_trigger(
        xch: *mut xc_interface,
        domid: u32,
        trigger: u32,
        vcpu: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_setdebugging(
        xch: *mut xc_interface,
        domid: u32,
        enable: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_p2m_audit(
        xch: *mut xc_interface,
        domid: u32,
        orphans: *mut u64,
        m2p_bad: *mut u64,
        p2m_bad: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_set_access_required(
        xch: *mut xc_interface,
        domid: u32,
        required: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_set_virq_handler(
        xch: *mut xc_interface,
        domid: u32,
        virq: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_cpupoolinfo {
    pub cpupool_id: u32,
    pub sched_id: u32,
    pub n_dom: u32,
    pub cpumap: xc_cpumap_t,
}
#[test]
fn bindgen_test_layout_xc_cpupoolinfo() {
    assert_eq!(
        ::std::mem::size_of::<xc_cpupoolinfo>(),
        24usize,
        concat!("Size of: ", stringify!(xc_cpupoolinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_cpupoolinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_cpupoolinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_cpupoolinfo>())).cpupool_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_cpupoolinfo),
            "::",
            stringify!(cpupool_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_cpupoolinfo>())).sched_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_cpupoolinfo),
            "::",
            stringify!(sched_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_cpupoolinfo>())).n_dom as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_cpupoolinfo),
            "::",
            stringify!(n_dom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_cpupoolinfo>())).cpumap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_cpupoolinfo),
            "::",
            stringify!(cpumap)
        )
    );
}
pub type xc_cpupoolinfo_t = xc_cpupoolinfo;
extern "C" {
    pub fn xc_cpupool_create(
        xch: *mut xc_interface,
        ppoolid: *mut u32,
        sched_id: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cpupool_destroy(xch: *mut xc_interface, poolid: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cpupool_getinfo(xch: *mut xc_interface, poolid: u32) -> *mut xc_cpupoolinfo_t;
}
extern "C" {
    pub fn xc_cpupool_infofree(xch: *mut xc_interface, info: *mut xc_cpupoolinfo_t);
}
extern "C" {
    pub fn xc_cpupool_addcpu(
        xch: *mut xc_interface,
        poolid: u32,
        cpu: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cpupool_removecpu(
        xch: *mut xc_interface,
        poolid: u32,
        cpu: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cpupool_movedomain(
        xch: *mut xc_interface,
        poolid: u32,
        domid: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cpupool_freeinfo(xch: *mut xc_interface) -> xc_cpumap_t;
}
pub type xc_evtchn_port_or_error_t = ::std::os::raw::c_int;
extern "C" {
    pub fn xc_evtchn_alloc_unbound(
        xch: *mut xc_interface,
        dom: u32,
        remote_dom: u32,
    ) -> xc_evtchn_port_or_error_t;
}
extern "C" {
    pub fn xc_evtchn_reset(xch: *mut xc_interface, dom: u32) -> ::std::os::raw::c_int;
}
pub type xc_evtchn_status_t = evtchn_status;
extern "C" {
    pub fn xc_evtchn_status(
        xch: *mut xc_interface,
        status: *mut xc_evtchn_status_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_physdev_pci_access_modify(
        xch: *mut xc_interface,
        domid: u32,
        bus: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        func: ::std::os::raw::c_int,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_readconsolering(
        xch: *mut xc_interface,
        buffer: *mut ::std::os::raw::c_char,
        pnr_chars: *mut ::std::os::raw::c_uint,
        clear: ::std::os::raw::c_int,
        incremental: ::std::os::raw::c_int,
        pindex: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_send_debug_keys(
        xch: *mut xc_interface,
        keys: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub type xc_physinfo_t = xen_sysctl_physinfo;
pub type xc_cputopo_t = xen_sysctl_cputopo;
pub type xc_numainfo_t = xen_sysctl_numainfo;
pub type xc_meminfo_t = xen_sysctl_meminfo;
pub type xc_pcitopoinfo_t = xen_sysctl_pcitopoinfo;
pub type xc_cpu_to_node_t = u32;
pub type xc_cpu_to_socket_t = u32;
pub type xc_cpu_to_core_t = u32;
pub type xc_node_to_memsize_t = u64;
pub type xc_node_to_memfree_t = u64;
pub type xc_node_to_node_dist_t = u32;
extern "C" {
    pub fn xc_physinfo(xch: *mut xc_interface, info: *mut xc_physinfo_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cputopoinfo(
        xch: *mut xc_interface,
        max_cpus: *mut ::std::os::raw::c_uint,
        cputopo: *mut xc_cputopo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_microcode_update(
        xch: *mut xc_interface,
        buf: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_numainfo(
        xch: *mut xc_interface,
        max_nodes: *mut ::std::os::raw::c_uint,
        meminfo: *mut xc_meminfo_t,
        distance: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_pcitopoinfo(
        xch: *mut xc_interface,
        num_devs: ::std::os::raw::c_uint,
        devs: *mut physdev_pci_device_t,
        nodes: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sched_id(
        xch: *mut xc_interface,
        sched_id: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_machphys_mfn_list(
        xch: *mut xc_interface,
        max_extents: ::std::os::raw::c_ulong,
        extent_start: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
pub type xc_cpuinfo_t = xen_sysctl_cpuinfo;
extern "C" {
    pub fn xc_getcpuinfo(
        xch: *mut xc_interface,
        max_cpus: ::std::os::raw::c_int,
        info: *mut xc_cpuinfo_t,
        nr_cpus: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_setmaxmem(
        xch: *mut xc_interface,
        domid: u32,
        max_memkb: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_set_memmap_limit(
        xch: *mut xc_interface,
        domid: u32,
        map_limitkb: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_setvnuma(
        xch: *mut xc_interface,
        domid: u32,
        nr_vnodes: u32,
        nr_regions: u32,
        nr_vcpus: u32,
        vmemrange: *mut xen_vmemrange_t,
        vdistance: *mut ::std::os::raw::c_uint,
        vcpu_to_vnode: *mut ::std::os::raw::c_uint,
        vnode_to_pnode: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_getvnuma(
        xch: *mut xc_interface,
        domid: u32,
        nr_vnodes: *mut u32,
        nr_vmemranges: *mut u32,
        nr_vcpus: *mut u32,
        vmemrange: *mut xen_vmemrange_t,
        vdistance: *mut ::std::os::raw::c_uint,
        vcpu_to_vnode: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_soft_reset(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_reserved_device_memory_map(
        xch: *mut xc_interface,
        flags: u32,
        seg: u16,
        bus: u8,
        devfn: u8,
        entries: *mut xen_reserved_device_memory,
        max_entries: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_set_time_offset(
        xch: *mut xc_interface,
        domid: u32,
        time_offset_seconds: i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_set_tsc_info(
        xch: *mut xc_interface,
        domid: u32,
        tsc_mode: u32,
        elapsed_nsec: u64,
        gtsc_khz: u32,
        incarnation: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_get_tsc_info(
        xch: *mut xc_interface,
        domid: u32,
        tsc_mode: *mut u32,
        elapsed_nsec: *mut u64,
        gtsc_khz: *mut u32,
        incarnation: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_maximum_gpfn(
        xch: *mut xc_interface,
        domid: u32,
        gpfns: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_nr_gpfns(
        xch: *mut xc_interface,
        domid: u32,
        gpfns: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_increase_reservation(
        xch: *mut xc_interface,
        domid: u32,
        nr_extents: ::std::os::raw::c_ulong,
        extent_order: ::std::os::raw::c_uint,
        mem_flags: ::std::os::raw::c_uint,
        extent_start: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_increase_reservation_exact(
        xch: *mut xc_interface,
        domid: u32,
        nr_extents: ::std::os::raw::c_ulong,
        extent_order: ::std::os::raw::c_uint,
        mem_flags: ::std::os::raw::c_uint,
        extent_start: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_decrease_reservation(
        xch: *mut xc_interface,
        domid: u32,
        nr_extents: ::std::os::raw::c_ulong,
        extent_order: ::std::os::raw::c_uint,
        extent_start: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_decrease_reservation_exact(
        xch: *mut xc_interface,
        domid: u32,
        nr_extents: ::std::os::raw::c_ulong,
        extent_order: ::std::os::raw::c_uint,
        extent_start: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_add_to_physmap(
        xch: *mut xc_interface,
        domid: u32,
        space: ::std::os::raw::c_uint,
        idx: ::std::os::raw::c_ulong,
        gpfn: xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_add_to_physmap_batch(
        xch: *mut xc_interface,
        domid: u32,
        foreign_domid: u32,
        space: ::std::os::raw::c_uint,
        size: ::std::os::raw::c_uint,
        idxs: *mut xen_ulong_t,
        gfpns: *mut xen_pfn_t,
        errs: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_remove_from_physmap(
        xch: *mut xc_interface,
        domid: u32,
        gpfn: xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_populate_physmap(
        xch: *mut xc_interface,
        domid: u32,
        nr_extents: ::std::os::raw::c_ulong,
        extent_order: ::std::os::raw::c_uint,
        mem_flags: ::std::os::raw::c_uint,
        extent_start: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_populate_physmap_exact(
        xch: *mut xc_interface,
        domid: u32,
        nr_extents: ::std::os::raw::c_ulong,
        extent_order: ::std::os::raw::c_uint,
        mem_flags: ::std::os::raw::c_uint,
        extent_start: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_claim_pages(
        xch: *mut xc_interface,
        domid: u32,
        nr_pages: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_memory_exchange_pages(
        xch: *mut xc_interface,
        domid: u32,
        nr_in_extents: ::std::os::raw::c_ulong,
        in_order: ::std::os::raw::c_uint,
        in_extents: *mut xen_pfn_t,
        nr_out_extents: ::std::os::raw::c_ulong,
        out_order: ::std::os::raw::c_uint,
        out_extents: *mut xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_set_pod_target(
        xch: *mut xc_interface,
        domid: u32,
        target_pages: u64,
        tot_pages: *mut u64,
        pod_cache_pages: *mut u64,
        pod_entries: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_get_pod_target(
        xch: *mut xc_interface,
        domid: u32,
        tot_pages: *mut u64,
        pod_cache_pages: *mut u64,
        pod_entries: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_ioport_permission(
        xch: *mut xc_interface,
        domid: u32,
        first_port: u32,
        nr_ports: u32,
        allow_access: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_irq_permission(
        xch: *mut xc_interface,
        domid: u32,
        pirq: u32,
        allow_access: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_iomem_permission(
        xch: *mut xc_interface,
        domid: u32,
        first_mfn: ::std::os::raw::c_ulong,
        nr_mfns: ::std::os::raw::c_ulong,
        allow_access: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_make_page_below_4G(
        xch: *mut xc_interface,
        domid: u32,
        mfn: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
pub type xc_perfc_desc_t = xen_sysctl_perfc_desc_t;
pub type xc_perfc_val_t = xen_sysctl_perfc_val_t;
extern "C" {
    pub fn xc_perfc_reset(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_perfc_query_number(
        xch: *mut xc_interface,
        nbr_desc: *mut ::std::os::raw::c_int,
        nbr_val: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_perfc_query(
        xch: *mut xc_interface,
        desc: *mut xc_hypercall_buffer_t,
        val: *mut xc_hypercall_buffer_t,
    ) -> ::std::os::raw::c_int;
}
pub type xc_lockprof_data_t = xen_sysctl_lockprof_data_t;
extern "C" {
    pub fn xc_lockprof_reset(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_lockprof_query_number(
        xch: *mut xc_interface,
        n_elems: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_lockprof_query(
        xch: *mut xc_interface,
        n_elems: *mut u32,
        time: *mut u64,
        data: *mut xc_hypercall_buffer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memalign(
        xch: *mut xc_interface,
        alignment: size_t,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xc_translate_foreign_address(
        xch: *mut xc_interface,
        dom: u32,
        vcpu: ::std::os::raw::c_int,
        virt: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn xc_copy_to_domain_page(
        xch: *mut xc_interface,
        domid: u32,
        dst_pfn: ::std::os::raw::c_ulong,
        src_page: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_clear_domain_pages(
        xch: *mut xc_interface,
        domid: u32,
        dst_pfn: ::std::os::raw::c_ulong,
        num: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mmuext_op(
        xch: *mut xc_interface,
        op: *mut mmuext_op,
        nr_ops: ::std::os::raw::c_uint,
        dom: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_maximum_ram_page(
        xch: *mut xc_interface,
        max_mfn: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_tot_pages(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn xc_availheap(
        xch: *mut xc_interface,
        min_width: ::std::os::raw::c_int,
        max_width: ::std::os::raw::c_int,
        node: ::std::os::raw::c_int,
        bytes: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_tbuf_enable(
        xch: *mut xc_interface,
        pages: ::std::os::raw::c_ulong,
        mfn: *mut ::std::os::raw::c_ulong,
        size: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_tbuf_disable(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_tbuf_set_size(
        xch: *mut xc_interface,
        size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_tbuf_get_size(
        xch: *mut xc_interface,
        size: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_tbuf_set_cpu_mask(xch: *mut xc_interface, mask: xc_cpumap_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_tbuf_set_evt_mask(xch: *mut xc_interface, mask: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vmtrace_enable(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vmtrace_disable(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vmtrace_reset_and_enable(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vmtrace_output_position(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
        pos: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vmtrace_get_option(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
        key: u64,
        value: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vmtrace_set_option(
        xch: *mut xc_interface,
        domid: u32,
        vcpu: u32,
        key: u64,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domctl(xch: *mut xc_interface, domctl: *mut xen_domctl) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sysctl(xch: *mut xc_interface, sysctl: *mut xen_sysctl) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_version(
        xch: *mut xc_interface,
        cmd: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_op(xch: *mut xc_interface, op: *mut xen_flask_op_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_subscribe_for_suspend(
        xch: *mut xc_interface,
        domid: u32,
        port: evtchn_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_gnttab_op(
        xch: *mut xc_interface,
        cmd: ::std::os::raw::c_int,
        op: *mut ::std::os::raw::c_void,
        op_size: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_gnttab_query_size(
        xch: *mut xc_interface,
        query: *mut gnttab_query_size,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_gnttab_get_version(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_gnttab_map_table_v1(
        xch: *mut xc_interface,
        domid: u32,
        gnt_num: *mut ::std::os::raw::c_int,
    ) -> *mut grant_entry_v1_t;
}
extern "C" {
    pub fn xc_gnttab_map_table_v2(
        xch: *mut xc_interface,
        domid: u32,
        gnt_num: *mut ::std::os::raw::c_int,
    ) -> *mut grant_entry_v2_t;
}
extern "C" {
    pub fn xc_physdev_map_pirq(
        xch: *mut xc_interface,
        domid: u32,
        index: ::std::os::raw::c_int,
        pirq: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_physdev_map_pirq_msi(
        xch: *mut xc_interface,
        domid: u32,
        index: ::std::os::raw::c_int,
        pirq: *mut ::std::os::raw::c_int,
        devfn: ::std::os::raw::c_int,
        bus: ::std::os::raw::c_int,
        entry_nr: ::std::os::raw::c_int,
        table_base: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_physdev_unmap_pirq(
        xch: *mut xc_interface,
        domid: u32,
        pirq: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_error {
    pub code: xc_error_code,
    pub message: [::std::os::raw::c_char; 1024usize],
}
#[test]
fn bindgen_test_layout_xc_error() {
    assert_eq!(
        ::std::mem::size_of::<xc_error>(),
        1028usize,
        concat!("Size of: ", stringify!(xc_error))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_error>(),
        4usize,
        concat!("Alignment of ", stringify!(xc_error))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_error>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_error),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_error>())).message as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_error),
            "::",
            stringify!(message)
        )
    );
}
extern "C" {
    pub fn xc_error_code_to_desc(code: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xc_strerror(
        xch: *mut xc_interface,
        errcode: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xc_get_last_error(handle: *mut xc_interface) -> *const xc_error;
}
extern "C" {
    pub fn xc_clear_last_error(xch: *mut xc_interface);
}
extern "C" {
    pub fn xc_hvm_param_set(
        handle: *mut xc_interface,
        dom: u32,
        param: u32,
        value: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_hvm_param_get(
        handle: *mut xc_interface,
        dom: u32,
        param: u32,
        value: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_hvm_param(
        handle: *mut xc_interface,
        dom: u32,
        param: ::std::os::raw::c_int,
        value: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_hvm_param(
        handle: *mut xc_interface,
        dom: u32,
        param: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_assign_device(
        xch: *mut xc_interface,
        domid: u32,
        machine_sbdf: u32,
        flag: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_device_group(
        xch: *mut xc_interface,
        domid: u32,
        machine_sbdf: u32,
        max_sdevs: u32,
        num_sdevs: *mut u32,
        sdev_array: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_test_assign_device(
        xch: *mut xc_interface,
        domid: u32,
        machine_sbdf: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_deassign_device(
        xch: *mut xc_interface,
        domid: u32,
        machine_sbdf: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_assign_dt_device(
        xch: *mut xc_interface,
        domid: u32,
        path: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_test_assign_dt_device(
        xch: *mut xc_interface,
        domid: u32,
        path: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_deassign_dt_device(
        xch: *mut xc_interface,
        domid: u32,
        path: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_memory_mapping(
        xch: *mut xc_interface,
        domid: u32,
        first_gfn: ::std::os::raw::c_ulong,
        first_mfn: ::std::os::raw::c_ulong,
        nr_mfns: ::std::os::raw::c_ulong,
        add_mapping: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_ioport_mapping(
        xch: *mut xc_interface,
        domid: u32,
        first_gport: u32,
        first_mport: u32,
        nr_ports: u32,
        add_mapping: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_update_msi_irq(
        xch: *mut xc_interface,
        domid: u32,
        gvec: u32,
        pirq: u32,
        gflags: u32,
        gtable: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_unbind_msi_irq(
        xch: *mut xc_interface,
        domid: u32,
        gvec: u32,
        pirq: u32,
        gflags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_bind_pt_irq(
        xch: *mut xc_interface,
        domid: u32,
        machine_irq: u8,
        irq_type: u8,
        bus: u8,
        device: u8,
        intx: u8,
        isa_irq: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_unbind_pt_irq(
        xch: *mut xc_interface,
        domid: u32,
        machine_irq: u8,
        irq_type: u8,
        bus: u8,
        device: u8,
        intx: u8,
        isa_irq: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_bind_pt_pci_irq(
        xch: *mut xc_interface,
        domid: u32,
        machine_irq: u8,
        bus: u8,
        device: u8,
        intx: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_bind_pt_isa_irq(
        xch: *mut xc_interface,
        domid: u32,
        machine_irq: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_bind_pt_spi_irq(
        xch: *mut xc_interface,
        domid: u32,
        vspi: u16,
        spi: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_unbind_pt_spi_irq(
        xch: *mut xc_interface,
        domid: u32,
        vspi: u16,
        spi: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_set_target(
        xch: *mut xc_interface,
        domid: u32,
        target: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_debug_control(
        xch: *mut xc_interface,
        domid: u32,
        sop: u32,
        vcpu: u32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_px_val {
    pub freq: u64,
    pub residency: u64,
    pub count: u64,
}
#[test]
fn bindgen_test_layout_xc_px_val() {
    assert_eq!(
        ::std::mem::size_of::<xc_px_val>(),
        24usize,
        concat!("Size of: ", stringify!(xc_px_val))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_px_val>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_px_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_px_val>())).freq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_px_val),
            "::",
            stringify!(freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_px_val>())).residency as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_px_val),
            "::",
            stringify!(residency)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_px_val>())).count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_px_val),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_px_stat {
    pub total: u8,
    pub usable: u8,
    pub last: u8,
    pub cur: u8,
    pub trans_pt: *mut u64,
    pub pt: *mut xc_px_val,
}
#[test]
fn bindgen_test_layout_xc_px_stat() {
    assert_eq!(
        ::std::mem::size_of::<xc_px_stat>(),
        24usize,
        concat!("Size of: ", stringify!(xc_px_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_px_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_px_stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_px_stat>())).total as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_px_stat),
            "::",
            stringify!(total)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_px_stat>())).usable as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_px_stat),
            "::",
            stringify!(usable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_px_stat>())).last as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_px_stat),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_px_stat>())).cur as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_px_stat),
            "::",
            stringify!(cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_px_stat>())).trans_pt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_px_stat),
            "::",
            stringify!(trans_pt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_px_stat>())).pt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_px_stat),
            "::",
            stringify!(pt)
        )
    );
}
extern "C" {
    pub fn xc_pm_get_max_px(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
        max_px: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_pm_get_pxstat(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
        pxpt: *mut xc_px_stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_pm_reset_pxstat(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_cx_stat {
    pub nr: u32,
    pub last: u32,
    pub idle_time: u64,
    pub triggers: *mut u64,
    pub residencies: *mut u64,
    pub nr_pc: u32,
    pub nr_cc: u32,
    pub pc: *mut u64,
    pub cc: *mut u64,
}
#[test]
fn bindgen_test_layout_xc_cx_stat() {
    assert_eq!(
        ::std::mem::size_of::<xc_cx_stat>(),
        56usize,
        concat!("Size of: ", stringify!(xc_cx_stat))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_cx_stat>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_cx_stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_cx_stat>())).nr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_cx_stat),
            "::",
            stringify!(nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_cx_stat>())).last as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_cx_stat),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_cx_stat>())).idle_time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_cx_stat),
            "::",
            stringify!(idle_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_cx_stat>())).triggers as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_cx_stat),
            "::",
            stringify!(triggers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_cx_stat>())).residencies as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_cx_stat),
            "::",
            stringify!(residencies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_cx_stat>())).nr_pc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_cx_stat),
            "::",
            stringify!(nr_pc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_cx_stat>())).nr_cc as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_cx_stat),
            "::",
            stringify!(nr_cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_cx_stat>())).pc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_cx_stat),
            "::",
            stringify!(pc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_cx_stat>())).cc as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_cx_stat),
            "::",
            stringify!(cc)
        )
    );
}
pub type xc_cx_stat_t = xc_cx_stat;
extern "C" {
    pub fn xc_pm_get_max_cx(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
        max_cx: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_pm_get_cxstat(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
        cxpt: *mut xc_cx_stat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_pm_reset_cxstat(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cpu_online(
        xch: *mut xc_interface,
        cpu: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_cpu_offline(
        xch: *mut xc_interface,
        cpu: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_smt_enable(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_smt_disable(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
pub type xc_userspace_t = xen_userspace;
pub type xc_ondemand_t = xen_ondemand;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xc_get_cpufreq_para {
    pub cpu_num: u32,
    pub freq_num: u32,
    pub gov_num: u32,
    pub affected_cpus: *mut u32,
    pub scaling_available_frequencies: *mut u32,
    pub scaling_available_governors: *mut ::std::os::raw::c_char,
    pub scaling_driver: [::std::os::raw::c_char; 16usize],
    pub cpuinfo_cur_freq: u32,
    pub cpuinfo_max_freq: u32,
    pub cpuinfo_min_freq: u32,
    pub scaling_cur_freq: u32,
    pub scaling_governor: [::std::os::raw::c_char; 16usize],
    pub scaling_max_freq: u32,
    pub scaling_min_freq: u32,
    pub u: xc_get_cpufreq_para__bindgen_ty_1,
    pub turbo_enabled: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union xc_get_cpufreq_para__bindgen_ty_1 {
    pub userspace: xc_userspace_t,
    pub ondemand: xc_ondemand_t,
}
#[test]
fn bindgen_test_layout_xc_get_cpufreq_para__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<xc_get_cpufreq_para__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(xc_get_cpufreq_para__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_get_cpufreq_para__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(xc_get_cpufreq_para__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xc_get_cpufreq_para__bindgen_ty_1>())).userspace as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para__bindgen_ty_1),
            "::",
            stringify!(userspace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xc_get_cpufreq_para__bindgen_ty_1>())).ondemand as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para__bindgen_ty_1),
            "::",
            stringify!(ondemand)
        )
    );
}
#[test]
fn bindgen_test_layout_xc_get_cpufreq_para() {
    assert_eq!(
        ::std::mem::size_of::<xc_get_cpufreq_para>(),
        120usize,
        concat!("Size of: ", stringify!(xc_get_cpufreq_para))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_get_cpufreq_para>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_get_cpufreq_para))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_get_cpufreq_para>())).cpu_num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para),
            "::",
            stringify!(cpu_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_get_cpufreq_para>())).freq_num as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para),
            "::",
            stringify!(freq_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_get_cpufreq_para>())).gov_num as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para),
            "::",
            stringify!(gov_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xc_get_cpufreq_para>())).affected_cpus as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para),
            "::",
            stringify!(affected_cpus)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xc_get_cpufreq_para>())).scaling_available_frequencies
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para),
            "::",
            stringify!(scaling_available_frequencies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xc_get_cpufreq_para>())).scaling_available_governors as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para),
            "::",
            stringify!(scaling_available_governors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xc_get_cpufreq_para>())).scaling_driver as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para),
            "::",
            stringify!(scaling_driver)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xc_get_cpufreq_para>())).cpuinfo_cur_freq as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para),
            "::",
            stringify!(cpuinfo_cur_freq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xc_get_cpufreq_para>())).cpuinfo_max_freq as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para),
            "::",
            stringify!(cpuinfo_max_freq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xc_get_cpufreq_para>())).cpuinfo_min_freq as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para),
            "::",
            stringify!(cpuinfo_min_freq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xc_get_cpufreq_para>())).scaling_cur_freq as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para),
            "::",
            stringify!(scaling_cur_freq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xc_get_cpufreq_para>())).scaling_governor as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para),
            "::",
            stringify!(scaling_governor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xc_get_cpufreq_para>())).scaling_max_freq as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para),
            "::",
            stringify!(scaling_max_freq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xc_get_cpufreq_para>())).scaling_min_freq as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para),
            "::",
            stringify!(scaling_min_freq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_get_cpufreq_para>())).u as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xc_get_cpufreq_para>())).turbo_enabled as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_get_cpufreq_para),
            "::",
            stringify!(turbo_enabled)
        )
    );
}
extern "C" {
    pub fn xc_get_cpufreq_para(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
        user_para: *mut xc_get_cpufreq_para,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_cpufreq_gov(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
        govname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_cpufreq_para(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
        ctrl_type: ::std::os::raw::c_int,
        ctrl_value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_cpufreq_avgfreq(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
        avg_freq: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_sched_opt_smt(xch: *mut xc_interface, value: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_cpuidle_max_cstate(
        xch: *mut xc_interface,
        value: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_cpuidle_max_cstate(xch: *mut xc_interface, value: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_cpuidle_max_csubstate(
        xch: *mut xc_interface,
        value: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_cpuidle_max_csubstate(
        xch: *mut xc_interface,
        value: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_enable_turbo(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_disable_turbo(
        xch: *mut xc_interface,
        cpuid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_get_domain_state(
        handle: *mut xc_interface,
        dom: u32,
        state: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_set_domain_state(
        handle: *mut xc_interface,
        dom: u32,
        state: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_set_vcpu_enable_notify(
        handle: *mut xc_interface,
        domid: u32,
        vcpuid: u32,
        gfn: xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_set_vcpu_disable_notify(
        handle: *mut xc_interface,
        domid: u32,
        vcpuid: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_create_view(
        handle: *mut xc_interface,
        domid: u32,
        default_access: xenmem_access_t,
        view_id: *mut u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_destroy_view(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_switch_to_view(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_set_suppress_ve(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
        gfn: xen_pfn_t,
        sve: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_set_supress_ve_multi(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
        first_gfn: xen_pfn_t,
        last_gfn: xen_pfn_t,
        sve: bool,
        error_gfn: *mut xen_pfn_t,
        error_code: *mut i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_get_suppress_ve(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
        gfn: xen_pfn_t,
        sve: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_set_mem_access(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
        gfn: xen_pfn_t,
        access: xenmem_access_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_set_mem_access_multi(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
        access: *mut u8,
        gfns: *mut u64,
        nr: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_get_mem_access(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
        gfn: xen_pfn_t,
        access: *mut xenmem_access_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_change_gfn(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
        old_gfn: xen_pfn_t,
        new_gfn: xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_get_vcpu_p2m_idx(
        handle: *mut xc_interface,
        domid: u32,
        vcpuid: u32,
        p2midx: *mut u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_altp2m_set_visibility(
        handle: *mut xc_interface,
        domid: u32,
        view_id: u16,
        visible: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mem_paging_enable(
        xch: *mut xc_interface,
        domain_id: u32,
        port: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mem_paging_disable(xch: *mut xc_interface, domain_id: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mem_paging_resume(xch: *mut xc_interface, domain_id: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mem_paging_nominate(
        xch: *mut xc_interface,
        domain_id: u32,
        gfn: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mem_paging_evict(
        xch: *mut xc_interface,
        domain_id: u32,
        gfn: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mem_paging_prep(
        xch: *mut xc_interface,
        domain_id: u32,
        gfn: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_mem_paging_load(
        xch: *mut xc_interface,
        domain_id: u32,
        gfn: u64,
        buffer: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_mem_access(
        xch: *mut xc_interface,
        domain_id: u32,
        access: xenmem_access_t,
        first_pfn: u64,
        nr: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_set_mem_access_multi(
        xch: *mut xc_interface,
        domain_id: u32,
        access: *mut u8,
        pages: *mut u64,
        nr: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_get_mem_access(
        xch: *mut xc_interface,
        domain_id: u32,
        pfn: u64,
        access: *mut xenmem_access_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_vm_event_get_version(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_enable(
        xch: *mut xc_interface,
        domain_id: u32,
        port: *mut u32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xc_monitor_disable(xch: *mut xc_interface, domain_id: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_resume(xch: *mut xc_interface, domain_id: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_get_capabilities(
        xch: *mut xc_interface,
        domain_id: u32,
        capabilities: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_write_ctrlreg(
        xch: *mut xc_interface,
        domain_id: u32,
        index: u16,
        enable: bool,
        sync: bool,
        bitmask: u64,
        onchangeonly: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_mov_to_msr(
        xch: *mut xc_interface,
        domain_id: u32,
        msr: u32,
        enable: bool,
        onchangeonly: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_singlestep(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_software_breakpoint(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_descriptor_access(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_guest_request(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
        sync: bool,
        allow_userspace: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_inguest_pagefault(
        xch: *mut xc_interface,
        domain_id: u32,
        disable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_debug_exceptions(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
        sync: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_cpuid(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_privileged_call(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_emul_unimplemented(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_monitor_emulate_each_rep(
        xch: *mut xc_interface,
        domain_id: u32,
        enable: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_control(
        xch: *mut xc_interface,
        domid: u32,
        enable: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_ring_enable(
        xch: *mut xc_interface,
        domid: u32,
        port: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_ring_disable(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_domain_resume(xch: *mut xc_interface, domid: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_nominate_gfn(
        xch: *mut xc_interface,
        domid: u32,
        gfn: ::std::os::raw::c_ulong,
        handle: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_nominate_gref(
        xch: *mut xc_interface,
        domid: u32,
        gref: grant_ref_t,
        handle: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_share_gfns(
        xch: *mut xc_interface,
        source_domain: u32,
        source_gfn: ::std::os::raw::c_ulong,
        source_handle: u64,
        client_domain: u32,
        client_gfn: ::std::os::raw::c_ulong,
        client_handle: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_share_grefs(
        xch: *mut xc_interface,
        source_domain: u32,
        source_gref: grant_ref_t,
        source_handle: u64,
        client_domain: u32,
        client_gref: grant_ref_t,
        client_handle: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_add_to_physmap(
        xch: *mut xc_interface,
        source_domain: u32,
        source_gfn: ::std::os::raw::c_ulong,
        source_handle: u64,
        client_domain: u32,
        client_gfn: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_range_share(
        xch: *mut xc_interface,
        source_domain: u32,
        client_domain: u32,
        first_gfn: u64,
        last_gfn: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_fork(
        xch: *mut xc_interface,
        source_domain: u32,
        client_domain: u32,
        allow_with_iommu: bool,
        block_interrupts: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_fork_reset(
        xch: *mut xc_interface,
        forked_domain: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_debug_gfn(
        xch: *mut xc_interface,
        domid: u32,
        gfn: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_debug_gref(
        xch: *mut xc_interface,
        domid: u32,
        gref: grant_ref_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_memshr_audit(xch: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_sharing_freed_pages(xch: *mut xc_interface) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn xc_sharing_used_frames(xch: *mut xc_interface) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn xc_flask_load(
        xc_handle: *mut xc_interface,
        buf: *mut ::std::os::raw::c_char,
        size: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_context_to_sid(
        xc_handle: *mut xc_interface,
        buf: *mut ::std::os::raw::c_char,
        size: u32,
        sid: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_sid_to_context(
        xc_handle: *mut xc_interface,
        sid: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        size: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_getenforce(xc_handle: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_setenforce(
        xc_handle: *mut xc_interface,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_getbool_byid(
        xc_handle: *mut xc_interface,
        id: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
        size: u32,
        curr: *mut ::std::os::raw::c_int,
        pend: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_getbool_byname(
        xc_handle: *mut xc_interface,
        name: *mut ::std::os::raw::c_char,
        curr: *mut ::std::os::raw::c_int,
        pend: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_setbool(
        xc_handle: *mut xc_interface,
        name: *mut ::std::os::raw::c_char,
        value: ::std::os::raw::c_int,
        commit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_add_pirq(
        xc_handle: *mut xc_interface,
        pirq: ::std::os::raw::c_uint,
        scontext: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_add_ioport(
        xc_handle: *mut xc_interface,
        low: ::std::os::raw::c_ulong,
        high: ::std::os::raw::c_ulong,
        scontext: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_add_iomem(
        xc_handle: *mut xc_interface,
        low: ::std::os::raw::c_ulong,
        high: ::std::os::raw::c_ulong,
        scontext: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_add_device(
        xc_handle: *mut xc_interface,
        device: ::std::os::raw::c_ulong,
        scontext: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_del_pirq(
        xc_handle: *mut xc_interface,
        pirq: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_del_ioport(
        xc_handle: *mut xc_interface,
        low: ::std::os::raw::c_ulong,
        high: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_del_iomem(
        xc_handle: *mut xc_interface,
        low: ::std::os::raw::c_ulong,
        high: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_del_device(
        xc_handle: *mut xc_interface,
        device: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_access(
        xc_handle: *mut xc_interface,
        scon: *const ::std::os::raw::c_char,
        tcon: *const ::std::os::raw::c_char,
        tclass: u16,
        req: u32,
        allowed: *mut u32,
        decided: *mut u32,
        auditallow: *mut u32,
        auditdeny: *mut u32,
        seqno: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_avc_cachestats(
        xc_handle: *mut xc_interface,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_policyvers(xc_handle: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_avc_hashstats(
        xc_handle: *mut xc_interface,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_getavc_threshold(xc_handle: *mut xc_interface) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_setavc_threshold(
        xc_handle: *mut xc_interface,
        threshold: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_flask_relabel_domain(
        xch: *mut xc_interface,
        domid: u32,
        sid: u32,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct elf_binary {
    _unused: [u8; 0],
}
extern "C" {
    pub fn xc_elf_set_logfile(
        xch: *mut xc_interface,
        elf: *mut elf_binary,
        verbose: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xc_kexec_exec(
        xch: *mut xc_interface,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_kexec_get_range(
        xch: *mut xc_interface,
        range: ::std::os::raw::c_int,
        nr: ::std::os::raw::c_int,
        size: *mut u64,
        start: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_kexec_load(
        xch: *mut xc_interface,
        type_: u8,
        arch: u16,
        entry_maddr: u64,
        nr_segments: u32,
        segments: *mut xen_kexec_segment_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_kexec_unload(
        xch: *mut xc_interface,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_kexec_status(
        xch: *mut xc_interface,
        type_: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type xc_resource_entry_t = xenpf_resource_entry_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xc_resource_op {
    pub result: u64,
    pub cpu: u32,
    pub nr_entries: u32,
    pub entries: *mut xc_resource_entry_t,
}
#[test]
fn bindgen_test_layout_xc_resource_op() {
    assert_eq!(
        ::std::mem::size_of::<xc_resource_op>(),
        24usize,
        concat!("Size of: ", stringify!(xc_resource_op))
    );
    assert_eq!(
        ::std::mem::align_of::<xc_resource_op>(),
        8usize,
        concat!("Alignment of ", stringify!(xc_resource_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_resource_op>())).result as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_resource_op),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_resource_op>())).cpu as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_resource_op),
            "::",
            stringify!(cpu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_resource_op>())).nr_entries as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_resource_op),
            "::",
            stringify!(nr_entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xc_resource_op>())).entries as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xc_resource_op),
            "::",
            stringify!(entries)
        )
    );
}
pub type xc_resource_op_t = xc_resource_op;
extern "C" {
    pub fn xc_resource_op(
        xch: *mut xc_interface,
        nr_ops: u32,
        ops: *mut xc_resource_op_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_livepatch_upload(
        xch: *mut xc_interface,
        name: *mut ::std::os::raw::c_char,
        payload: *mut ::std::os::raw::c_uchar,
        size: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_livepatch_get(
        xch: *mut xc_interface,
        name: *mut ::std::os::raw::c_char,
        status: *mut xen_livepatch_status_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_livepatch_list_get_sizes(
        xch: *mut xc_interface,
        nr: *mut ::std::os::raw::c_uint,
        name_total_size: *mut u32,
        metadata_total_size: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_livepatch_list(
        xch: *mut xc_interface,
        max: ::std::os::raw::c_uint,
        start: ::std::os::raw::c_uint,
        info: *mut xen_livepatch_status,
        name: *mut ::std::os::raw::c_char,
        len: *mut u32,
        name_total_size: u32,
        metadata: *mut ::std::os::raw::c_char,
        metadata_len: *mut u32,
        metadata_total_size: u32,
        done: *mut ::std::os::raw::c_uint,
        left: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_livepatch_apply(
        xch: *mut xc_interface,
        name: *mut ::std::os::raw::c_char,
        timeout: u32,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_livepatch_revert(
        xch: *mut xc_interface,
        name: *mut ::std::os::raw::c_char,
        timeout: u32,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_livepatch_unload(
        xch: *mut xc_interface,
        name: *mut ::std::os::raw::c_char,
        timeout: u32,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_livepatch_replace(
        xch: *mut xc_interface,
        name: *mut ::std::os::raw::c_char,
        timeout: u32,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xc_domain_cacheflush(
        xch: *mut xc_interface,
        domid: u32,
        start_pfn: xen_pfn_t,
        nr_pfns: xen_pfn_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_open(
        logger: *mut xentoollog_logger,
        open_flags: ::std::os::raw::c_uint,
    ) -> *mut xendevicemodel_handle;
}
extern "C" {
    pub fn xendevicemodel_close(dmod: *mut xendevicemodel_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_create_ioreq_server(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        handle_bufioreq: ::std::os::raw::c_int,
        id: *mut ioservid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_get_ioreq_server_info(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        id: ioservid_t,
        ioreq_gfn: *mut xen_pfn_t,
        bufioreq_gfn: *mut xen_pfn_t,
        bufioreq_port: *mut evtchn_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_map_io_range_to_ioreq_server(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        id: ioservid_t,
        is_mmio: ::std::os::raw::c_int,
        start: u64,
        end: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_unmap_io_range_from_ioreq_server(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        id: ioservid_t,
        is_mmio: ::std::os::raw::c_int,
        start: u64,
        end: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_map_mem_type_to_ioreq_server(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        id: ioservid_t,
        type_: u16,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_map_pcidev_to_ioreq_server(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        id: ioservid_t,
        segment: u16,
        bus: u8,
        device: u8,
        function: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_unmap_pcidev_from_ioreq_server(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        id: ioservid_t,
        segment: u16,
        bus: u8,
        device: u8,
        function: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_destroy_ioreq_server(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        id: ioservid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_set_ioreq_server_state(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        id: ioservid_t,
        enabled: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_set_pci_intx_level(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        segment: u16,
        bus: u8,
        device: u8,
        intx: u8,
        level: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_set_isa_irq_level(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        irq: u8,
        level: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_set_irq_level(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        irq: ::std::os::raw::c_uint,
        level: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_set_pci_link_route(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        link: u8,
        irq: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_inject_msi(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        msi_addr: u64,
        msi_data: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_track_dirty_vram(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        first_pfn: u64,
        nr: u32,
        dirty_bitmap: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_modified_memory(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        first_pfn: u64,
        nr: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_modified_memory_bulk(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        extents: *mut xen_dm_op_modified_memory_extent,
        nr: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_set_mem_type(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        mem_type: hvmmem_type_t,
        first_pfn: u64,
        nr: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_inject_event(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        vcpu: ::std::os::raw::c_int,
        vector: u8,
        type_: u8,
        error_code: u32,
        insn_len: u8,
        extra: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_shutdown(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        reason: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_relocate_memory(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        size: u32,
        src_gfn: u64,
        dst_gfn: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_pin_memory_cacheattr(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        start: u64,
        end: u64,
        type_: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_nr_vcpus(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
        vcpus: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xendevicemodel_restrict(
        dmod: *mut xendevicemodel_handle,
        domid: domid_t,
    ) -> ::std::os::raw::c_int;
}
pub type xenevtchn_port_or_error_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenevtchn_handle {
    _unused: [u8; 0],
}
extern "C" {
    pub fn xenevtchn_open(
        logger: *mut xentoollog_logger,
        flags: ::std::os::raw::c_uint,
    ) -> *mut xenevtchn_handle;
}
extern "C" {
    pub fn xenevtchn_fdopen(
        logger: *mut xentoollog_logger,
        fd: ::std::os::raw::c_int,
        open_flags: ::std::os::raw::c_uint,
    ) -> *mut xenevtchn_handle;
}
extern "C" {
    pub fn xenevtchn_close(xce: *mut xenevtchn_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenevtchn_fd(xce: *mut xenevtchn_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenevtchn_notify(
        xce: *mut xenevtchn_handle,
        port: evtchn_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenevtchn_bind_unbound_port(
        xce: *mut xenevtchn_handle,
        domid: u32,
    ) -> xenevtchn_port_or_error_t;
}
extern "C" {
    pub fn xenevtchn_bind_interdomain(
        xce: *mut xenevtchn_handle,
        domid: u32,
        remote_port: evtchn_port_t,
    ) -> xenevtchn_port_or_error_t;
}
extern "C" {
    pub fn xenevtchn_bind_virq(
        xce: *mut xenevtchn_handle,
        virq: ::std::os::raw::c_uint,
    ) -> xenevtchn_port_or_error_t;
}
extern "C" {
    pub fn xenevtchn_unbind(
        xce: *mut xenevtchn_handle,
        port: evtchn_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenevtchn_pending(xce: *mut xenevtchn_handle) -> xenevtchn_port_or_error_t;
}
extern "C" {
    pub fn xenevtchn_unmask(
        xce: *mut xenevtchn_handle,
        port: evtchn_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenevtchn_restrict(xce: *mut xenevtchn_handle, domid: domid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenforeignmemory_open(
        logger: *mut xentoollog_logger,
        open_flags: ::std::os::raw::c_uint,
    ) -> *mut xenforeignmemory_handle;
}
extern "C" {
    pub fn xenforeignmemory_close(fmem: *mut xenforeignmemory_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenforeignmemory_map(
        fmem: *mut xenforeignmemory_handle,
        dom: u32,
        prot: ::std::os::raw::c_int,
        pages: size_t,
        arr: *const xen_pfn_t,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xenforeignmemory_map2(
        fmem: *mut xenforeignmemory_handle,
        dom: u32,
        addr: *mut ::std::os::raw::c_void,
        prot: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        pages: size_t,
        arr: *const xen_pfn_t,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xenforeignmemory_unmap(
        fmem: *mut xenforeignmemory_handle,
        addr: *mut ::std::os::raw::c_void,
        pages: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenforeignmemory_restrict(
        fmem: *mut xenforeignmemory_handle,
        domid: domid_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenforeignmemory_resource_handle {
    _unused: [u8; 0],
}
extern "C" {
    pub fn xenforeignmemory_map_resource(
        fmem: *mut xenforeignmemory_handle,
        domid: domid_t,
        type_: ::std::os::raw::c_uint,
        id: ::std::os::raw::c_uint,
        frame: ::std::os::raw::c_ulong,
        nr_frames: ::std::os::raw::c_ulong,
        paddr: *mut *mut ::std::os::raw::c_void,
        prot: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> *mut xenforeignmemory_resource_handle;
}
extern "C" {
    pub fn xenforeignmemory_unmap_resource(
        fmem: *mut xenforeignmemory_handle,
        fres: *mut xenforeignmemory_resource_handle,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xenforeignmemory_resource_size(
        fmem: *mut xenforeignmemory_handle,
        domid: domid_t,
        type_: ::std::os::raw::c_uint,
        id: ::std::os::raw::c_uint,
        size: *mut size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
pub const xsd_sockmsg_type_XS_CONTROL: xsd_sockmsg_type = 0;
pub const xsd_sockmsg_type_XS_DIRECTORY: xsd_sockmsg_type = 1;
pub const xsd_sockmsg_type_XS_READ: xsd_sockmsg_type = 2;
pub const xsd_sockmsg_type_XS_GET_PERMS: xsd_sockmsg_type = 3;
pub const xsd_sockmsg_type_XS_WATCH: xsd_sockmsg_type = 4;
pub const xsd_sockmsg_type_XS_UNWATCH: xsd_sockmsg_type = 5;
pub const xsd_sockmsg_type_XS_TRANSACTION_START: xsd_sockmsg_type = 6;
pub const xsd_sockmsg_type_XS_TRANSACTION_END: xsd_sockmsg_type = 7;
pub const xsd_sockmsg_type_XS_INTRODUCE: xsd_sockmsg_type = 8;
pub const xsd_sockmsg_type_XS_RELEASE: xsd_sockmsg_type = 9;
pub const xsd_sockmsg_type_XS_GET_DOMAIN_PATH: xsd_sockmsg_type = 10;
pub const xsd_sockmsg_type_XS_WRITE: xsd_sockmsg_type = 11;
pub const xsd_sockmsg_type_XS_MKDIR: xsd_sockmsg_type = 12;
pub const xsd_sockmsg_type_XS_RM: xsd_sockmsg_type = 13;
pub const xsd_sockmsg_type_XS_SET_PERMS: xsd_sockmsg_type = 14;
pub const xsd_sockmsg_type_XS_WATCH_EVENT: xsd_sockmsg_type = 15;
pub const xsd_sockmsg_type_XS_ERROR: xsd_sockmsg_type = 16;
pub const xsd_sockmsg_type_XS_IS_DOMAIN_INTRODUCED: xsd_sockmsg_type = 17;
pub const xsd_sockmsg_type_XS_RESUME: xsd_sockmsg_type = 18;
pub const xsd_sockmsg_type_XS_SET_TARGET: xsd_sockmsg_type = 19;
pub const xsd_sockmsg_type_XS_RESET_WATCHES: xsd_sockmsg_type = 21;
pub const xsd_sockmsg_type_XS_DIRECTORY_PART: xsd_sockmsg_type = 22;
pub const xsd_sockmsg_type_XS_TYPE_COUNT: xsd_sockmsg_type = 23;
pub const xsd_sockmsg_type_XS_INVALID: xsd_sockmsg_type = 65535;
pub type xsd_sockmsg_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsd_errors {
    pub errnum: ::std::os::raw::c_int,
    pub errstring: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_xsd_errors() {
    assert_eq!(
        ::std::mem::size_of::<xsd_errors>(),
        16usize,
        concat!("Size of: ", stringify!(xsd_errors))
    );
    assert_eq!(
        ::std::mem::align_of::<xsd_errors>(),
        8usize,
        concat!("Alignment of ", stringify!(xsd_errors))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xsd_errors>())).errnum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xsd_errors),
            "::",
            stringify!(errnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xsd_errors>())).errstring as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xsd_errors),
            "::",
            stringify!(errstring)
        )
    );
}
extern "C" {
    pub static mut xsd_errors: [xsd_errors; 15usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xsd_sockmsg {
    pub type_: u32,
    pub req_id: u32,
    pub tx_id: u32,
    pub len: u32,
}
#[test]
fn bindgen_test_layout_xsd_sockmsg() {
    assert_eq!(
        ::std::mem::size_of::<xsd_sockmsg>(),
        16usize,
        concat!("Size of: ", stringify!(xsd_sockmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<xsd_sockmsg>(),
        4usize,
        concat!("Alignment of ", stringify!(xsd_sockmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xsd_sockmsg>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xsd_sockmsg),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xsd_sockmsg>())).req_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xsd_sockmsg),
            "::",
            stringify!(req_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xsd_sockmsg>())).tx_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xsd_sockmsg),
            "::",
            stringify!(tx_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xsd_sockmsg>())).len as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(xsd_sockmsg),
            "::",
            stringify!(len)
        )
    );
}
pub const xs_watch_type_XS_WATCH_PATH: xs_watch_type = 0;
pub const xs_watch_type_XS_WATCH_TOKEN: xs_watch_type = 1;
pub type xs_watch_type = ::std::os::raw::c_uint;
pub type XENSTORE_RING_IDX = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xenstore_domain_interface {
    pub req: [::std::os::raw::c_char; 1024usize],
    pub rsp: [::std::os::raw::c_char; 1024usize],
    pub req_cons: XENSTORE_RING_IDX,
    pub req_prod: XENSTORE_RING_IDX,
    pub rsp_cons: XENSTORE_RING_IDX,
    pub rsp_prod: XENSTORE_RING_IDX,
    pub server_features: u32,
    pub connection: u32,
}
#[test]
fn bindgen_test_layout_xenstore_domain_interface() {
    assert_eq!(
        ::std::mem::size_of::<xenstore_domain_interface>(),
        2072usize,
        concat!("Size of: ", stringify!(xenstore_domain_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<xenstore_domain_interface>(),
        4usize,
        concat!("Alignment of ", stringify!(xenstore_domain_interface))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenstore_domain_interface>())).req as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xenstore_domain_interface),
            "::",
            stringify!(req)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xenstore_domain_interface>())).rsp as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(xenstore_domain_interface),
            "::",
            stringify!(rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenstore_domain_interface>())).req_cons as *const _ as usize
        },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(xenstore_domain_interface),
            "::",
            stringify!(req_cons)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenstore_domain_interface>())).req_prod as *const _ as usize
        },
        2052usize,
        concat!(
            "Offset of field: ",
            stringify!(xenstore_domain_interface),
            "::",
            stringify!(req_prod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenstore_domain_interface>())).rsp_cons as *const _ as usize
        },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(xenstore_domain_interface),
            "::",
            stringify!(rsp_cons)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenstore_domain_interface>())).rsp_prod as *const _ as usize
        },
        2060usize,
        concat!(
            "Offset of field: ",
            stringify!(xenstore_domain_interface),
            "::",
            stringify!(rsp_prod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenstore_domain_interface>())).server_features as *const _
                as usize
        },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(xenstore_domain_interface),
            "::",
            stringify!(server_features)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<xenstore_domain_interface>())).connection as *const _ as usize
        },
        2068usize,
        concat!(
            "Offset of field: ",
            stringify!(xenstore_domain_interface),
            "::",
            stringify!(connection)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xs_permissions {
    pub id: ::std::os::raw::c_uint,
    pub perms: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_xs_permissions() {
    assert_eq!(
        ::std::mem::size_of::<xs_permissions>(),
        8usize,
        concat!("Size of: ", stringify!(xs_permissions))
    );
    assert_eq!(
        ::std::mem::align_of::<xs_permissions>(),
        4usize,
        concat!("Alignment of ", stringify!(xs_permissions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xs_permissions>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xs_permissions),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xs_permissions>())).perms as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xs_permissions),
            "::",
            stringify!(perms)
        )
    );
}
extern "C" {
    pub fn xs_daemon_rundir() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_daemon_socket() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_daemon_socket_ro() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_write_all(
        fd: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn xs_strings_to_perms(
        perms: *mut xs_permissions,
        num: ::std::os::raw::c_uint,
        strings: *const ::std::os::raw::c_char,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xs_handle {
    _unused: [u8; 0],
}
pub type xs_transaction_t = u32;
extern "C" {
    pub fn xs_open(flags: ::std::os::raw::c_ulong) -> *mut xs_handle;
}
extern "C" {
    pub fn xs_close(xsh: *mut xs_handle);
}
extern "C" {
    pub fn xs_daemon_open() -> *mut xs_handle;
}
extern "C" {
    pub fn xs_domain_open() -> *mut xs_handle;
}
extern "C" {
    pub fn xs_daemon_open_readonly() -> *mut xs_handle;
}
extern "C" {
    pub fn xs_daemon_close(arg1: *mut xs_handle);
}
extern "C" {
    pub fn xs_daemon_destroy_postfork(arg1: *mut xs_handle);
}
extern "C" {
    pub fn xs_directory(
        h: *mut xs_handle,
        t: xs_transaction_t,
        path: *const ::std::os::raw::c_char,
        num: *mut ::std::os::raw::c_uint,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_read(
        h: *mut xs_handle,
        t: xs_transaction_t,
        path: *const ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xs_write(
        h: *mut xs_handle,
        t: xs_transaction_t,
        path: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn xs_mkdir(
        h: *mut xs_handle,
        t: xs_transaction_t,
        path: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn xs_rm(
        h: *mut xs_handle,
        t: xs_transaction_t,
        path: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn xs_restrict(h: *mut xs_handle, domid: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn xs_get_permissions(
        h: *mut xs_handle,
        t: xs_transaction_t,
        path: *const ::std::os::raw::c_char,
        num: *mut ::std::os::raw::c_uint,
    ) -> *mut xs_permissions;
}
extern "C" {
    pub fn xs_set_permissions(
        h: *mut xs_handle,
        t: xs_transaction_t,
        path: *const ::std::os::raw::c_char,
        perms: *mut xs_permissions,
        num_perms: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn xs_watch(
        h: *mut xs_handle,
        path: *const ::std::os::raw::c_char,
        token: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn xs_fileno(h: *mut xs_handle) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xs_check_watch(h: *mut xs_handle) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_read_watch(
        h: *mut xs_handle,
        num: *mut ::std::os::raw::c_uint,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_unwatch(
        h: *mut xs_handle,
        path: *const ::std::os::raw::c_char,
        token: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn xs_transaction_start(h: *mut xs_handle) -> xs_transaction_t;
}
extern "C" {
    pub fn xs_transaction_end(h: *mut xs_handle, t: xs_transaction_t, abort: bool) -> bool;
}
extern "C" {
    pub fn xs_introduce_domain(
        h: *mut xs_handle,
        domid: ::std::os::raw::c_uint,
        mfn: ::std::os::raw::c_ulong,
        eventchn: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn xs_set_target(
        h: *mut xs_handle,
        domid: ::std::os::raw::c_uint,
        target: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn xs_resume_domain(h: *mut xs_handle, domid: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn xs_release_domain(h: *mut xs_handle, domid: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn xs_get_domain_path(
        h: *mut xs_handle,
        domid: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_path_is_subpath(
        parent: *const ::std::os::raw::c_char,
        child: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn xs_is_domain_introduced(h: *mut xs_handle, domid: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn xs_control_command(
        h: *mut xs_handle,
        cmd: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_debug_command(
        h: *mut xs_handle,
        cmd: *const ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xs_suspend_evtchn_port(domid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ioreq {
    pub addr: u64,
    pub data: u64,
    pub count: u32,
    pub size: u32,
    pub vp_eport: u32,
    pub _pad0: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub type_: u8,
}
#[test]
fn bindgen_test_layout_ioreq() {
    assert_eq!(
        ::std::mem::size_of::<ioreq>(),
        32usize,
        concat!("Size of: ", stringify!(ioreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ioreq>(),
        8usize,
        concat!("Alignment of ", stringify!(ioreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ioreq>())).addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ioreq),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ioreq>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ioreq),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ioreq>())).count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ioreq),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ioreq>())).size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ioreq),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ioreq>())).vp_eport as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ioreq),
            "::",
            stringify!(vp_eport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ioreq>()))._pad0 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ioreq),
            "::",
            stringify!(_pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ioreq>())).type_ as *const _ as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(ioreq),
            "::",
            stringify!(type_)
        )
    );
}
impl ioreq {
    #[inline]
    pub fn state(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_state(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn data_is_ptr(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_data_is_ptr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dir(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dir(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn df(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_df(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _pad1(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set__pad1(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        state: u8,
        data_is_ptr: u8,
        dir: u8,
        df: u8,
        _pad1: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let state: u8 = unsafe { ::std::mem::transmute(state) };
            state as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let data_is_ptr: u8 = unsafe { ::std::mem::transmute(data_is_ptr) };
            data_is_ptr as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let dir: u8 = unsafe { ::std::mem::transmute(dir) };
            dir as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let df: u8 = unsafe { ::std::mem::transmute(df) };
            df as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let _pad1: u8 = unsafe { ::std::mem::transmute(_pad1) };
            _pad1 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type ioreq_t = ioreq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shared_iopage {
    pub vcpu_ioreq: [ioreq; 1usize],
}
#[test]
fn bindgen_test_layout_shared_iopage() {
    assert_eq!(
        ::std::mem::size_of::<shared_iopage>(),
        32usize,
        concat!("Size of: ", stringify!(shared_iopage))
    );
    assert_eq!(
        ::std::mem::align_of::<shared_iopage>(),
        8usize,
        concat!("Alignment of ", stringify!(shared_iopage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shared_iopage>())).vcpu_ioreq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(shared_iopage),
            "::",
            stringify!(vcpu_ioreq)
        )
    );
}
pub type shared_iopage_t = shared_iopage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buf_ioreq {
    pub type_: u8,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub data: u32,
}
#[test]
fn bindgen_test_layout_buf_ioreq() {
    assert_eq!(
        ::std::mem::size_of::<buf_ioreq>(),
        8usize,
        concat!("Size of: ", stringify!(buf_ioreq))
    );
    assert_eq!(
        ::std::mem::align_of::<buf_ioreq>(),
        4usize,
        concat!("Alignment of ", stringify!(buf_ioreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buf_ioreq>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(buf_ioreq),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buf_ioreq>())).data as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(buf_ioreq),
            "::",
            stringify!(data)
        )
    );
}
impl buf_ioreq {
    #[inline]
    pub fn pad(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_pad(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dir(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dir(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn size(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_size(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn addr(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_addr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        pad: u8,
        dir: u8,
        size: u8,
        addr: u32,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let pad: u8 = unsafe { ::std::mem::transmute(pad) };
            pad as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let dir: u8 = unsafe { ::std::mem::transmute(dir) };
            dir as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let size: u8 = unsafe { ::std::mem::transmute(size) };
            size as u64
        });
        __bindgen_bitfield_unit.set(4usize, 20u8, {
            let addr: u32 = unsafe { ::std::mem::transmute(addr) };
            addr as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type buf_ioreq_t = buf_ioreq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct buffered_iopage {
    pub read_pointer: u32,
    pub write_pointer: u32,
    pub buf_ioreq: [buf_ioreq_t; 511usize],
}
#[test]
fn bindgen_test_layout_buffered_iopage() {
    assert_eq!(
        ::std::mem::size_of::<buffered_iopage>(),
        4096usize,
        concat!("Size of: ", stringify!(buffered_iopage))
    );
    assert_eq!(
        ::std::mem::align_of::<buffered_iopage>(),
        4usize,
        concat!("Alignment of ", stringify!(buffered_iopage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buffered_iopage>())).read_pointer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(buffered_iopage),
            "::",
            stringify!(read_pointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buffered_iopage>())).write_pointer as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(buffered_iopage),
            "::",
            stringify!(write_pointer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<buffered_iopage>())).buf_ioreq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(buffered_iopage),
            "::",
            stringify!(buf_ioreq)
        )
    );
}
pub type buffered_iopage_t = buffered_iopage;
pub const xenbus_state_XenbusStateUnknown: xenbus_state = 0;
pub const xenbus_state_XenbusStateInitialising: xenbus_state = 1;
pub const xenbus_state_XenbusStateInitWait: xenbus_state = 2;
pub const xenbus_state_XenbusStateInitialised: xenbus_state = 3;
pub const xenbus_state_XenbusStateConnected: xenbus_state = 4;
pub const xenbus_state_XenbusStateClosing: xenbus_state = 5;
pub const xenbus_state_XenbusStateClosed: xenbus_state = 6;
pub const xenbus_state_XenbusStateReconfiguring: xenbus_state = 7;
pub const xenbus_state_XenbusStateReconfigured: xenbus_state = 8;
pub type xenbus_state = ::std::os::raw::c_uint;
pub use self::xenbus_state as XenbusState;
extern "C" {
    pub fn xen_mb();
}
extern "C" {
    pub fn xen_rmb();
}
extern "C" {
    pub fn xen_wmb();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
